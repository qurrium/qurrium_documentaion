Search.setIndex({"alltitles": {"0.1 WavesExecuter": [[103, null], [113, null]], "1. BasicAer or BasicProvider from qiskit <= 0.46.0:": [[92, "basicaer-or-basicprovider-from-qiskit-0-46-0"]], "1. Entanglement Entropy": [[94, "entanglement-entropy"], [109, "entanglement-entropy"], [122, "entanglement-entropy"]], "1. From qiskit <= 0.46.0:": [[92, "from-qiskit-0-46-0"]], "1.1 Entanglement Entropy by Hadamard Test": [[100, null], [110, null]], "1.1 Hadamard Test": [[114, null]], "1.2 Entanglement Entropy by Randomized Measurement": [[101, null], [111, null]], "1.2 Randomized Measurement": [[115, null]], "1.3 Entanglement Entropy by Classical Shadow": [[102, null], [112, null]], "1.3 Randomized Measurement with Error Mitigation": [[116, null]], "1.4 Randomized Measurement V1": [[117, null]], "1.5 Randomized Measurement V1 with Error Mitigation": [[118, null]], "2. Aer from qiskit-aer:": [[92, "aer-from-qiskit-aer"]], "2. From qiskit-ibm-runtime:": [[92, "from-qiskit-ibm-runtime"]], "2. WaveFuction Overlap": [[94, "wavefuction-overlap"], [109, "wavefuction-overlap"], [122, "wavefuction-overlap"]], "2.1 Hadamaed Test": [[119, null]], "2.1 Wave Function Overlap by Hadamard Test": [[98, null]], "2.2 Randomized Measurement": [[120, null]], "2.2 Wave Function Overlap by Randomized Measurement": [[99, null]], "2.3 Randomized Measurement V1": [[121, null]], "3. Access qiskit-aer-gpu:": [[92, "access-qiskit-aer-gpu"]], "3. Classical Shadow": [[122, "classical-shadow"]], "3. Magnetization Square": [[94, "magnetization-square"], [109, "magnetization-square"]], "3.1 Magnetization Square on Z Direction": [[95, null]], "3.2 Magnetization Square for Any Directions": [[96, null]], "3.3 Magnetization Square by Classical Shadow": [[97, null]], "4. Magnetization Square": [[122, "magnetization-square"]], "A01.01 - All the methods in qiskit to get a simulator backend": [[92, "a01-01-all-the-methods-in-qiskit-to-get-a-simulator-backend"]], "A01.02 - FackBackend": [[92, "a01-02-fackbackend"]], "A01.03 - Backend Wrapper": [[92, "a01-03-backend-wrapper"]], "API": [[11, null]], "About": [[105, null]], "Access the post-processing functions with Rust or Cython acceleration": [[122, "access-the-post-processing-functions-with-rust-or-cython-acceleration"]], "Acknowledgments": [[104, "acknowledgments"], [105, "acknowledgments"]], "All multiAnalysis results": [[110, "all-multianalysis-results"], [111, "all-multianalysis-results"], [112, "all-multianalysis-results"]], "Appendix 01 - Backend Wrapper": [[92, null]], "Availability": [[108, "availability"]], "Available Operation System and Processor Architecture": [[108, "available-operation-system-and-processor-architecture"]], "Available Python Version": [[108, "available-python-version"]], "Backend Access": [[93, null]], "Basic Usage": [[94, null], [95, "basic-usage"], [96, "basic-usage"], [97, "basic-usage"], [98, "basic-usage"], [99, "basic-usage"], [100, "basic-usage"], [101, "basic-usage"], [102, "basic-usage"], [103, "basic-usage"]], "By PyPI - Stable Release": [[107, "by-pypi-stable-release"]], "By TestPyPI - Nightly Release": [[107, "by-testpypi-nightly-release"]], "CapSule?": [[2, null]], "Capsule": [[11, "capsule"], [11, null]], "Citation": [[104, "citation"], [105, "citation"]], "Classical Shadow": [[94, "classical-shadow"], [109, "classical-shadow"]], "Declare": [[11, "module-qurry.declare"], [11, null]], "Dependencies": [[108, "dependencies"]], "Dummy Data": [[114, "dummy-data"], [115, "dummy-data"], [116, "dummy-data"], [117, "dummy-data"], [118, "dummy-data"], [119, "dummy-data"], [120, "dummy-data"], [121, "dummy-data"]], "Entanglement Entropy": [[94, null], [109, null], [114, "entanglement-entropy"], [115, "entanglement-entropy"], [116, "entanglement-entropy"], [117, "entanglement-entropy"], [118, "entanglement-entropy"], [122, null]], "Environment": [[104, "environment"]], "Error Mitigation on Randomized Measurement": [[94, "error-mitigation-on-randomized-measurement"], [109, "error-mitigation-on-randomized-measurement"]], "Exception": [[11, "exception"], [11, null]], "Extra. Workflow Tools": [[94, "extra-workflow-tools"], [109, "extra-workflow-tools"]], "Function demo": [[31, "function-demo"]], "Hint": [[62, null]], "Installation": [[104, "installation"], [106, null], [107, null]], "Installation and About": [[106, null]], "Integration wit your own progress bar": [[114, "integration-wit-your-own-progress-bar"], [116, "integration-wit-your-own-progress-bar"], [118, "integration-wit-your-own-progress-bar"]], "Integration with your own progress bar": [[115, "integration-with-your-own-progress-bar"], [117, "integration-with-your-own-progress-bar"], [119, "integration-with-your-own-progress-bar"], [120, "integration-with-your-own-progress-bar"], [121, "integration-with-your-own-progress-bar"]], "Magnetization Square": [[94, null]], "Maually by Git": [[107, "maually-by-git"]], "Measurement \u2013 made randomized measurement easy.": [[104, "measurement-made-randomized-measurement-easy"]], "Multi-Output": [[109, null]], "Multiple Experiments": [[110, "multiple-experiments"], [111, "multiple-experiments"], [112, "multiple-experiments"], [113, "multiple-experiments"]], "Note": [[22, null], [84, null], [84, null], [84, null]], "Other Features": [[93, null]], "Platform Support": [[108, null]], "Post-Process Availablities and Version Info": [[95, "post-process-availablities-and-version-info"], [96, "post-process-availablities-and-version-info"], [97, "post-process-availablities-and-version-info"], [98, "post-process-availablities-and-version-info"], [99, "post-process-availablities-and-version-info"], [100, "post-process-availablities-and-version-info"], [101, "post-process-availablities-and-version-info"], [102, "post-process-availablities-and-version-info"], [103, "post-process-availablities-and-version-info"], [110, "post-process-availablities-and-version-info"], [111, "post-process-availablities-and-version-info"], [112, "post-process-availablities-and-version-info"], [113, "post-process-availablities-and-version-info"], [114, "post-process-availablities-and-version-info"], [115, "post-process-availablities-and-version-info"], [116, "post-process-availablities-and-version-info"], [117, "post-process-availablities-and-version-info"], [118, "post-process-availablities-and-version-info"], [119, "post-process-availablities-and-version-info"], [120, "post-process-availablities-and-version-info"], [121, "post-process-availablities-and-version-info"]], "Post-Processing": [[122, null]], "Post-Processing Functions": [[11, null]], "Post-Processing Utilties": [[11, null]], "Process": [[11, "module-qurry.process"]], "Qurrech": [[11, "qurrech"], [11, null]], "Qurrent": [[11, "qurrent"], [11, null]], "Qurries": [[11, "qurries"], [11, null]], "Qurrium": [[11, "qurrium"], [11, null], [104, null]], "Randomized Measurement": [[94, "randomized-measurement"], [109, "randomized-measurement"]], "Recipe": [[11, "module-qurry.recipe"], [11, null]], "Reference": [[94, "reference"], [109, "reference"]], "See also": [[92, null]], "Simple Example": [[114, "simple-example"], [115, "simple-example"], [116, "simple-example"], [117, "simple-example"], [118, "simple-example"], [119, "simple-example"], [120, "simple-example"], [121, "simple-example"]], "Stay connected. More features coming soon\u2026": [[104, "stay-connected-more-features-coming-soon"]], "String Operator": [[94, "string-operator"], [109, "string-operator"]], "Template of API": [[11, "template-of-api"], [11, null]], "Test Installation": [[107, "test-installation"]], "The Future of Acceleration": [[122, "the-future-of-acceleration"]], "Tip": [[11, null]], "Tools": [[11, "module-qurry.tools"], [11, null]], "Usage": [[106, null]], "Using Python backend": [[115, "using-python-backend"], [116, "using-python-backend"], [117, "using-python-backend"], [118, "using-python-backend"], [120, "using-python-backend"], [121, "using-python-backend"]], "WaveFuction Overlap": [[94, null], [122, null]], "WaveFunction Overlap": [[119, "wavefunction-overlap"], [120, "wavefunction-overlap"], [121, "wavefunction-overlap"]], "Why name Qurry / Qurrium": [[105, "why-name-qurry-qurrium"]], "With Existing All System Data": [[116, "with-existing-all-system-data"], [118, "with-existing-all-system-data"]], "Workflow Tools": [[94, null], [109, null]], "a. Import the instances": [[95, "a-import-the-instances"], [96, "a-import-the-instances"], [97, "a-import-the-instances"], [98, "a-import-the-instances"], [99, "a-import-the-instances"], [100, "a-import-the-instances"], [101, "a-import-the-instances"], [102, "a-import-the-instances"], [103, "a-import-the-instances"], [110, "a-import-the-instances"], [111, "a-import-the-instances"], [112, "a-import-the-instances"], [113, "a-import-the-instances"]], "afterwards": [[57, null], [65, null]], "analyses": [[58, null]], "analysis": [[34, "module-qurry.qurrech.hadamard_test.analysis"], [35, "module-qurry.qurrech.randomized_measure.analysis"], [36, "module-qurry.qurrech.randomized_measure_v1.analysis"], [37, "module-qurry.qurrent.classical_shadow.analysis"], [38, "module-qurry.qurrent.hadamard_test.analysis"], [39, "module-qurry.qurrent.randomized_measure.analysis"], [40, "module-qurry.qurrent.randomized_measure_v1.analysis"], [41, "module-qurry.qurries.magnet_square.analysis"], [42, "module-qurry.qurries.magnet_square_z.analysis"], [44, "module-qurry.qurries.samplingqurry.analysis"], [45, "module-qurry.qurries.string_operator.analysis"], [47, "module-qurry.qurries.wavesqurry.analysis"], [48, null], [48, "id1"]], "arguments": [[34, "module-qurry.qurrech.hadamard_test.arguments"], [35, "module-qurry.qurrech.randomized_measure.arguments"], [36, "module-qurry.qurrech.randomized_measure_v1.arguments"], [37, "module-qurry.qurrent.classical_shadow.arguments"], [38, "module-qurry.qurrent.hadamard_test.arguments"], [39, "module-qurry.qurrent.randomized_measure.arguments"], [40, "module-qurry.qurrent.randomized_measure_v1.arguments"], [41, "module-qurry.qurries.magnet_square.arguments"], [42, "module-qurry.qurries.magnet_square_z.arguments"], [44, "module-qurry.qurries.samplingqurry.arguments"], [45, "module-qurry.qurries.string_operator.arguments"], [47, "module-qurry.qurries.wavesqurry.arguments"], [59, null], [66, null]], "availability": [[12, null]], "b. Preparing quantum circuit": [[95, "b-preparing-quantum-circuit"], [96, "b-preparing-quantum-circuit"], [97, "b-preparing-quantum-circuit"], [98, "b-preparing-quantum-circuit"], [99, "b-preparing-quantum-circuit"], [100, "b-preparing-quantum-circuit"], [101, "b-preparing-quantum-circuit"], [102, "b-preparing-quantum-circuit"], [103, "b-preparing-quantum-circuit"], [110, "b-preparing-quantum-circuit"], [111, "b-preparing-quantum-circuit"], [112, "b-preparing-quantum-circuit"], [113, "b-preparing-quantum-circuit"]], "backend": [[31, "module-qurry.process.status.backend"], [85, null]], "backend_manager": [[85, "module-qurry.tools.backend.backend_manager"]], "base_run": [[8, "module-qurry.declare.run.base_run"]], "beforewards": [[60, null], [67, null]], "bit_slice": [[33, "bit-slice"]], "build": [[73, null]], "c. Execute multiple experiments at once": [[110, "c-execute-multiple-experiments-at-once"], [111, "c-execute-multiple-experiments-at-once"], [112, "c-execute-multiple-experiments-at-once"], [113, "c-execute-multiple-experiments-at-once"]], "c. Execute the circuit": [[95, "c-execute-the-circuit"], [96, "c-execute-the-circuit"], [97, "c-execute-the-circuit"], [98, "c-execute-the-circuit"], [99, "c-execute-the-circuit"], [100, "c-execute-the-circuit"], [101, "c-execute-the-circuit"], [102, "c-execute-the-circuit"], [103, "c-execute-the-circuit"]], "cat": [[83, "module-qurry.recipe.simple.cat"]], "chunk": [[74, null]], "classical_shadow": [[13, null], [16, null], [37, null]], "command": [[86, null]], "construct": [[75, null]], "container": [[14, null], [26, "module-qurry.process.randomized_measure.entangled_entropy.container"], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1.container"], [51, null]], "counts_process": [[33, "counts-process"]], "d. Export them after all": [[95, "d-export-them-after-all"], [97, "d-export-them-after-all"], [98, "d-export-them-after-all"], [99, "d-export-them-after-all"], [100, "d-export-them-after-all"], [101, "d-export-them-after-all"], [102, "d-export-them-after-all"]], "d. Get all post-processing result": [[110, "d-get-all-post-processing-result"]], "d. More direction Consider": [[96, "d-more-direction-consider"]], "d. Run post-processing at once": [[111, "d-run-post-processing-at-once"], [112, "d-run-post-processing-at-once"]], "d. Take all counts": [[113, "d-take-all-counts"]], "d. take counts": [[103, "d-take-counts"]], "datetime": [[87, null]], "dummy": [[33, "dummy"]], "e. Export them after all": [[96, "e-export-them-after-all"], [103, "e-export-them-after-all"]], "e. Read exported multimanager data": [[113, "e-read-exported-multimanager-data"]], "e. Run post-processing at once with specific analysis arguments": [[110, "e-run-post-processing-at-once-with-specific-analysis-arguments"], [111, "e-run-post-processing-at-once-with-specific-analysis-arguments"], [112, "e-run-post-processing-at-once-with-specific-analysis-arguments"]], "echo_cell": [[30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell"]], "echo_cell_2": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2"]], "echo_core": [[30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core"]], "echo_core_2": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap.echo_core_2"]], "entangled_entropy": [[24, "module-qurry.process.hadamard_test.entangled_entropy"], [26, null], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy"]], "entangled_entropy_2": [[26, "module-qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2"]], "entangled_entropy_v1": [[27, null]], "entropy_core": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1.entropy_core"]], "entropy_core_2": [[26, "module-qurry.process.randomized_measure.entangled_entropy.entropy_core_2"]], "env_check": [[85, "module-qurry.tools.backend.env_check"]], "error_mitigation": [[26, "module-qurry.process.randomized_measure.entangled_entropy.error_mitigation"]], "except_decorator": [[88, null]], "exception": [[0, null]], "exceptions": [[10, null], [23, null]], "expectation_process": [[15, null]], "experiment": [[34, "module-qurry.qurrech.hadamard_test.experiment"], [35, "module-qurry.qurrech.randomized_measure.experiment"], [36, "module-qurry.qurrech.randomized_measure_v1.experiment"], [37, "module-qurry.qurrent.classical_shadow.experiment"], [38, "module-qurry.qurrent.hadamard_test.experiment"], [39, "module-qurry.qurrent.randomized_measure.experiment"], [40, "module-qurry.qurrent.randomized_measure_v1.experiment"], [41, "module-qurry.qurries.magnet_square.experiment"], [42, "module-qurry.qurries.magnet_square_z.experiment"], [44, "module-qurry.qurries.samplingqurry.experiment"], [45, "module-qurry.qurries.string_operator.experiment"], [47, "module-qurry.qurries.wavesqurry.experiment"], [61, null], [63, null]], "experiments": [[49, null]], "experiments_wrapper": [[50, null]], "export": [[62, null]], "f. Read exported multimanager data": [[110, "f-read-exported-multimanager-data"], [111, "f-read-exported-multimanager-data"], [112, "f-read-exported-multimanager-data"]], "gitsync": [[4, "module-qurry.capsule.mori.gitsync"]], "hadamard": [[24, null]], "hadamard_entangled_entropy": [[114, "hadamard-entangled-entropy"]], "hadamard_overlap_echo": [[119, "hadamard-overlap-echo"]], "hadamard_test": [[34, null], [38, null]], "hoshi": [[1, null], [1, "id1"]], "i. Directly input the circuit": [[95, "i-directly-input-the-circuit"], [96, "i-directly-input-the-circuit"], [98, "i-directly-input-the-circuit"], [99, "i-directly-input-the-circuit"], [100, "i-directly-input-the-circuit"], [101, "i-directly-input-the-circuit"], [102, "i-directly-input-the-circuit"], [103, "i-directly-input-the-circuit"]], "i. Preparing the operators for post-processing": [[97, "i-preparing-the-operators-for-post-processing"]], "ibm": [[8, "module-qurry.declare.run.ibm"]], "ii. Add the circuits to container .waves, then call them later.": [[95, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [96, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [98, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [99, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [100, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [101, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [102, "ii-add-the-circuits-to-container-waves-then-call-them-later"], [103, "ii-add-the-circuits-to-container-waves-then-call-them-later"]], "ii. Find a Proper Number of Classical Snapshot for Epsilon Upperbound": [[97, "ii-find-a-proper-number-of-classical-snapshot-for-epsilon-upperbound"]], "iii. Execute experiment and run post-processing": [[97, "iii-execute-experiment-and-run-post-processing"]], "import_fake": [[85, "module-qurry.tools.backend.import_fake"]], "import_simulator": [[85, "import-simulator"]], "inputfixer": [[77, null]], "intracell": [[83, "module-qurry.recipe.simple.intracell"]], "iocontrol": [[78, null]], "jsonablize": [[3, null]], "magnet_square": [[25, null], [25, "id1"], [41, null]], "magnet_square_z": [[42, null]], "magsq_core": [[25, "module-qurry.process.magnet_square.magsq_core"], [32, "module-qurry.process.string_operator.strop_core"]], "matrix_calcution": [[17, null]], "mori": [[4, null]], "multimanager": [[68, null], [69, null]], "multimanagers": [[52, null]], "multiquantity": [[53, null]], "n_body": [[82, null]], "other": [[33, "other"]], "parallelmanager": [[89, null]], "paramagnet": [[83, "module-qurry.recipe.simple.paramagnet"]], "passmanagers": [[54, null]], "position_distribution": [[43, null]], "process": [[70, null]], "progressbar": [[90, null]], "purity_cell": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1.purity_cell"]], "purity_cell_2": [[26, "module-qurry.process.randomized_measure.entangled_entropy.purity_cell_2"]], "purity_echo_core": [[24, "module-qurry.process.hadamard_test.purity_echo_core"]], "qasm": [[79, null]], "qiskit_version": [[91, null]], "quick": [[5, null]], "qurrium": [[7, null], [72, null]], "qurry": [[34, "module-qurry.qurrech.hadamard_test.qurry"], [35, "module-qurry.qurrech.randomized_measure.qurry"], [36, "module-qurry.qurrech.randomized_measure_v1.qurry"], [37, "module-qurry.qurrent.classical_shadow.qurry"], [38, "module-qurry.qurrent.hadamard_test.qurry"], [39, "module-qurry.qurrent.randomized_measure.qurry"], [40, "module-qurry.qurrent.randomized_measure_v1.qurry"], [41, "module-qurry.qurries.magnet_square.qurry"], [42, "module-qurry.qurries.magnet_square_z.qurry"], [44, "module-qurry.qurries.samplingqurry.qurry"], [45, "module-qurry.qurries.string_operator.qurry"], [47, "module-qurry.qurries.wavesqurry.qurry"]], "random_unitary": [[80, null]], "randomized": [[33, "randomized"], [81, null]], "randomized_entangled_entropy": [[115, "randomized-entangled-entropy"]], "randomized_entangled_entropy_mitigated": [[116, "randomized-entangled-entropy-mitigated"]], "randomized_entangled_entropy_mitigated_v1": [[118, "randomized-entangled-entropy-mitigated-v1"]], "randomized_entangled_entropy_v1": [[117, "randomized-entangled-entropy-v1"]], "randomized_measure": [[28, null], [35, null], [39, null]], "randomized_measure_v1": [[36, null], [40, null]], "randomized_overlap_echo": [[120, "randomized-overlap-echo"]], "randomized_overlap_echo_v1": [[121, "randomized-overlap-echo-v1"]], "repr_modify": [[1, "module-qurry.capsule.hoshi.repr_modify"]], "rho_m_core": [[18, null]], "rho_m_flatten": [[19, null]], "rho_mk_cell": [[20, null]], "run": [[8, null]], "samplingqurry": [[44, null]], "simple": [[83, null]], "simulator": [[8, "module-qurry.declare.run.simulator"]], "status": [[31, null]], "string_operator": [[32, null], [32, "id1"], [45, null]], "taglist": [[4, "module-qurry.capsule.mori.taglist"]], "template": [[84, null]], "test": [[33, "test"]], "trace_expect_process": [[21, null]], "transpile": [[9, null]], "twisted_operator": [[46, null]], "unitary_set": [[22, null]], "utils": [[6, null], [33, null], [35, "module-qurry.qurrech.randomized_measure.utils"], [37, "module-qurry.qurrent.classical_shadow.utils"], [39, "module-qurry.qurrent.randomized_measure.utils"], [40, "module-qurry.qurrent.randomized_measure_v1.utils"], [41, "module-qurry.qurries.magnet_square.utils"], [42, "module-qurry.qurries.magnet_square_z.utils"], [45, "module-qurry.qurries.string_operator.utils"], [64, null], [71, null], [76, null], [85, "module-qurry.tools.backend.utils"]], "wavefunction_overlap": [[24, "module-qurry.process.hadamard_test.wavefunction_overlap"], [29, null], [30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap"]], "wavefunction_overlap_2": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2"]], "wavefunction_overlap_v1": [[30, null]], "waves_dynamic": [[55, null]], "waves_static": [[56, null]], "wavesqurry": [[47, null]]}, "docurls": ["api/capsule/exception.html", "api/capsule/hoshi.html", "api/capsule/index.html", "api/capsule/jsonablize.html", "api/capsule/mori.html", "api/capsule/quick.html", "api/capsule/utils.html", "api/declare/qurrium.html", "api/declare/run.html", "api/declare/transpile.html", "api/exception.html", "api/index.html", "api/process/availability.html", "api/process/classical_shadow/classical_shadow.html", "api/process/classical_shadow/container.html", "api/process/classical_shadow/expectation_process.html", "api/process/classical_shadow/index.html", "api/process/classical_shadow/matrix_calcution.html", "api/process/classical_shadow/rho_m_core.html", "api/process/classical_shadow/rho_m_flatten.html", "api/process/classical_shadow/rho_mk_cell.html", "api/process/classical_shadow/trace_expect_process.html", "api/process/classical_shadow/unitary_set.html", "api/process/exception.html", "api/process/hadamard.html", "api/process/magnet_square.html", "api/process/randomized_measure/entangled_entropy.html", "api/process/randomized_measure/entangled_entropy_v1.html", "api/process/randomized_measure/index.html", "api/process/randomized_measure/wavefunction_overlap.html", "api/process/randomized_measure/wavefunction_overlap_v1.html", "api/process/status.html", "api/process/string_operator.html", "api/process/utils.html", "api/qurrech/hadamard_test.html", "api/qurrech/randomized_measure.html", "api/qurrech/randomized_measure_v1.html", "api/qurrent/classical_shadow.html", "api/qurrent/hadamard_test.html", "api/qurrent/randomized_measure.html", "api/qurrent/randomized_measure_v1.html", "api/qurries/magnet_square.html", "api/qurries/magnet_square_z.html", "api/qurries/position_distribution.html", "api/qurries/samplingqurry.html", "api/qurries/string_operator.html", "api/qurries/twisted_operator.html", "api/qurries/wavesqurry.html", "api/qurrium/analysis.html", "api/qurrium/container/experiments.html", "api/qurrium/container/experiments_wrapper.html", "api/qurrium/container/index.html", "api/qurrium/container/multimanagers.html", "api/qurrium/container/multiquantity.html", "api/qurrium/container/passmanagers.html", "api/qurrium/container/waves_dynamic.html", "api/qurrium/container/waves_static.html", "api/qurrium/experiment/afterwards.html", "api/qurrium/experiment/analyses.html", "api/qurrium/experiment/arguments.html", "api/qurrium/experiment/beforewards.html", "api/qurrium/experiment/experiment.html", "api/qurrium/experiment/export.html", "api/qurrium/experiment/index.html", "api/qurrium/experiment/utils.html", "api/qurrium/multimanager/afterwards.html", "api/qurrium/multimanager/arguments.html", "api/qurrium/multimanager/beforewards.html", "api/qurrium/multimanager/index.html", "api/qurrium/multimanager/multimanager.html", "api/qurrium/multimanager/process.html", "api/qurrium/multimanager/utils.html", "api/qurrium/qurrium.html", "api/qurrium/utils/build.html", "api/qurrium/utils/chunk.html", "api/qurrium/utils/construct.html", "api/qurrium/utils/index.html", "api/qurrium/utils/inputfixer.html", "api/qurrium/utils/iocontrol.html", "api/qurrium/utils/qasm.html", "api/qurrium/utils/random_unitary.html", "api/qurrium/utils/randomized.html", "api/recipe/n_body.html", "api/recipe/simple.html", "api/template.html", "api/tools/backend.html", "api/tools/command.html", "api/tools/datetime.html", "api/tools/except_decorator.html", "api/tools/parallelmanager.html", "api/tools/progressbar.html", "api/tools/qiskit_version.html", "appendix/a01_backend_wrapper.html", "appendix/index.html", "basic_usage/index.html", "basic_usage/qurmagsq_3_1_zdir_magnet_square.html", "basic_usage/qurmagsq_3_2_magnet_square.html", "basic_usage/qurmagsq_3_3_classical_shadow.html", "basic_usage/qurrech_2_1_hadamard_test.html", "basic_usage/qurrech_2_2_randomized_measure.html", "basic_usage/qurrent_1_1_hadamard_test.html", "basic_usage/qurrent_1_2_randomized_measure.html", "basic_usage/qurrent_1_3_classical_shadow.html", "basic_usage/qurrium_0_1_waves_executer.html", "index.html", "more_info/about.html", "more_info/index.html", "more_info/install.html", "more_info/platform_support.html", "multi_output/index.html", "multi_output/qurrent_1_1_hadamard_test.html", "multi_output/qurrent_1_2_randomized_measure.html", "multi_output/qurrent_1_3_classical_shadow.html", "multi_output/qurrium_0_1_waves_executer.html", "postprocessing/01_entropy_measure/1_hadamard.html", "postprocessing/01_entropy_measure/2_randomized_measure.html", "postprocessing/01_entropy_measure/3_randomized_measure.html", "postprocessing/01_entropy_measure/4_randomized_measure_v1.html", "postprocessing/01_entropy_measure/5_randomized_measure_v1.html", "postprocessing/02_wave_func_overlap/1_hadamard.html", "postprocessing/02_wave_func_overlap/2_randomized_measure.html", "postprocessing/02_wave_func_overlap/3_randomized_measure_v1.html", "postprocessing/index.html"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxext.opengraph": 1}, "indexentries": {"accessor (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.accessor", false]], "accuracy_predict_epsilon (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.accuracy_predict_epsilon", false]], "accuracy_predict_epsilon (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.accuracy_predict_epsilon", false]], "accuracy_predict_epsilon_calc() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.accuracy_predict_epsilon_calc", false]], "accuracy_prob_comp_delta (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.accuracy_prob_comp_delta", false]], "accuracy_prob_comp_delta (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.accuracy_prob_comp_delta", false]], "accuracy_prob_comp_delta_calc() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.accuracy_prob_comp_delta_calc", false]], "accuracyprobabilitycalculationerror": [[23, "qurry.process.exceptions.AccuracyProbabilityCalculationError", false]], "accuracyprobabilitywarning": [[23, "qurry.process.exceptions.AccuracyProbabilityWarning", false]], "actual_num_qubits (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.actual_num_qubits", false]], "actual_num_qubits (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.actual_num_qubits", false]], "actual_num_qubits_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.actual_num_qubits_1", false]], "actual_num_qubits_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.actual_num_qubits_2", false]], "add() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.add", false]], "add() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.add", false]], "add() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.add", false]], "add_backend() (qurry.tools.backend.backend_manager.backendwrapper method)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.add_backend", false]], "add_only() (qurry.tools.datetime.datetimedict method)": [[87, "qurry.tools.datetime.DatetimeDict.add_only", false]], "add_or_reducer() (in module qurry.process.string_operator.strop_core)": [[32, "qurry.process.string_operator.strop_core.add_or_reducer", false]], "add_serial() (qurry.tools.datetime.datetimedict method)": [[87, "qurry.tools.datetime.DatetimeDict.add_serial", false]], "adventures (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.adventures", false]], "aerbackendrunargs (class in qurry.declare.run.simulator)": [[8, "qurry.declare.run.simulator.AerBackendRunArgs", false]], "after (class in qurry.qurrium.experiment.afterwards)": [[57, "qurry.qurrium.experiment.afterwards.After", false]], "after (class in qurry.qurrium.multimanager.afterwards)": [[65, "qurry.qurrium.multimanager.afterwards.After", false]], "after_lock (qurry.qurrium.multimanager.multimanager.multimanager attribute)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.after_lock", false]], "afterwards (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.afterwards", false]], "all() (qurry.capsule.mori.taglist.taglist method)": [[4, "qurry.capsule.mori.taglist.TagList.all", false]], "all_exps_container (qurry.qurrium.container.experiments_wrapper.experimentcontainerwrapper property)": [[50, "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper.all_exps_container", false]], "all_system_source (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.all_system_source", false]], "all_system_source (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.all_system_source", false]], "all_trace_rho_by_einsum_aij_bji_to_ab_jax() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.all_trace_rho_by_einsum_aij_bji_to_ab_jax", false]], "all_trace_rho_by_einsum_aij_bji_to_ab_numpy() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.all_trace_rho_by_einsum_aij_bji_to_ab_numpy", false]], "allcounts (qurry.qurrium.multimanager.afterwards.after attribute)": [[65, "qurry.qurrium.multimanager.afterwards.After.allCounts", false]], "allow_nan (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.allow_nan", false]], "allsystemsource (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.allSystemSource", false]], "allsystemsource (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.allSystemSource", false]], "alltracerhomethod (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.AllTraceRhoMethod", false]], "analysescontainer (class in qurry.qurrium.experiment.analyses)": [[58, "qurry.qurrium.experiment.analyses.AnalysesContainer", false]], "analysis_instance (qurry.qurrech.hadamard_test.experiment.echolistenhadamardexperiment property)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.analysis_instance", false]], "analysis_instance (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment property)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.analysis_instance", false]], "analysis_instance (qurry.qurrech.randomized_measure_v1.experiment.echolistenrandomizedv1experiment property)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.analysis_instance", false]], "analysis_instance (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment property)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.analysis_instance", false]], "analysis_instance (qurry.qurrent.hadamard_test.experiment.entropymeasurehadamardexperiment property)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.analysis_instance", false]], "analysis_instance (qurry.qurrent.randomized_measure.experiment.entropymeasurerandomizedexperiment property)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.analysis_instance", false]], "analysis_instance (qurry.qurrent.randomized_measure_v1.experiment.entropymeasurerandomizedv1experiment property)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.analysis_instance", false]], "analysis_instance (qurry.qurries.magnet_square.experiment.magnetsquareexperiment property)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.analysis_instance", false]], "analysis_instance (qurry.qurries.magnet_square_z.experiment.zdirmagnetsquareexperiment property)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.analysis_instance", false]], "analysis_instance (qurry.qurries.samplingqurry.experiment.qurryexperiment property)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment.analysis_instance", false]], "analysis_instance (qurry.qurries.string_operator.experiment.stringoperatorexperiment property)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment.analysis_instance", false]], "analysis_instance (qurry.qurries.wavesqurry.experiment.wavesexecuterexperiment property)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.analysis_instance", false]], "analysis_instance (qurry.qurrium.experiment.experiment.experimentprototype property)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.analysis_instance", false]], "analysisprototype (class in qurry.qurrium.analysis.analysis)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype", false]], "analyze() (qurry.qurrech.hadamard_test.experiment.echolistenhadamardexperiment method)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.analyze", false]], "analyze() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.analyze", false]], "analyze() (qurry.qurrech.randomized_measure_v1.experiment.echolistenrandomizedv1experiment method)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.analyze", false]], "analyze() (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment method)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.analyze", false]], "analyze() (qurry.qurrent.hadamard_test.experiment.entropymeasurehadamardexperiment method)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.analyze", false]], "analyze() (qurry.qurrent.randomized_measure.experiment.entropymeasurerandomizedexperiment method)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.analyze", false]], "analyze() (qurry.qurrent.randomized_measure_v1.experiment.entropymeasurerandomizedv1experiment method)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.analyze", false]], "analyze() (qurry.qurries.magnet_square.experiment.magnetsquareexperiment method)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.analyze", false]], "analyze() (qurry.qurries.magnet_square_z.experiment.zdirmagnetsquareexperiment method)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.analyze", false]], "analyze() (qurry.qurries.samplingqurry.experiment.qurryexperiment method)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment.analyze", false]], "analyze() (qurry.qurries.string_operator.experiment.stringoperatorexperiment method)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment.analyze", false]], "analyze() (qurry.qurries.wavesqurry.experiment.wavesexecuterexperiment method)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.analyze", false]], "analyze() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.analyze", false]], "analyze() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.analyze", false]], "analyzeargs (class in qurry.declare.qurrium)": [[7, "qurry.declare.qurrium.AnalyzeArgs", false]], "args (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.args", false]], "args (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.args", false]], "arguments_instance (qurry.qurrech.hadamard_test.experiment.echolistenhadamardexperiment property)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.arguments_instance", false]], "arguments_instance (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment property)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.arguments_instance", false]], "arguments_instance (qurry.qurrech.randomized_measure_v1.experiment.echolistenrandomizedv1experiment property)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.arguments_instance", false]], "arguments_instance (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment property)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.arguments_instance", false]], "arguments_instance (qurry.qurrent.hadamard_test.experiment.entropymeasurehadamardexperiment property)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.arguments_instance", false]], "arguments_instance (qurry.qurrent.randomized_measure.experiment.entropymeasurerandomizedexperiment property)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.arguments_instance", false]], "arguments_instance (qurry.qurrent.randomized_measure_v1.experiment.entropymeasurerandomizedv1experiment property)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.arguments_instance", false]], "arguments_instance (qurry.qurries.magnet_square.experiment.magnetsquareexperiment property)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.arguments_instance", false]], "arguments_instance (qurry.qurries.magnet_square_z.experiment.zdirmagnetsquareexperiment property)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.arguments_instance", false]], "arguments_instance (qurry.qurries.samplingqurry.experiment.qurryexperiment property)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment.arguments_instance", false]], "arguments_instance (qurry.qurries.string_operator.experiment.stringoperatorexperiment property)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment.arguments_instance", false]], "arguments_instance (qurry.qurries.wavesqurry.experiment.wavesexecuterexperiment property)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.arguments_instance", false]], "arguments_instance (qurry.qurrium.experiment.experiment.experimentprototype property)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.arguments_instance", false]], "argumentsprototype (class in qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.ArgumentsPrototype", false]], "availability_status_print() (in module qurry.process.status.backend)": [[31, "qurry.process.status.backend.availability_status_print", false]], "available_aer (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_aer", false]], "available_aer_callsign (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_aer_callsign", false]], "available_backends (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_backends", false]], "available_backends_callsign (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_backends_callsign", false]], "available_fake (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_fake", false]], "available_fake_callsign (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_fake_callsign", false]], "available_ibmq (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_ibmq", false]], "available_ibmq_callsign (qurry.tools.backend.backend_manager.backendwrapper property)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.available_ibmq_callsign", false]], "availablility() (in module qurry.process.availability)": [[12, "qurry.process.availability.availablility", false]], "average_classical_snapshots_rho (qurry.process.classical_shadow.container.classicalshadowbasic attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowBasic.average_classical_snapshots_rho", false]], "average_classical_snapshots_rho (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.average_classical_snapshots_rho", false]], "backend (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedanalyzeargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedAnalyzeArgs.backend", false]], "backend (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1analyzeargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs.backend", false]], "backend (qurry.qurrent.classical_shadow.arguments.shadowunveilanalyzeargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilAnalyzeArgs.backend", false]], "backend (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedanalyzeargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedAnalyzeArgs.backend", false]], "backend (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1analyzeargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs.backend", false]], "backend (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.backend", false]], "backend (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.backend", false]], "backend_name_getter() (in module qurry.tools.backend.utils)": [[85, "qurry.tools.backend.utils.backend_name_getter", false]], "backend_types (in module qurry.process.availability)": [[12, "qurry.process.availability.BACKEND_TYPES", false]], "backendcallsigndict (in module qurry.tools.backend.backend_manager)": [[85, "qurry.tools.backend.backend_manager.BackendCallSignDict", false]], "backenddict (in module qurry.tools.backend.backend_manager)": [[85, "qurry.tools.backend.backend_manager.BackendDict", false]], "backendname() (in module qurry.tools.backend.utils)": [[85, "qurry.tools.backend.utils.backendName", false]], "backendwrapper (class in qurry.tools.backend.backend_manager)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper", false]], "baserunargs (class in qurry.declare.run.base_run)": [[8, "qurry.declare.run.base_run.BaseRunArgs", false]], "basicaerbackendrunargs (class in qurry.declare.run.simulator)": [[8, "qurry.declare.run.simulator.BasicAerBackendRunArgs", false]], "basicargs (class in qurry.declare.qurrium)": [[7, "qurry.declare.qurrium.BasicArgs", false]], "basicsimulatorrunargs (class in qurry.declare.run.simulator)": [[8, "qurry.declare.run.simulator.BasicSimulatorRunArgs", false]], "before (class in qurry.qurrium.experiment.beforewards)": [[60, "qurry.qurrium.experiment.beforewards.Before", false]], "before (class in qurry.qurrium.multimanager.beforewards)": [[67, "qurry.qurrium.multimanager.beforewards.Before", false]], "beforewards (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.beforewards", false]], "bitsstringrangeallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.bitsStringRangeAllSys", false]], "bitsstringrangeallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.bitsStringRangeAllSys", false]], "bitstring_mapping (qurry.qurrent.classical_shadow.analysis.suanalysisinput attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.bitstring_mapping", false]], "bitstring_mapping (qurry.qurrent.randomized_measure.analysis.emranalysisinput attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.bitstring_mapping", false]], "bitstring_mapping_1 (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.bitstring_mapping_1", false]], "bitstring_mapping_2 (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.bitstring_mapping_2", false]], "bitstring_mapping_getter() (in module qurry.qurrent.randomized_measure.utils)": [[39, "qurry.qurrent.randomized_measure.utils.bitstring_mapping_getter", false]], "bitstringrange (qurry.process.randomized_measure.entangled_entropy_v1.container.existingallsystemsource attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.ExistingAllSystemSource.bitStringRange", false]], "bitstringrange (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.bitStringRange", false]], "bitstringrange (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.bitStringRange", false]], "bitstringrange (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.bitStringRange", false]], "bitstringrange (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.bitStringRange", false]], "border_cond (qurry.recipe.simple.paramagnet.topologicalparamagnet property)": [[83, "qurry.recipe.simple.paramagnet.TopologicalParamagnet.border_cond", false]], "buffering (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.buffering", false]], "build() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment class method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.build", false]], "build() (qurry.qurrium.experiment.experiment.experimentprototype class method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.build", false]], "build() (qurry.qurrium.multimanager.arguments.multicommonparams class method)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.build", false]], "build() (qurry.qurrium.multimanager.multimanager.multimanager class method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.build", false]], "build() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.build", false]], "build_for_multiprocess() (qurry.qurrium.experiment.experiment.experimentprototype class method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.build_for_multiprocess", false]], "call() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.call", false]], "call() (qurry.qurrium.container.experiments.experimentcontainer method)": [[49, "qurry.qurrium.container.experiments.ExperimentContainer.call", false]], "call() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.call", false]], "capsule() (in module qurry.capsule)": [[2, "qurry.capsule.CapSule", false]], "capsuleerror": [[0, "qurry.capsule.exception.CapSuleError", false]], "capsulevaluederror": [[0, "qurry.capsule.exception.CapSuleValuedError", false]], "capsulewarning": [[0, "qurry.capsule.exception.CapSuleWarning", false]], "cat (class in qurry.recipe.simple.cat)": [[83, "qurry.recipe.simple.cat.Cat", false]], "check_and_generate_for_single_circ() (in module qurry.qurrium.utils.random_unitary)": [[80, "qurry.qurrium.utils.random_unitary.check_and_generate_for_single_circ", false]], "check_circular (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.check_circular", false]], "check_input_for_experiment() (in module qurry.qurrium.utils.random_unitary)": [[80, "qurry.qurrium.utils.random_unitary.check_input_for_experiment", false]], "circuit (qurry.qurrium.experiment.beforewards.before attribute)": [[60, "qurry.qurrium.experiment.beforewards.Before.circuit", false]], "circuit_method() (in module qurry.qurries.magnet_square.utils)": [[41, "qurry.qurries.magnet_square.utils.circuit_method", false]], "circuit_method() (in module qurry.qurries.magnet_square_z.utils)": [[42, "qurry.qurries.magnet_square_z.utils.circuit_method", false]], "circuit_method() (in module qurry.qurries.string_operator.utils)": [[45, "qurry.qurries.string_operator.utils.circuit_method", false]], "circuit_method_compose() (in module qurry.qurrent.randomized_measure.utils)": [[39, "qurry.qurrent.randomized_measure.utils.circuit_method_compose", false]], "circuit_method_core() (in module qurry.qurrent.classical_shadow.utils)": [[37, "qurry.qurrent.classical_shadow.utils.circuit_method_core", false]], "circuit_method_core_v1() (in module qurry.qurrent.randomized_measure_v1.utils)": [[40, "qurry.qurrent.randomized_measure_v1.utils.circuit_method_core_v1", false]], "circuit_qasm (qurry.qurrium.experiment.beforewards.before attribute)": [[60, "qurry.qurrium.experiment.beforewards.Before.circuit_qasm", false]], "circuits_map (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.circuits_map", false]], "circuits_num (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.circuits_num", false]], "classical_registers (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.classical_registers", false]], "classical_registers (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.classical_registers", false]], "classical_registers (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.classical_registers", false]], "classical_registers (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.classical_registers", false]], "classical_registers_actually (qurry.process.classical_shadow.container.classicalshadowbasic attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowBasic.classical_registers_actually", false]], "classical_registers_actually (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.classical_registers_actually", false]], "classical_registers_actually (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.classical_registers_actually", false]], "classical_registers_actually (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.classical_registers_actually", false]], "classical_registers_actually (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.classical_registers_actually", false]], "classical_registers_actually (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.classical_registers_actually", false]], "classical_registers_actually_all_sys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.classical_registers_actually_all_sys", false]], "classical_registers_actually_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.classical_registers_actually_all_sys", false]], "classical_registers_actually_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.classical_registers_actually_all_sys", false]], "classical_registers_actually_all_sys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.classical_registers_actually_all_sys", false]], "classical_registers_all_sys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.classical_registers_all_sys", false]], "classical_registers_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.classical_registers_all_sys", false]], "classical_registers_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.classical_registers_all_sys", false]], "classical_registers_all_sys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.classical_registers_all_sys", false]], "classical_shadow_complex() (in module qurry.process.classical_shadow.classical_shadow)": [[13, "qurry.process.classical_shadow.classical_shadow.classical_shadow_complex", false]], "classicalshadowbasic (class in qurry.process.classical_shadow.container)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowBasic", false]], "classicalshadowcomplex (class in qurry.process.classical_shadow.container)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowComplex", false]], "classicalshadowerror": [[23, "qurry.process.exceptions.ClassicalShadowError", false]], "classicalshadowestimation (class in qurry.process.classical_shadow.container)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation", false]], "classicalshadowmeanrho (class in qurry.process.classical_shadow.container)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowMeanRho", false]], "classicalshadowpurity (class in qurry.process.classical_shadow.container)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowPurity", false]], "classicalshadowpythonmethod (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.ClassicalShadowPythonMethod", false]], "classicalshadowwarning": [[23, "qurry.process.exceptions.ClassicalShadowWarning", false]], "clear_all_exps_result() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.clear_all_exps_result", false]], "clear_duplicates() (qurry.capsule.mori.gitsync.gitsynccontrol method)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl.clear_duplicates", false]], "clear_result() (qurry.qurrium.experiment.afterwards.after method)": [[57, "qurry.qurrium.experiment.afterwards.After.clear_result", false]], "closefd (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.closefd", false]], "cls (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.cls", false]], "cluster (class in qurry.recipe.simple.paramagnet)": [[83, "qurry.recipe.simple.paramagnet.Cluster", false]], "cmd_wrapper() (in module qurry.tools.command)": [[86, "qurry.tools.command.cmd_wrapper", false]], "comment() (qurry.capsule.mori.gitsync.gitsynccontrol method)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl.comment", false]], "commonparams (class in qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.Commonparams", false]], "commonparamsdict (class in qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.CommonparamsDict", false]], "commonparamsreadreturn (class in qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.CommonparamsReadReturn", false]], "commons (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.commons", false]], "commons (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.commons", false]], "commons_dealing() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.commons_dealing", false]], "compress() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.compress", false]], "configlisttype (in module qurry.declare.qurrium)": [[7, "qurry.declare.qurrium.ConfigListType", false]], "content (qurry.qurrium.analysis.analysis.analysisprototype attribute)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.content", false]], "content_instance (qurry.qurrium.analysis.analysis.analysisprototype property)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.content_instance", false]], "content_type() (qurry.qurrech.hadamard_test.analysis.echolistenhadamardanalysis class method)": [[34, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis.content_type", false]], "content_type() (qurry.qurrech.randomized_measure.analysis.echolistenrandomizedanalysis class method)": [[35, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis.content_type", false]], "content_type() (qurry.qurrech.randomized_measure_v1.analysis.echolistenrandomizedv1analysis class method)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis.content_type", false]], "content_type() (qurry.qurrent.classical_shadow.analysis.shadowunveilanalysis class method)": [[37, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis.content_type", false]], "content_type() (qurry.qurrent.hadamard_test.analysis.entropymeasurehadamardanalysis class method)": [[38, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis.content_type", false]], "content_type() (qurry.qurrent.randomized_measure.analysis.entropymeasurerandomizedanalysis class method)": [[39, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis.content_type", false]], "content_type() (qurry.qurrent.randomized_measure_v1.analysis.entropymeasurerandomizedv1analysis class method)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis.content_type", false]], "content_type() (qurry.qurries.magnet_square.analysis.magnetsquareanalysis class method)": [[41, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis.content_type", false]], "content_type() (qurry.qurries.magnet_square_z.analysis.zdirmagnetsquareanalysis class method)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis.content_type", false]], "content_type() (qurry.qurries.samplingqurry.analysis.qurryanalysis class method)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysis.content_type", false]], "content_type() (qurry.qurries.string_operator.analysis.stringoperatoranalysis class method)": [[45, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis.content_type", false]], "content_type() (qurry.qurries.wavesqurry.analysis.wavesexecuteranalysis class method)": [[47, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis.content_type", false]], "content_type() (qurry.qurrium.analysis.analysis.analysisprototype class method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.content_type", false]], "copy_circuit() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.copy_circuit", false]], "copy_circuit() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.copy_circuit", false]], "corresponding_rhos (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.corresponding_rhos", false]], "corresponding_rhos (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.corresponding_rhos", false]], "counts (qurry.qurrium.experiment.afterwards.after attribute)": [[57, "qurry.qurrium.experiment.afterwards.After.counts", false]], "counts_list_recount() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.counts_list_recount", false]], "counts_list_recount_pyrust() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.counts_list_recount_pyrust", false]], "counts_list_vectorize_pyrust() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.counts_list_vectorize_pyrust", false]], "counts_num (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.counts_num", false]], "counts_num (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.counts_num", false]], "counts_num (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.counts_num", false]], "counts_num (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.counts_num", false]], "counts_used (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.counts_used", false]], "counts_used (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedanalyzeargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedAnalyzeArgs.counts_used", false]], "counts_used (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.counts_used", false]], "counts_used (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1analyzeargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs.counts_used", false]], "counts_used (qurry.qurrent.classical_shadow.arguments.shadowunveilanalyzeargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilAnalyzeArgs.counts_used", false]], "counts_used (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.counts_used", false]], "counts_used (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedanalyzeargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedAnalyzeArgs.counts_used", false]], "counts_used (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.counts_used", false]], "counts_used (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1analyzeargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs.counts_used", false]], "countsnum (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.countsNum", false]], "countsnum (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.countsNum", false]], "countsnum (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.countsNum", false]], "countsnum (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.countsNum", false]], "cpu_count (in module qurry.tools.parallelmanager)": [[89, "qurry.tools.parallelmanager.CPU_COUNT", false]], "cpu_count_unsafe (in module qurry.tools.parallelmanager)": [[89, "qurry.tools.parallelmanager.CPU_COUNT_UNSAFE", false]], "create_afterwards() (in module qurry.qurrium.experiment.afterwards)": [[57, "qurry.qurrium.experiment.afterwards.create_afterwards", false]], "create_beforewards() (in module qurry.qurrium.experiment.beforewards)": [[60, "qurry.qurrium.experiment.beforewards.create_beforewards", false]], "create_config() (in module qurry.qurrech.randomized_measure.utils)": [[35, "qurry.qurrech.randomized_measure.utils.create_config", false]], "create_exp_args() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.create_exp_args", false]], "create_exp_commons() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.create_exp_commons", false]], "create_exp_outfields() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.create_exp_outfields", false]], "create_json_dump_args() (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.create_json_dump_args", false]], "create_open_args() (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.create_open_args", false]], "create_print_args() (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.create_print_args", false]], "create_save_location() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.create_save_location", false]], "current_time() (in module qurry.tools.datetime)": [[87, "qurry.tools.datetime.current_time", false]], "cycling_slice() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.cycling_slice", false]], "cycling_slice_rust() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.cycling_slice_rust", false]], "damerau_levenshtein_distance() (in module qurry.qurrium.utils.inputfixer)": [[77, "qurry.qurrium.utils.inputfixer.damerau_levenshtein_distance", false]], "damerau_levenshtein_distance_py() (in module qurry.qurrium.utils.inputfixer)": [[77, "qurry.qurrium.utils.inputfixer.damerau_levenshtein_distance_py", false]], "datetime (qurry.qurrium.analysis.analysis.analysisprototype attribute)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.datetime", false]], "datetimedict (class in qurry.tools.datetime)": [[87, "qurry.tools.datetime.DatetimeDict", false]], "datetimedict_process() (in module qurry.qurrium.multimanager.process)": [[70, "qurry.qurrium.multimanager.process.datetimedict_process", false]], "datetimes (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.datetimes", false]], "datetimes (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.datetimes", false]], "dead_beats_lurking_now() (in module qurry.capsule)": [[2, "qurry.capsule.dead_beats_lurking_now", false]], "decide_folder_and_filename() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.decide_folder_and_filename", false]], "decomposer() (in module qurry.qurrium.utils.construct)": [[75, "qurry.qurrium.utils.construct.decomposer", false]], "default (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.default", false]], "default_bar_format (in module qurry.tools.progressbar)": [[90, "qurry.tools.progressbar.DEFAULT_BAR_FORMAT", false]], "default_encoding (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_ENCODING", false]], "default_ensure_ascii (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_ENSURE_ASCII", false]], "default_indent (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_INDENT", false]], "default_json_dump_args (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_JSON_DUMP_ARGS", false]], "default_mode (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_MODE", false]], "default_open_args (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_OPEN_ARGS", false]], "default_pool_size (in module qurry.tools.parallelmanager)": [[89, "qurry.tools.parallelmanager.DEFAULT_POOL_SIZE", false]], "default_postprocessing_backend() (in module qurry.process.availability)": [[12, "qurry.process.availability.default_postprocessing_backend", false]], "default_print_args (in module qurry.capsule.utils)": [[6, "qurry.capsule.utils.DEFAULT_PRINT_ARGS", false]], "default_python_method (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.DEFAULT_PYTHON_METHOD", false]], "default_setup() (in module qurry.tools.progressbar)": [[90, "qurry.tools.progressbar.default_setup", false]], "default_value() (qurry.qurrium.experiment.afterwards.after static method)": [[57, "qurry.qurrium.experiment.afterwards.After.default_value", false]], "default_value() (qurry.qurrium.experiment.arguments.commonparams static method)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.default_value", false]], "default_value() (qurry.qurrium.experiment.beforewards.before static method)": [[60, "qurry.qurrium.experiment.beforewards.Before.default_value", false]], "default_value() (qurry.qurrium.multimanager.arguments.multicommonparams static method)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.default_value", false]], "degree (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.degree", false]], "degree (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.degree", false]], "degree (qurry.qurrech.hadamard_test.arguments.echolistenhadamardarguments attribute)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments.degree", false]], "degree (qurry.qurrech.hadamard_test.arguments.echolistenhadamardmeasureargs attribute)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardMeasureArgs.degree", false]], "degree (qurry.qurrech.hadamard_test.arguments.echolistenhadamardoutputargs attribute)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardOutputArgs.degree", false]], "degree (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysisinput attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput.degree", false]], "degree (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1analyzeargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs.degree", false]], "degree (qurry.qurrent.hadamard_test.arguments.entropymeasurehadamardarguments attribute)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments.degree", false]], "degree (qurry.qurrent.hadamard_test.arguments.entropymeasurehadamardmeasureargs attribute)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardMeasureArgs.degree", false]], "degree (qurry.qurrent.hadamard_test.arguments.entropymeasurehadamardoutputargs attribute)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardOutputArgs.degree", false]], "degree (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysisinput attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput.degree", false]], "degree (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1analyzeargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs.degree", false]], "degree_handler() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.degree_handler", false]], "degree_handler_rust() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.degree_handler_rust", false]], "density_matrix_to_bloch() (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.density_matrix_to_bloch", false]], "depolarizing_error_mitgation() (in module qurry.process.randomized_measure.entangled_entropy.error_mitigation)": [[26, "qurry.process.randomized_measure.entangled_entropy.error_mitigation.depolarizing_error_mitgation", false]], "deprecated_fields_converts() (qurry.qurrent.classical_shadow.analysis.shadowunveilanalysis class method)": [[37, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis.deprecated_fields_converts", false]], "deprecated_fields_converts() (qurry.qurrium.analysis.analysis.analysisprototype class method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.deprecated_fields_converts", false]], "dim_check() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.dim_check", false]], "divider() (in module qurry.capsule.hoshi.hoshi)": [[1, "qurry.capsule.hoshi.hoshi.divider", false]], "divider() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.divider", false]], "divider_fields (qurry.capsule.hoshi.hoshi.hoshi.configcontainer property)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.divider_fields", false]], "divider_length (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.divider_length", false]], "dummy (qurry.qurries.samplingqurry.analysis.qurryanalysiscontent attribute)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent.dummy", false]], "dummy (qurry.qurries.wavesqurry.analysis.weanalysiscontent attribute)": [[47, "qurry.qurries.wavesqurry.analysis.WEAnalysisContent.dummy", false]], "dyanmicwavecontainerbydict (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.DyanmicWaveContainerByDict", false]], "easy_repr_modify_wrapper() (in module qurry.capsule.hoshi.repr_modify)": [[1, "qurry.capsule.hoshi.repr_modify.easy_repr_modify_wrapper", false]], "easycompress() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.easycompress", false]], "easydecompress() (qurry.qurrium.multimanager.multimanager.multimanager class method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.easydecompress", false]], "echo (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.echo", false]], "echo (qurry.qurrech.hadamard_test.analysis.elhanalysiscontent attribute)": [[34, "qurry.qurrech.hadamard_test.analysis.ELHAnalysisContent.echo", false]], "echo (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.echo", false]], "echo (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.echo", false]], "echo_cell() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell", false]], "echo_cell_2() (in module qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2", false]], "echo_cell_2_py() (in module qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2_py", false]], "echo_cell_2_rust() (in module qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2_rust", false]], "echo_cell_py() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell_py", false]], "echo_cell_rust() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell_rust", false]], "echocells (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.echoCells", false]], "echocells (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.echoCells", false]], "echocells (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.echoCells", false]], "echolisten() (in module qurry.qurrech)": [[11, "qurry.qurrech.EchoListen", false]], "echolistenhadamard (class in qurry.qurrech.hadamard_test.qurry)": [[34, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard", false]], "echolistenhadamardanalysis (class in qurry.qurrech.hadamard_test.analysis)": [[34, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis", false]], "echolistenhadamardanalyzeargs (class in qurry.qurrech.hadamard_test.arguments)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardAnalyzeArgs", false]], "echolistenhadamardarguments (class in qurry.qurrech.hadamard_test.arguments)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments", false]], "echolistenhadamardexperiment (class in qurry.qurrech.hadamard_test.experiment)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", false]], "echolistenhadamardmeasureargs (class in qurry.qurrech.hadamard_test.arguments)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardMeasureArgs", false]], "echolistenhadamardoutputargs (class in qurry.qurrech.hadamard_test.arguments)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardOutputArgs", false]], "echolistenrandomized (class in qurry.qurrech.randomized_measure.qurry)": [[35, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized", false]], "echolistenrandomizedanalysis (class in qurry.qurrech.randomized_measure.analysis)": [[35, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis", false]], "echolistenrandomizedanalyzeargs (class in qurry.qurrech.randomized_measure.arguments)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedAnalyzeArgs", false]], "echolistenrandomizedarguments (class in qurry.qurrech.randomized_measure.arguments)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", false]], "echolistenrandomizedexperiment (class in qurry.qurrech.randomized_measure.experiment)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", false]], "echolistenrandomizedmeasureargs (class in qurry.qurrech.randomized_measure.arguments)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs", false]], "echolistenrandomizedoutputargs (class in qurry.qurrech.randomized_measure.arguments)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs", false]], "echolistenrandomizedv1 (class in qurry.qurrech.randomized_measure_v1.qurry)": [[36, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1", false]], "echolistenrandomizedv1analysis (class in qurry.qurrech.randomized_measure_v1.analysis)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis", false]], "echolistenrandomizedv1analyzeargs (class in qurry.qurrech.randomized_measure_v1.arguments)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs", false]], "echolistenrandomizedv1arguments (class in qurry.qurrech.randomized_measure_v1.arguments)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", false]], "echolistenrandomizedv1experiment (class in qurry.qurrech.randomized_measure_v1.experiment)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", false]], "echolistenrandomizedv1measureargs (class in qurry.qurrech.randomized_measure_v1.arguments)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs", false]], "echolistenrandomizedv1outputargs (class in qurry.qurrech.randomized_measure_v1.arguments)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1OutputArgs", false]], "echosd (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.echoSD", false]], "echosd (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.echoSD", false]], "echosd (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.echoSD", false]], "elhanalysiscontent (class in qurry.qurrech.hadamard_test.analysis)": [[34, "qurry.qurrech.hadamard_test.analysis.ELHAnalysisContent", false]], "elhanalysisinput (class in qurry.qurrech.hadamard_test.analysis)": [[34, "qurry.qurrech.hadamard_test.analysis.ELHAnalysisInput", false]], "elranalysiscontent (class in qurry.qurrech.randomized_measure.analysis)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", false]], "elranalysisinput (class in qurry.qurrech.randomized_measure.analysis)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", false]], "elrv1analysiscontent (class in qurry.qurrech.randomized_measure_v1.analysis)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", false]], "elrv1analysisinput (class in qurry.qurrech.randomized_measure_v1.analysis)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput", false]], "emhanalysiscontent (class in qurry.qurrent.hadamard_test.analysis)": [[38, "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent", false]], "emhanalysisinput (class in qurry.qurrent.hadamard_test.analysis)": [[38, "qurry.qurrent.hadamard_test.analysis.EMHAnalysisInput", false]], "emranalysiscontent (class in qurry.qurrent.randomized_measure.analysis)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", false]], "emranalysisinput (class in qurry.qurrent.randomized_measure.analysis)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", false]], "emrv1analysiscontent (class in qurry.qurrent.randomized_measure_v1.analysis)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", false]], "emrv1analysisinput (class in qurry.qurrent.randomized_measure_v1.analysis)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput", false]], "encoding (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.encoding", false]], "end (qurry.capsule.utils.printargs attribute)": [[6, "qurry.capsule.utils.PrintArgs.end", false]], "ensemble_cell() (in module qurry.process.utils.randomized)": [[33, "qurry.process.utils.randomized.ensemble_cell", false]], "ensemble_cell_rust() (in module qurry.process.utils.randomized)": [[33, "qurry.process.utils.randomized.ensemble_cell_rust", false]], "ensure_ascii (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.ensure_ascii", false]], "entangled_entropy_core() (in module qurry.process.randomized_measure.entangled_entropy_v1.entropy_core)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core.entangled_entropy_core", false]], "entangled_entropy_core_2() (in module qurry.process.randomized_measure.entangled_entropy.entropy_core_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.entropy_core_2.entangled_entropy_core_2", false]], "entangled_entropy_core_2_allrust() (in module qurry.process.randomized_measure.entangled_entropy.entropy_core_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.entropy_core_2.entangled_entropy_core_2_allrust", false]], "entangled_entropy_core_2_pyrust() (in module qurry.process.randomized_measure.entangled_entropy.entropy_core_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.entropy_core_2.entangled_entropy_core_2_pyrust", false]], "entangled_entropy_core_allrust() (in module qurry.process.randomized_measure.entangled_entropy_v1.entropy_core)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core.entangled_entropy_core_allrust", false]], "entangled_entropy_core_pycyrust() (in module qurry.process.randomized_measure.entangled_entropy_v1.entropy_core)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core.entangled_entropy_core_pycyrust", false]], "entangledentropyresult (class in qurry.process.randomized_measure.entangled_entropy.container)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult", false]], "entangledentropyresultmitigated (class in qurry.process.randomized_measure.entangled_entropy.container)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated", false]], "entropy (qurry.process.classical_shadow.container.classicalshadowpurity attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowPurity.entropy", false]], "entropy (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.entropy", false]], "entropy (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.entropy", false]], "entropy (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.entropy", false]], "entropy (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.entropy", false]], "entropy (qurry.qurrent.hadamard_test.analysis.emhanalysiscontent attribute)": [[38, "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent.entropy", false]], "entropy (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.entropy", false]], "entropy (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.entropy", false]], "entropyallsys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.entropyAllSys", false]], "entropyallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.entropyAllSys", false]], "entropyallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.entropyAllSys", false]], "entropyallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.entropyAllSys", false]], "entropyallsys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.entropyAllSys", false]], "entropyallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.entropyAllSys", false]], "entropymeasure() (in module qurry.qurrent)": [[11, "qurry.qurrent.EntropyMeasure", false]], "entropymeasurehadamard (class in qurry.qurrent.hadamard_test.qurry)": [[38, "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard", false]], "entropymeasurehadamardanalysis (class in qurry.qurrent.hadamard_test.analysis)": [[38, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis", false]], "entropymeasurehadamardanalyzeargs (class in qurry.qurrent.hadamard_test.arguments)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardAnalyzeArgs", false]], "entropymeasurehadamardarguments (class in qurry.qurrent.hadamard_test.arguments)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments", false]], "entropymeasurehadamardexperiment (class in qurry.qurrent.hadamard_test.experiment)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", false]], "entropymeasurehadamardmeasureargs (class in qurry.qurrent.hadamard_test.arguments)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardMeasureArgs", false]], "entropymeasurehadamardoutputargs (class in qurry.qurrent.hadamard_test.arguments)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardOutputArgs", false]], "entropymeasurerandomized (class in qurry.qurrent.randomized_measure.qurry)": [[39, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized", false]], "entropymeasurerandomizedanalysis (class in qurry.qurrent.randomized_measure.analysis)": [[39, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis", false]], "entropymeasurerandomizedanalyzeargs (class in qurry.qurrent.randomized_measure.arguments)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedAnalyzeArgs", false]], "entropymeasurerandomizedarguments (class in qurry.qurrent.randomized_measure.arguments)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", false]], "entropymeasurerandomizedexperiment (class in qurry.qurrent.randomized_measure.experiment)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", false]], "entropymeasurerandomizedmeasureargs (class in qurry.qurrent.randomized_measure.arguments)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs", false]], "entropymeasurerandomizedoutputargs (class in qurry.qurrent.randomized_measure.arguments)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs", false]], "entropymeasurerandomizedv1 (class in qurry.qurrent.randomized_measure_v1.qurry)": [[40, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1", false]], "entropymeasurerandomizedv1analysis (class in qurry.qurrent.randomized_measure_v1.analysis)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis", false]], "entropymeasurerandomizedv1analyzeargs (class in qurry.qurrent.randomized_measure_v1.arguments)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs", false]], "entropymeasurerandomizedv1arguments (class in qurry.qurrent.randomized_measure_v1.arguments)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", false]], "entropymeasurerandomizedv1experiment (class in qurry.qurrent.randomized_measure_v1.experiment)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", false]], "entropymeasurerandomizedv1measureargs (class in qurry.qurrent.randomized_measure_v1.arguments)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs", false]], "entropymeasurerandomizedv1outputargs (class in qurry.qurrent.randomized_measure_v1.arguments)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1OutputArgs", false]], "entropysd (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.entropySD", false]], "entropysd (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.entropySD", false]], "entropysd (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.entropySD", false]], "entropysd (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.entropySD", false]], "entropysd (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.entropySD", false]], "entropysdallsys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.entropySDAllSys", false]], "entropysdallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.entropySDAllSys", false]], "entropysdallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.entropySDAllSys", false]], "entropysdallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.entropySDAllSys", false]], "entropysdallsys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.entropySDAllSys", false]], "entropysdallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.entropySDAllSys", false]], "epsilon_upperbound (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.epsilon_upperbound", false]], "errorrate (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.errorRate", false]], "errorrate (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.errorRate", false]], "errorrate (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.errorRate", false]], "errorrate (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.errorRate", false]], "errors (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.errors", false]], "esitimation_of_given_operators() (in module qurry.process.classical_shadow.classical_shadow)": [[13, "qurry.process.classical_shadow.classical_shadow.esitimation_of_given_operators", false]], "estimate_of_given_operators (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.estimate_of_given_operators", false]], "estimate_of_given_operators (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.estimate_of_given_operators", false]], "existedallsysteminfo (class in qurry.process.randomized_measure.entangled_entropy.container)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", false]], "existedallsysteminfoinput (class in qurry.process.randomized_measure.entangled_entropy.container)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput", false]], "existingallsystemsource (class in qurry.process.randomized_measure.entangled_entropy_v1.container)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.ExistingAllSystemSource", false]], "exp_id (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.exp_id", false]], "exp_id (qurry.qurrium.experiment.experiment.experimentprototype property)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.exp_id", false]], "exp_id (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.exp_id", false]], "exp_id_process() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.exp_id_process", false]], "exp_name (qurry.qurrech.hadamard_test.arguments.echolistenhadamardarguments attribute)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments.exp_name", false]], "exp_name (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.exp_name", false]], "exp_name (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1arguments attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.exp_name", false]], "exp_name (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.exp_name", false]], "exp_name (qurry.qurrent.hadamard_test.arguments.entropymeasurehadamardarguments attribute)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments.exp_name", false]], "exp_name (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.exp_name", false]], "exp_name (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1arguments attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.exp_name", false]], "exp_name (qurry.qurries.magnet_square.arguments.magnetsquarearguments attribute)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments.exp_name", false]], "exp_name (qurry.qurries.magnet_square_z.arguments.zdirmagnetsquarearguments attribute)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments.exp_name", false]], "exp_name (qurry.qurries.string_operator.arguments.stringoperatorarguments attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments.exp_name", false]], "exp_name (qurry.qurrium.experiment.arguments.argumentsprototype attribute)": [[59, "qurry.qurrium.experiment.arguments.ArgumentsPrototype.exp_name", false]], "exp_name (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.exp_name", false]], "experiment_instance (qurry.qurrech.hadamard_test.qurry.echolistenhadamard property)": [[34, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.experiment_instance", false]], "experiment_instance (qurry.qurrech.randomized_measure.qurry.echolistenrandomized property)": [[35, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.experiment_instance", false]], "experiment_instance (qurry.qurrech.randomized_measure_v1.qurry.echolistenrandomizedv1 property)": [[36, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.experiment_instance", false]], "experiment_instance (qurry.qurrent.classical_shadow.qurry.shadowunveil property)": [[37, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.experiment_instance", false]], "experiment_instance (qurry.qurrent.hadamard_test.qurry.entropymeasurehadamard property)": [[38, "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard.experiment_instance", false]], "experiment_instance (qurry.qurrent.randomized_measure.qurry.entropymeasurerandomized property)": [[39, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.experiment_instance", false]], "experiment_instance (qurry.qurrent.randomized_measure_v1.qurry.entropymeasurerandomizedv1 property)": [[40, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.experiment_instance", false]], "experiment_instance (qurry.qurries.magnet_square.qurry.magnetsquare property)": [[41, "qurry.qurries.magnet_square.qurry.MagnetSquare.experiment_instance", false]], "experiment_instance (qurry.qurries.magnet_square_z.qurry.zdirmagnetsquare property)": [[42, "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare.experiment_instance", false]], "experiment_instance (qurry.qurries.samplingqurry.qurry.qurryv9 property)": [[44, "qurry.qurries.samplingqurry.qurry.QurryV9.experiment_instance", false]], "experiment_instance (qurry.qurries.string_operator.qurry.stringoperator property)": [[45, "qurry.qurries.string_operator.qurry.StringOperator.experiment_instance", false]], "experiment_instance (qurry.qurries.wavesqurry.qurry.wavesexecuter property)": [[47, "qurry.qurries.wavesqurry.qurry.WavesExecuter.experiment_instance", false]], "experiment_instance (qurry.qurrium.qurrium.qurriumprototype property)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.experiment_instance", false]], "experiment_writer() (in module qurry.qurrium.multimanager.utils)": [[71, "qurry.qurrium.multimanager.utils.experiment_writer", false]], "experimentcontainer (class in qurry.qurrium.container.experiments)": [[49, "qurry.qurrium.container.experiments.ExperimentContainer", false]], "experimentcontainerwrapper (class in qurry.qurrium.container.experiments_wrapper)": [[50, "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper", false]], "experimentprototype (class in qurry.qurrium.experiment.experiment)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype", false]], "export (class in qurry.qurrium.experiment.export)": [[62, "qurry.qurrium.experiment.export.Export", false]], "export() (qurry.capsule.mori.gitsync.gitsynccontrol method)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl.export", false]], "export() (qurry.capsule.mori.taglist.taglist method)": [[4, "qurry.capsule.mori.taglist.TagList.export", false]], "export() (qurry.qurrium.analysis.analysis.analysisprototype method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.export", false]], "export() (qurry.qurrium.experiment.afterwards.after method)": [[57, "qurry.qurrium.experiment.afterwards.After.export", false]], "export() (qurry.qurrium.experiment.analyses.analysescontainer method)": [[58, "qurry.qurrium.experiment.analyses.AnalysesContainer.export", false]], "export() (qurry.qurrium.experiment.arguments.commonparams method)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.export", false]], "export() (qurry.qurrium.experiment.beforewards.before method)": [[60, "qurry.qurrium.experiment.beforewards.Before.export", false]], "export() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.export", false]], "export_location (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.export_location", false]], "export_location (qurry.qurrium.utils.iocontrol.iocomplex attribute)": [[78, "qurry.qurrium.utils.iocontrol.IOComplex.export_location", false]], "exporting_name (in module qurry.qurrium.multimanager.beforewards)": [[67, "qurry.qurrium.multimanager.beforewards.EXPORTING_NAME", false]], "exps (qurry.qurrium.multimanager.multimanager.multimanager attribute)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.exps", false]], "exps (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.exps", false]], "exps_config (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.exps_config", false]], "expsname (qurry.qurrium.utils.iocontrol.iocomplex attribute)": [[78, "qurry.qurrium.utils.iocontrol.IOComplex.expsName", false]], "fack_backend_loader() (in module qurry.tools.backend.import_fake)": [[85, "qurry.tools.backend.import_fake.fack_backend_loader", false]], "fields_remapping (in module qurry.qurrent.classical_shadow.analysis)": [[37, "qurry.qurrent.classical_shadow.analysis.FIELDS_REMAPPING", false]], "filename (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.filename", false]], "files (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.files", false]], "files (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.files", false]], "filter_deprecated_args() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.filter_deprecated_args", false]], "flush (qurry.capsule.utils.printargs attribute)": [[6, "qurry.capsule.utils.PrintArgs.flush", false]], "folder_with_repeat_times() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.folder_with_repeat_times", false]], "fun_platform_check() (in module qurry.tools.command)": [[86, "qurry.tools.command.fun_platform_check", false]], "gate() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.gate", false]], "gate() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.gate", false]], "generalbackend (class in qurry.tools.backend.import_simulator)": [[85, "qurry.tools.backend.import_simulator.GeneralBackend", false]], "generalsimulator (class in qurry.tools.backend.import_simulator)": [[85, "qurry.tools.backend.import_simulator.GeneralSimulator", false]], "generate_random_unitary_seeds() (in module qurry.qurrium.utils.random_unitary)": [[80, "qurry.qurrium.utils.random_unitary.generate_random_unitary_seeds", false]], "generate_seeds_for_single_circ() (in module qurry.qurrium.utils.random_unitary)": [[80, "qurry.qurrium.utils.random_unitary.generate_seeds_for_single_circ", false]], "genericfloattype (in module qurry.process.randomized_measure.entangled_entropy.container)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.GenericFloatType", false]], "genericfloattype (in module qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.GenericFloatType", false]], "get_counts_and_exceptions() (in module qurry.qurrium.utils.construct)": [[75, "qurry.qurrium.utils.construct.get_counts_and_exceptions", false]], "get_default_fake_provider() (in module qurry.tools.backend.import_fake)": [[85, "qurry.tools.backend.import_fake.get_default_fake_provider", false]], "get_default_sim_source() (in module qurry.tools.backend.import_simulator)": [[85, "qurry.tools.backend.import_simulator.get_default_sim_source", false]], "get_wave() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.get_wave", false]], "get_wave() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.get_wave", false]], "ghz (class in qurry.recipe.simple.cat)": [[83, "qurry.recipe.simple.cat.GHZ", false]], "gitsynccontrol (class in qurry.capsule.mori.gitsync)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl", false]], "guh() (in module qurry.capsule)": [[2, "qurry.capsule.guh", false]], "guider() (qurry.capsule.mori.taglist.taglist method)": [[4, "qurry.capsule.mori.taglist.TagList.guider", false]], "h1() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.h1", false]], "h2() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.h2", false]], "h3() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.h3", false]], "h4() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.h4", false]], "h5() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.h5", false]], "h6() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.h6", false]], "hadamard_entangled_entropy() (in module qurry.process.hadamard_test.entangled_entropy)": [[24, "qurry.process.hadamard_test.entangled_entropy.hadamard_entangled_entropy", false]], "hadamard_overlap_echo() (in module qurry.process.hadamard_test.wavefunction_overlap)": [[24, "qurry.process.hadamard_test.wavefunction_overlap.hadamard_overlap_echo", false]], "hamming_distance() (in module qurry.process.utils.randomized)": [[33, "qurry.process.utils.randomized.hamming_distance", false]], "hamming_distance_rust() (in module qurry.process.utils.randomized)": [[33, "qurry.process.utils.randomized.hamming_distance_rust", false]], "has() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.has", false]], "has() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.has", false]], "has() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.has", false]], "hint_itemize (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.hint_itemize", false]], "hnprint() (in module qurry.capsule.hoshi.hoshi)": [[1, "qurry.capsule.hoshi.hoshi.hnprint", false]], "hoshi (class in qurry.capsule.hoshi.hoshi)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi", false]], "hoshi.configcontainer (class in qurry.capsule.hoshi.hoshi)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", false]], "i (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.i", false]], "i (qurry.qurries.string_operator.arguments.stringoperatorarguments attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments.i", false]], "i (qurry.qurries.string_operator.arguments.stringoperatormeasureargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs.i", false]], "i (qurry.qurries.string_operator.arguments.stringoperatoroutputargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorOutputArgs.i", false]], "i (qurry.qurries.string_operator.utils.stringoperatorlib attribute)": [[45, "qurry.qurries.string_operator.utils.StringOperatorLib.i", false]], "ibmproviderbackendrunargs (class in qurry.declare.run.ibm)": [[8, "qurry.declare.run.ibm.IBMProviderBackendRunArgs", false]], "ibmqbackendrunargs (class in qurry.declare.run.ibm)": [[8, "qurry.declare.run.ibm.IBMQBackendRunArgs", false]], "ibmruntimebackendrunargs (class in qurry.declare.run.ibm)": [[8, "qurry.declare.run.ibm.IBMRuntimeBackendRunArgs", false]], "id (qurry.qurrium.multimanager.multimanager.multimanager property)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.id", false]], "identity (in module qurry.process.classical_shadow.unitary_set)": [[22, "qurry.process.classical_shadow.unitary_set.IDENTITY", false]], "ignore() (qurry.capsule.mori.gitsync.gitsynccontrol method)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl.ignore", false]], "implementation_check() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.implementation_check", false]], "indent (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.indent", false]], "independent_all_system (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1analyzeargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs.independent_all_system", false]], "independent_all_system (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedanalyzeargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedAnalyzeArgs.independent_all_system", false]], "independent_all_system (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1analyzeargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs.independent_all_system", false]], "index_taglist (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.index_taglist", false]], "input (qurry.qurrium.analysis.analysis.analysisprototype attribute)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.input", false]], "input_instance (qurry.qurrium.analysis.analysis.analysisprototype property)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.input_instance", false]], "input_type() (qurry.qurrech.hadamard_test.analysis.echolistenhadamardanalysis class method)": [[34, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis.input_type", false]], "input_type() (qurry.qurrech.randomized_measure.analysis.echolistenrandomizedanalysis class method)": [[35, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis.input_type", false]], "input_type() (qurry.qurrech.randomized_measure_v1.analysis.echolistenrandomizedv1analysis class method)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis.input_type", false]], "input_type() (qurry.qurrent.classical_shadow.analysis.shadowunveilanalysis class method)": [[37, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis.input_type", false]], "input_type() (qurry.qurrent.hadamard_test.analysis.entropymeasurehadamardanalysis class method)": [[38, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis.input_type", false]], "input_type() (qurry.qurrent.randomized_measure.analysis.entropymeasurerandomizedanalysis class method)": [[39, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis.input_type", false]], "input_type() (qurry.qurrent.randomized_measure_v1.analysis.entropymeasurerandomizedv1analysis class method)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis.input_type", false]], "input_type() (qurry.qurries.magnet_square.analysis.magnetsquareanalysis class method)": [[41, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis.input_type", false]], "input_type() (qurry.qurries.magnet_square_z.analysis.zdirmagnetsquareanalysis class method)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis.input_type", false]], "input_type() (qurry.qurries.samplingqurry.analysis.qurryanalysis class method)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysis.input_type", false]], "input_type() (qurry.qurries.string_operator.analysis.stringoperatoranalysis class method)": [[45, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis.input_type", false]], "input_type() (qurry.qurries.wavesqurry.analysis.wavesexecuteranalysis class method)": [[47, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis.input_type", false]], "input_type() (qurry.qurrium.analysis.analysis.analysisprototype class method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.input_type", false]], "instruction() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.instruction", false]], "instruction() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.instruction", false]], "intracell (class in qurry.recipe.simple.intracell)": [[83, "qurry.recipe.simple.intracell.Intracell", false]], "inverted_quantum_channel() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.inverted_quantum_channel", false]], "iocomplex (class in qurry.qurrium.utils.iocontrol)": [[78, "qurry.qurrium.utils.iocontrol.IOComplex", false]], "is_auto_analysis (qurry.qurrium.experiment.experiment.experimentprototype property)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.is_auto_analysis", false]], "is_cycling_slice_active() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.is_cycling_slice_active", false]], "is_hold_by_multimanager (qurry.qurrium.experiment.experiment.experimentprototype property)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.is_hold_by_multimanager", false]], "itemize() (in module qurry.capsule.hoshi.hoshi)": [[1, "qurry.capsule.hoshi.hoshi.itemize", false]], "itemize() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.itemize", false]], "itemize_fields (qurry.capsule.hoshi.hoshi.hoshi.configcontainer property)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.itemize_fields", false]], "items() (qurry.qurrium.container.experiments_wrapper.experimentcontainerwrapper method)": [[50, "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper.items", false]], "items() (qurry.qurrium.container.multimanagers.multimanagercontainer method)": [[52, "qurry.qurrium.container.multimanagers.MultiManagerContainer.items", false]], "job_id (qurry.qurrium.experiment.beforewards.before attribute)": [[60, "qurry.qurrium.experiment.beforewards.Before.job_id", false]], "job_id (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.job_id", false]], "job_taglist (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.job_taglist", false]], "jobstype (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.jobstype", false]], "json_dump_args (qurry.capsule.mori.taglist.taglist.paramscontrol attribute)": [[4, "qurry.capsule.mori.taglist.TagList.ParamsControl.json_dump_args", false]], "jsondumpargs (class in qurry.capsule.utils)": [[6, "qurry.capsule.utils.JSONDumpArgs", false]], "k (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.k", false]], "k (qurry.qurries.string_operator.arguments.stringoperatorarguments attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments.k", false]], "k (qurry.qurries.string_operator.arguments.stringoperatormeasureargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs.k", false]], "k (qurry.qurries.string_operator.arguments.stringoperatoroutputargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorOutputArgs.k", false]], "key_parse() (in module qurry.capsule.jsonablize)": [[3, "qurry.capsule.jsonablize.key_parse", false]], "key_tuple_loads() (in module qurry.capsule.mori.taglist)": [[4, "qurry.capsule.mori.taglist.key_tuple_loads", false]], "known_core_package (in module qurry.tools.qiskit_version)": [[91, "qurry.tools.qiskit_version.KNOWN_CORE_PACKAGE", false]], "largest_shadow_norm_squared_upperbound() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.largest_shadow_norm_squared_upperbound", false]], "last_events() (qurry.tools.datetime.datetimedict method)": [[87, "qurry.tools.datetime.DatetimeDict.last_events", false]], "legacy (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.legacy", false]], "length (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.length", false]], "lines (qurry.capsule.hoshi.hoshi.hoshi property)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.lines", false]], "listing_itemize (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.listing_itemize", false]], "listing_level (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.listing_level", false]], "ljust_description_filler (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.ljust_description_filler", false]], "ljust_description_len (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.ljust_description_len", false]], "ljust_value_filler (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.ljust_value_filler", false]], "ljust_value_len (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.ljust_value_len", false]], "ljust_value_max_len (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.ljust_value_max_len", false]], "load() (qurry.capsule.mori.gitsync.gitsynccontrol method)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl.load", false]], "load() (qurry.qurrium.analysis.analysis.analysisprototype class method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.load", false]], "loads() (qurry.tools.datetime.datetimedict method)": [[87, "qurry.tools.datetime.DatetimeDict.loads", false]], "local_random_unitary_operators() (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.local_random_unitary_operators", false]], "local_random_unitary_pauli_coeff() (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.local_random_unitary_pauli_coeff", false]], "local_unitary_op_to_list() (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.local_unitary_op_to_list", false]], "local_unitary_op_to_pauli_coeff() (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.local_unitary_op_to_pauli_coeff", false]], "log (qurry.qurrium.analysis.analysis.analysisprototype attribute)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.log", false]], "lucky_msg (in module qurry.tools.backend.import_fake)": [[85, "qurry.tools.backend.import_fake.LUCKY_MSG", false]], "magnet_square (qurry.process.magnet_square.magnet_square.magnetsquare attribute)": [[25, "qurry.process.magnet_square.magnet_square.MagnetSquare.magnet_square", false]], "magnet_square (qurry.qurries.magnet_square.analysis.msanalysiscontent attribute)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent.magnet_square", false]], "magnet_square (qurry.qurries.magnet_square_z.analysis.zdirmsanalysiscontent attribute)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent.magnet_square", false]], "magnet_square() (in module qurry.process.magnet_square.magnet_square)": [[25, "qurry.process.magnet_square.magnet_square.magnet_square", false]], "magnet_square_cells (qurry.process.magnet_square.magnet_square.magnetsquare attribute)": [[25, "qurry.process.magnet_square.magnet_square.MagnetSquare.magnet_square_cells", false]], "magnet_square_cells (qurry.qurries.magnet_square.analysis.msanalysiscontent attribute)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent.magnet_square_cells", false]], "magnet_square_cells (qurry.qurries.magnet_square_z.analysis.zdirmsanalysiscontent attribute)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent.magnet_square_cells", false]], "magnetic_square_core() (in module qurry.process.magnet_square.magsq_core)": [[25, "qurry.process.magnet_square.magsq_core.magnetic_square_core", false]], "magnetsquare (class in qurry.process.magnet_square.magnet_square)": [[25, "qurry.process.magnet_square.magnet_square.MagnetSquare", false]], "magnetsquare (class in qurry.qurries.magnet_square.qurry)": [[41, "qurry.qurries.magnet_square.qurry.MagnetSquare", false]], "magnetsquareanalysis (class in qurry.qurries.magnet_square.analysis)": [[41, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis", false]], "magnetsquareanalyzeargs (class in qurry.qurries.magnet_square.arguments)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareAnalyzeArgs", false]], "magnetsquarearguments (class in qurry.qurries.magnet_square.arguments)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments", false]], "magnetsquareexperiment (class in qurry.qurries.magnet_square.experiment)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", false]], "magnetsquaremeasureargs (class in qurry.qurries.magnet_square.arguments)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareMeasureArgs", false]], "magnetsquareoutputargs (class in qurry.qurries.magnet_square.arguments)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareOutputArgs", false]], "magsq_cell_py() (in module qurry.process.magnet_square.magsq_core)": [[25, "qurry.process.magnet_square.magsq_core.magsq_cell_py", false]], "magsq_cell_py_deprecated() (in module qurry.process.magnet_square.magsq_core)": [[25, "qurry.process.magnet_square.magsq_core.magsq_cell_py_deprecated", false]], "magsq_cell_wrapper() (in module qurry.process.magnet_square.magsq_core)": [[25, "qurry.process.magnet_square.magsq_core.magsq_cell_wrapper", false]], "make_callsign() (qurry.tools.backend.backend_manager.backendwrapper method)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.make_callsign", false]], "make_dummy_case() (in module qurry.process.utils.dummy)": [[33, "qurry.process.utils.dummy.make_dummy_case", false]], "make_statesheet() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.make_statesheet", false]], "make_two_bit_str() (in module qurry.process.utils.dummy)": [[33, "qurry.process.utils.dummy.make_two_bit_str", false]], "make_two_bit_str_32_py() (in module qurry.process.utils.dummy)": [[33, "qurry.process.utils.dummy.make_two_bit_str_32_py", false]], "make_two_bit_str_unlimit() (in module qurry.process.utils.dummy)": [[33, "qurry.process.utils.dummy.make_two_bit_str_unlimit", false]], "maketwobitstroneliner() (in module qurry.process.utils.dummy)": [[33, "qurry.process.utils.dummy.makeTwoBitStrOneLiner", false]], "manager_run_args (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.manager_run_args", false]], "map() (qurry.tools.parallelmanager.parallelmanager method)": [[89, "qurry.tools.parallelmanager.ParallelManager.map", false]], "max_value_len (qurry.capsule.hoshi.hoshi.hoshi.configcontainer attribute)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.max_value_len", false]], "maximum_shadow_norm (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.maximum_shadow_norm", false]], "maximum_shadow_norm (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.maximum_shadow_norm", false]], "mean_of_rho (qurry.process.classical_shadow.container.classicalshadowmeanrho attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowMeanRho.mean_of_rho", false]], "mean_of_rho (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.mean_of_rho", false]], "mean_of_rho() (in module qurry.process.classical_shadow.classical_shadow)": [[13, "qurry.process.classical_shadow.classical_shadow.mean_of_rho", false]], "mean_rho_core() (in module qurry.process.classical_shadow.trace_expect_process)": [[21, "qurry.process.classical_shadow.trace_expect_process.mean_rho_core", false]], "measure (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.measure", false]], "measure (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1arguments attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.measure", false]], "measure (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1measureargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs.measure", false]], "measure (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1outputargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1OutputArgs.measure", false]], "measure (qurry.qurrent.classical_shadow.arguments.shadowunveilmeasureargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs.measure", false]], "measure (qurry.qurrent.classical_shadow.arguments.shadowunveiloutputargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs.measure", false]], "measure (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedmeasureargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs.measure", false]], "measure (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedoutputargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs.measure", false]], "measure (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.measure", false]], "measure (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1arguments attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.measure", false]], "measure (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1measureargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs.measure", false]], "measure (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1outputargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1OutputArgs.measure", false]], "measure() (qurry.qurrech.hadamard_test.qurry.echolistenhadamard method)": [[34, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", false]], "measure() (qurry.qurrech.randomized_measure.qurry.echolistenrandomized method)": [[35, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.measure", false]], "measure() (qurry.qurrech.randomized_measure_v1.qurry.echolistenrandomizedv1 method)": [[36, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.measure", false]], "measure() (qurry.qurrent.classical_shadow.qurry.shadowunveil method)": [[37, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.measure", false]], "measure() (qurry.qurrent.hadamard_test.qurry.entropymeasurehadamard method)": [[38, "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard.measure", false]], "measure() (qurry.qurrent.randomized_measure.qurry.entropymeasurerandomized method)": [[39, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.measure", false]], "measure() (qurry.qurrent.randomized_measure_v1.qurry.entropymeasurerandomizedv1 method)": [[40, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.measure", false]], "measure() (qurry.qurries.magnet_square.qurry.magnetsquare method)": [[41, "qurry.qurries.magnet_square.qurry.MagnetSquare.measure", false]], "measure() (qurry.qurries.magnet_square_z.qurry.zdirmagnetsquare method)": [[42, "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare.measure", false]], "measure() (qurry.qurries.samplingqurry.qurry.qurryv9 method)": [[44, "qurry.qurries.samplingqurry.qurry.QurryV9.measure", false]], "measure() (qurry.qurries.string_operator.qurry.stringoperator method)": [[45, "qurry.qurries.string_operator.qurry.StringOperator.measure", false]], "measure() (qurry.qurries.wavesqurry.qurry.wavesexecuter method)": [[47, "qurry.qurries.wavesqurry.qurry.WavesExecuter.measure", false]], "measure() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.measure", false]], "measure_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.measure_1", false]], "measure_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.measure_1", false]], "measure_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.measure_2", false]], "measure_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.measure_2", false]], "measure_to_output() (qurry.qurrech.hadamard_test.qurry.echolistenhadamard method)": [[34, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure_to_output", false]], "measure_to_output() (qurry.qurrech.randomized_measure.qurry.echolistenrandomized method)": [[35, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.measure_to_output", false]], "measure_to_output() (qurry.qurrech.randomized_measure_v1.qurry.echolistenrandomizedv1 method)": [[36, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.measure_to_output", false]], "measure_to_output() (qurry.qurrent.classical_shadow.qurry.shadowunveil method)": [[37, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.measure_to_output", false]], "measure_to_output() (qurry.qurrent.hadamard_test.qurry.entropymeasurehadamard method)": [[38, "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard.measure_to_output", false]], "measure_to_output() (qurry.qurrent.randomized_measure.qurry.entropymeasurerandomized method)": [[39, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.measure_to_output", false]], "measure_to_output() (qurry.qurrent.randomized_measure_v1.qurry.entropymeasurerandomizedv1 method)": [[40, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.measure_to_output", false]], "measure_to_output() (qurry.qurries.magnet_square.qurry.magnetsquare method)": [[41, "qurry.qurries.magnet_square.qurry.MagnetSquare.measure_to_output", false]], "measure_to_output() (qurry.qurries.magnet_square_z.qurry.zdirmagnetsquare method)": [[42, "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare.measure_to_output", false]], "measure_to_output() (qurry.qurries.samplingqurry.qurry.qurryv9 method)": [[44, "qurry.qurries.samplingqurry.qurry.QurryV9.measure_to_output", false]], "measure_to_output() (qurry.qurries.string_operator.qurry.stringoperator method)": [[45, "qurry.qurries.string_operator.qurry.StringOperator.measure_to_output", false]], "measure_to_output() (qurry.qurries.wavesqurry.qurry.wavesexecuter method)": [[47, "qurry.qurries.wavesqurry.qurry.WavesExecuter.measure_to_output", false]], "measure_to_output() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.measure_to_output", false]], "measureactually (qurry.process.randomized_measure.entangled_entropy_v1.container.existingallsystemsource attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.ExistingAllSystemSource.measureActually", false]], "measureactually (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.measureActually", false]], "measureactually (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.measureActually", false]], "measureactually (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.measureActually", false]], "measureactually (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.measureActually", false]], "measureactuallyallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.measureActuallyAllSys", false]], "measureactuallyallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.measureActuallyAllSys", false]], "memory_usage_factor (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.memory_usage_factor", false]], "memory_usage_factor_expect() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.memory_usage_factor_expect", false]], "method() (qurry.qurrech.hadamard_test.experiment.echolistenhadamardexperiment class method)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.method", false]], "method() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment class method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.method", false]], "method() (qurry.qurrech.randomized_measure_v1.experiment.echolistenrandomizedv1experiment class method)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.method", false]], "method() (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment class method)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.method", false]], "method() (qurry.qurrent.hadamard_test.experiment.entropymeasurehadamardexperiment class method)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.method", false]], "method() (qurry.qurrent.randomized_measure.experiment.entropymeasurerandomizedexperiment class method)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.method", false]], "method() (qurry.qurrent.randomized_measure_v1.experiment.entropymeasurerandomizedv1experiment class method)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.method", false]], "method() (qurry.qurries.magnet_square.experiment.magnetsquareexperiment class method)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.method", false]], "method() (qurry.qurries.magnet_square_z.experiment.zdirmagnetsquareexperiment class method)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.method", false]], "method() (qurry.qurries.samplingqurry.experiment.qurryexperiment class method)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment.method", false]], "method() (qurry.qurries.string_operator.experiment.stringoperatorexperiment class method)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment.method", false]], "method() (qurry.qurries.wavesqurry.experiment.wavesexecuterexperiment class method)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.method", false]], "method() (qurry.qurrium.experiment.experiment.experimentprototype class method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.method", false]], "mitigatedentropy (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.mitigatedEntropy", false]], "mitigatedentropy (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.mitigatedEntropy", false]], "mitigatedentropy (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.mitigatedEntropy", false]], "mitigatedentropy (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.mitigatedEntropy", false]], "mitigatedpurity (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.mitigatedPurity", false]], "mitigatedpurity (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.mitigatedPurity", false]], "mitigatedpurity (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.mitigatedPurity", false]], "mitigatedpurity (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.mitigatedPurity", false]], "mitigation_equation() (in module qurry.process.randomized_measure.entangled_entropy.error_mitigation)": [[26, "qurry.process.randomized_measure.entangled_entropy.error_mitigation.mitigation_equation", false]], "mode (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.mode", false]], "module": [[0, "module-qurry.capsule.exception", false], [1, "module-qurry.capsule.hoshi", false], [1, "module-qurry.capsule.hoshi.hoshi", false], [1, "module-qurry.capsule.hoshi.repr_modify", false], [2, "module-qurry.capsule", false], [3, "module-qurry.capsule.jsonablize", false], [4, "module-qurry.capsule.mori", false], [4, "module-qurry.capsule.mori.gitsync", false], [4, "module-qurry.capsule.mori.taglist", false], [5, "module-qurry.capsule.quick", false], [6, "module-qurry.capsule.utils", false], [7, "module-qurry.declare.qurrium", false], [8, "module-qurry.declare.run", false], [8, "module-qurry.declare.run.base_run", false], [8, "module-qurry.declare.run.ibm", false], [8, "module-qurry.declare.run.simulator", false], [9, "module-qurry.declare.transpile", false], [10, "module-qurry.exceptions", false], [11, "module-qurry.declare", false], [11, "module-qurry.process", false], [11, "module-qurry.qurrech", false], [11, "module-qurry.qurrent", false], [11, "module-qurry.qurries", false], [11, "module-qurry.qurrium", false], [11, "module-qurry.recipe", false], [11, "module-qurry.tools", false], [12, "module-qurry.process.availability", false], [13, "module-qurry.process.classical_shadow.classical_shadow", false], [14, "module-qurry.process.classical_shadow.container", false], [15, "module-qurry.process.classical_shadow.expectation_process", false], [16, "module-qurry.process.classical_shadow", false], [17, "module-qurry.process.classical_shadow.matrix_calcution", false], [18, "module-qurry.process.classical_shadow.rho_m_core", false], [19, "module-qurry.process.classical_shadow.rho_m_flatten", false], [20, "module-qurry.process.classical_shadow.rho_mk_cell", false], [21, "module-qurry.process.classical_shadow.trace_expect_process", false], [22, "module-qurry.process.classical_shadow.unitary_set", false], [23, "module-qurry.process.exceptions", false], [24, "module-qurry.process.hadamard_test.entangled_entropy", false], [24, "module-qurry.process.hadamard_test.purity_echo_core", false], [24, "module-qurry.process.hadamard_test.wavefunction_overlap", false], [25, "module-qurry.process.magnet_square.magnet_square", false], [25, "module-qurry.process.magnet_square.magsq_core", false], [26, "module-qurry.process.randomized_measure.entangled_entropy", false], [26, "module-qurry.process.randomized_measure.entangled_entropy.container", false], [26, "module-qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2", false], [26, "module-qurry.process.randomized_measure.entangled_entropy.entropy_core_2", false], [26, "module-qurry.process.randomized_measure.entangled_entropy.error_mitigation", false], [26, "module-qurry.process.randomized_measure.entangled_entropy.purity_cell_2", false], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1", false], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1.container", false], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy", false], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1.entropy_core", false], [27, "module-qurry.process.randomized_measure.entangled_entropy_v1.purity_cell", false], [28, "module-qurry.process.randomized_measure", false], [29, "module-qurry.process.randomized_measure.wavefunction_overlap", false], [29, "module-qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2", false], [29, "module-qurry.process.randomized_measure.wavefunction_overlap.echo_core_2", false], [29, "module-qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2", false], [30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1", false], [30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell", false], [30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core", false], [30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap", false], [31, "module-qurry.process.status.backend", false], [32, "module-qurry.process.string_operator.string_operator", false], [32, "module-qurry.process.string_operator.strop_core", false], [33, "module-qurry.process.utils.bit_slice", false], [33, "module-qurry.process.utils.counts_process", false], [33, "module-qurry.process.utils.dummy", false], [33, "module-qurry.process.utils.other", false], [33, "module-qurry.process.utils.randomized", false], [33, "module-qurry.process.utils.test", false], [34, "module-qurry.qurrech.hadamard_test", false], [34, "module-qurry.qurrech.hadamard_test.analysis", false], [34, "module-qurry.qurrech.hadamard_test.arguments", false], [34, "module-qurry.qurrech.hadamard_test.experiment", false], [34, "module-qurry.qurrech.hadamard_test.qurry", false], [35, "module-qurry.qurrech.randomized_measure", false], [35, "module-qurry.qurrech.randomized_measure.analysis", false], [35, "module-qurry.qurrech.randomized_measure.arguments", false], [35, "module-qurry.qurrech.randomized_measure.experiment", false], [35, "module-qurry.qurrech.randomized_measure.qurry", false], [35, "module-qurry.qurrech.randomized_measure.utils", false], [36, "module-qurry.qurrech.randomized_measure_v1", false], [36, "module-qurry.qurrech.randomized_measure_v1.analysis", false], [36, "module-qurry.qurrech.randomized_measure_v1.arguments", false], [36, "module-qurry.qurrech.randomized_measure_v1.experiment", false], [36, "module-qurry.qurrech.randomized_measure_v1.qurry", false], [37, "module-qurry.qurrent.classical_shadow", false], [37, "module-qurry.qurrent.classical_shadow.analysis", false], [37, "module-qurry.qurrent.classical_shadow.arguments", false], [37, "module-qurry.qurrent.classical_shadow.experiment", false], [37, "module-qurry.qurrent.classical_shadow.qurry", false], [37, "module-qurry.qurrent.classical_shadow.utils", false], [38, "module-qurry.qurrent.hadamard_test", false], [38, "module-qurry.qurrent.hadamard_test.analysis", false], [38, "module-qurry.qurrent.hadamard_test.arguments", false], [38, "module-qurry.qurrent.hadamard_test.experiment", false], [38, "module-qurry.qurrent.hadamard_test.qurry", false], [39, "module-qurry.qurrent.randomized_measure", false], [39, "module-qurry.qurrent.randomized_measure.analysis", false], [39, "module-qurry.qurrent.randomized_measure.arguments", false], [39, "module-qurry.qurrent.randomized_measure.experiment", false], [39, "module-qurry.qurrent.randomized_measure.qurry", false], [39, "module-qurry.qurrent.randomized_measure.utils", false], [40, "module-qurry.qurrent.randomized_measure_v1", false], [40, "module-qurry.qurrent.randomized_measure_v1.analysis", false], [40, "module-qurry.qurrent.randomized_measure_v1.arguments", false], [40, "module-qurry.qurrent.randomized_measure_v1.experiment", false], [40, "module-qurry.qurrent.randomized_measure_v1.qurry", false], [40, "module-qurry.qurrent.randomized_measure_v1.utils", false], [41, "module-qurry.qurries.magnet_square", false], [41, "module-qurry.qurries.magnet_square.analysis", false], [41, "module-qurry.qurries.magnet_square.arguments", false], [41, "module-qurry.qurries.magnet_square.experiment", false], [41, "module-qurry.qurries.magnet_square.qurry", false], [41, "module-qurry.qurries.magnet_square.utils", false], [42, "module-qurry.qurries.magnet_square_z", false], [42, "module-qurry.qurries.magnet_square_z.analysis", false], [42, "module-qurry.qurries.magnet_square_z.arguments", false], [42, "module-qurry.qurries.magnet_square_z.experiment", false], [42, "module-qurry.qurries.magnet_square_z.qurry", false], [42, "module-qurry.qurries.magnet_square_z.utils", false], [43, "module-qurry.qurries.position_distribution", false], [44, "module-qurry.qurries.samplingqurry", false], [44, "module-qurry.qurries.samplingqurry.analysis", false], [44, "module-qurry.qurries.samplingqurry.arguments", false], [44, "module-qurry.qurries.samplingqurry.experiment", false], [44, "module-qurry.qurries.samplingqurry.qurry", false], [45, "module-qurry.qurries.string_operator", false], [45, "module-qurry.qurries.string_operator.analysis", false], [45, "module-qurry.qurries.string_operator.arguments", false], [45, "module-qurry.qurries.string_operator.experiment", false], [45, "module-qurry.qurries.string_operator.qurry", false], [45, "module-qurry.qurries.string_operator.utils", false], [46, "module-qurry.qurries.twisted_operator", false], [47, "module-qurry.qurries.wavesqurry", false], [47, "module-qurry.qurries.wavesqurry.analysis", false], [47, "module-qurry.qurries.wavesqurry.arguments", false], [47, "module-qurry.qurries.wavesqurry.experiment", false], [47, "module-qurry.qurries.wavesqurry.qurry", false], [48, "module-qurry.qurrium.analysis", false], [48, "module-qurry.qurrium.analysis.analysis", false], [49, "module-qurry.qurrium.container.experiments", false], [50, "module-qurry.qurrium.container.experiments_wrapper", false], [51, "module-qurry.qurrium.container", false], [52, "module-qurry.qurrium.container.multimanagers", false], [53, "module-qurry.qurrium.container.multiquantity", false], [54, "module-qurry.qurrium.container.passmanagers", false], [55, "module-qurry.qurrium.container.waves_dynamic", false], [56, "module-qurry.qurrium.container.waves_static", false], [57, "module-qurry.qurrium.experiment.afterwards", false], [58, "module-qurry.qurrium.experiment.analyses", false], [59, "module-qurry.qurrium.experiment.arguments", false], [60, "module-qurry.qurrium.experiment.beforewards", false], [61, "module-qurry.qurrium.experiment.experiment", false], [62, "module-qurry.qurrium.experiment.export", false], [63, "module-qurry.qurrium.experiment", false], [64, "module-qurry.qurrium.experiment.utils", false], [65, "module-qurry.qurrium.multimanager.afterwards", false], [66, "module-qurry.qurrium.multimanager.arguments", false], [67, "module-qurry.qurrium.multimanager.beforewards", false], [68, "module-qurry.qurrium.multimanager", false], [69, "module-qurry.qurrium.multimanager.multimanager", false], [70, "module-qurry.qurrium.multimanager.process", false], [71, "module-qurry.qurrium.multimanager.utils", false], [72, "module-qurry.qurrium.qurrium", false], [73, "module-qurry.qurrium.utils.build", false], [74, "module-qurry.qurrium.utils.chunk", false], [75, "module-qurry.qurrium.utils.construct", false], [76, "module-qurry.qurrium.utils", false], [77, "module-qurry.qurrium.utils.inputfixer", false], [78, "module-qurry.qurrium.utils.iocontrol", false], [79, "module-qurry.qurrium.utils.qasm", false], [80, "module-qurry.qurrium.utils.random_unitary", false], [81, "module-qurry.qurrium.utils.randomized", false], [82, "module-qurry.recipe.n_body", false], [83, "module-qurry.recipe.simple", false], [83, "module-qurry.recipe.simple.cat", false], [83, "module-qurry.recipe.simple.intracell", false], [83, "module-qurry.recipe.simple.paramagnet", false], [85, "module-qurry.tools.backend", false], [85, "module-qurry.tools.backend.backend_manager", false], [85, "module-qurry.tools.backend.env_check", false], [85, "module-qurry.tools.backend.import_fake", false], [85, "module-qurry.tools.backend.import_simulator", false], [85, "module-qurry.tools.backend.utils", false], [86, "module-qurry.tools.command", false], [87, "module-qurry.tools.datetime", false], [88, "module-qurry.tools.except_decorator", false], [89, "module-qurry.tools.parallelmanager", false], [90, "module-qurry.tools.progressbar", false], [91, "module-qurry.tools.qiskit_version", false]], "msanalysiscontent (class in qurry.qurries.magnet_square.analysis)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", false]], "msanalysisinput (class in qurry.qurries.magnet_square.analysis)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisInput", false]], "msg_full_cover (in module qurry.qurrech.randomized_measure.utils)": [[35, "qurry.qurrech.randomized_measure.utils.MSG_FULL_COVER", false]], "multianalysis() (qurry.qurrech.randomized_measure.qurry.echolistenrandomized method)": [[35, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.multiAnalysis", false]], "multianalysis() (qurry.qurrech.randomized_measure_v1.qurry.echolistenrandomizedv1 method)": [[36, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.multiAnalysis", false]], "multianalysis() (qurry.qurrent.classical_shadow.qurry.shadowunveil method)": [[37, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.multiAnalysis", false]], "multianalysis() (qurry.qurrent.randomized_measure.qurry.entropymeasurerandomized method)": [[39, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.multiAnalysis", false]], "multianalysis() (qurry.qurrent.randomized_measure_v1.qurry.entropymeasurerandomizedv1 method)": [[40, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.multiAnalysis", false]], "multianalysis() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiAnalysis", false]], "multibuild() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiBuild", false]], "multicommonparams (class in qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams", false]], "multicommonparamsdict (class in qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparamsDict", false]], "multicommonparamsrawddict (class in qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparamsRawdDict", false]], "multimanager (class in qurry.qurrium.multimanager.multimanager)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager", false]], "multimanager_report_naming() (in module qurry.qurrium.multimanager.utils)": [[71, "qurry.qurrium.multimanager.utils.multimanager_report_naming", false]], "multimanagercontainer (class in qurry.qurrium.container.multimanagers)": [[52, "qurry.qurrium.container.multimanagers.MultiManagerContainer", false]], "multimanagers (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multimanagers", false]], "multioutput() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiOutput", false]], "multipending() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiPending", false]], "multiprocess_exporter() (in module qurry.qurrium.multimanager.process)": [[70, "qurry.qurrium.multimanager.process.multiprocess_exporter", false]], "multiprocess_exporter_wrapper() (in module qurry.qurrium.multimanager.process)": [[70, "qurry.qurrium.multimanager.process.multiprocess_exporter_wrapper", false]], "multiprocess_writer() (in module qurry.qurrium.multimanager.process)": [[70, "qurry.qurrium.multimanager.process.multiprocess_writer", false]], "multiprocess_writer_wrapper() (in module qurry.qurrium.multimanager.process)": [[70, "qurry.qurrium.multimanager.process.multiprocess_writer_wrapper", false]], "multiread() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiRead", false]], "multiretrieve() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiRetrieve", false]], "multiwrite() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.multiWrite", false]], "mute_auto_lock (qurry.qurrium.multimanager.multimanager.multimanager attribute)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.mute_auto_lock", false]], "name (qurry.qurrium.multimanager.multimanager.multimanager property)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.name", false]], "naming() (in module qurry.qurrium.utils.iocontrol)": [[78, "qurry.qurrium.utils.iocontrol.naming", false]], "new_fields_defaults (in module qurry.qurrent.classical_shadow.analysis)": [[37, "qurry.qurrent.classical_shadow.analysis.NEW_FIELDS_DEFAULTS", false]], "newline (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.newline", false]], "newline() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.newline", false]], "nsg_overlapping_size (in module qurry.qurrech.randomized_measure.utils)": [[35, "qurry.qurrech.randomized_measure.utils.NSG_OVERLAPPING_SIZE", false]], "num_classical_registers (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.num_classical_registers", false]], "num_classical_registers (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.num_classical_registers", false]], "num_classical_registers (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.num_classical_registers", false]], "num_classical_registers (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.num_classical_registers", false]], "num_classical_registers_all_sys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.num_classical_registers_all_sys", false]], "num_classical_registers_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.num_classical_registers_all_sys", false]], "num_classical_registers_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.num_classical_registers_all_sys", false]], "num_classical_registers_all_sys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.num_classical_registers_all_sys", false]], "num_of_esitmator_calc() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.num_of_esitmator_calc", false]], "num_of_estimators_k (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.num_of_estimators_k", false]], "num_of_estimators_k (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.num_of_estimators_k", false]], "num_qubits (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.num_qubits", false]], "num_qubits (qurry.qurrent.classical_shadow.analysis.suanalysisinput attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.num_qubits", false]], "num_qubits (qurry.qurrent.randomized_measure.analysis.emranalysisinput attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.num_qubits", false]], "num_qubits (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.num_qubits", false]], "num_qubits (qurry.qurries.magnet_square.analysis.msanalysiscontent attribute)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent.num_qubits", false]], "num_qubits (qurry.qurries.magnet_square.arguments.magnetsquarearguments attribute)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments.num_qubits", false]], "num_qubits (qurry.qurries.magnet_square_z.analysis.zdirmsanalysiscontent attribute)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent.num_qubits", false]], "num_qubits (qurry.qurries.magnet_square_z.arguments.zdirmagnetsquarearguments attribute)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments.num_qubits", false]], "num_qubits (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.num_qubits", false]], "num_qubits (qurry.qurries.string_operator.arguments.stringoperatorarguments attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments.num_qubits", false]], "num_qubits (qurry.recipe.n_body.onebody property)": [[82, "qurry.recipe.n_body.OneBody.num_qubits", false]], "num_qubits (qurry.recipe.n_body.twobody property)": [[82, "qurry.recipe.n_body.TwoBody.num_qubits", false]], "numerical_error_tolerance (in module qurry.process.utils.other)": [[33, "qurry.process.utils.other.NUMERICAL_ERROR_TOLERANCE", false]], "on_dir (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.on_dir", false]], "on_dir (qurry.qurries.string_operator.arguments.stringoperatorarguments attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments.on_dir", false]], "on_dir (qurry.qurries.string_operator.arguments.stringoperatormeasureargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs.on_dir", false]], "on_dir (qurry.qurries.string_operator.arguments.stringoperatoroutputargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorOutputArgs.on_dir", false]], "onebody (class in qurry.recipe.n_body)": [[82, "qurry.recipe.n_body.OneBody", false]], "open_args (qurry.capsule.mori.taglist.taglist.paramscontrol attribute)": [[4, "qurry.capsule.mori.taglist.TagList.ParamsControl.open_args", false]], "openargs (class in qurry.capsule.utils)": [[6, "qurry.capsule.utils.OpenArgs", false]], "opener (qurry.capsule.utils.openargs attribute)": [[6, "qurry.capsule.utils.OpenArgs.opener", false]], "openqasm3issue13362warning": [[10, "qurry.exceptions.OpenQASM3Issue13362Warning", false]], "openqasmprocessingwarning": [[10, "qurry.exceptions.OpenQASMProcessingWarning", false]], "operator() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.operator", false]], "operator() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.operator", false]], "order (qurry.process.string_operator.string_operator.stringoperator attribute)": [[32, "qurry.process.string_operator.string_operator.StringOperator.order", false]], "order (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.order", false]], "orphan_exps (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.orphan_exps", false]], "outer_product (in module qurry.process.classical_shadow.unitary_set)": [[22, "qurry.process.classical_shadow.unitary_set.OUTER_PRODUCT", false]], "outfields (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.outfields", false]], "outfields (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.outfields", false]], "outfields_check() (in module qurry.qurrium.utils.inputfixer)": [[77, "qurry.qurrium.utils.inputfixer.outfields_check", false]], "outfields_hint() (in module qurry.qurrium.utils.inputfixer)": [[77, "qurry.qurrium.utils.inputfixer.outfields_hint", false]], "output() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.output", false]], "outputargs (class in qurry.declare.qurrium)": [[7, "qurry.declare.qurrium.OutputArgs", false]], "outside_analysis_recover() (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment method)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.outside_analysis_recover", false]], "outside_analyze() (in module qurry.qurrent.classical_shadow.experiment)": [[37, "qurry.qurrent.classical_shadow.experiment.outside_analyze", false]], "outside_analyze_wrapper() (in module qurry.qurrent.classical_shadow.experiment)": [[37, "qurry.qurrent.classical_shadow.experiment.outside_analyze_wrapper", false]], "outsideanalyzeinput (class in qurry.qurrent.classical_shadow.experiment)": [[37, "qurry.qurrent.classical_shadow.experiment.OutsideAnalyzeInput", false]], "overlap_echo_allrust() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_allrust", false]], "overlap_echo_core() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_core", false]], "overlap_echo_core_2() (in module qurry.process.randomized_measure.wavefunction_overlap.echo_core_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2.overlap_echo_core_2", false]], "overlap_echo_core_2_allrust() (in module qurry.process.randomized_measure.wavefunction_overlap.echo_core_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2.overlap_echo_core_2_allrust", false]], "overlap_echo_core_2_pyrust() (in module qurry.process.randomized_measure.wavefunction_overlap.echo_core_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2.overlap_echo_core_2_pyrust", false]], "overlap_echo_core_pycyrust() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_core_pycyrust", false]], "overlapcomparisonsizedifferent": [[10, "qurry.exceptions.OverlapComparisonSizeDifferent", false]], "overlapping_given_check() (in module qurry.qurrech.randomized_measure.utils)": [[35, "qurry.qurrech.randomized_measure.utils.overlapping_given_check", false]], "overlapping_size_check() (in module qurry.qurrech.randomized_measure.utils)": [[35, "qurry.qurrech.randomized_measure.utils.overlapping_size_check", false]], "parallelmanager (class in qurry.tools.parallelmanager)": [[89, "qurry.tools.parallelmanager.ParallelManager", false]], "params_control() (qurry.capsule.mori.taglist.taglist class method)": [[4, "qurry.capsule.mori.taglist.TagList.params_control", false]], "params_control() (qurry.qurrech.hadamard_test.experiment.echolistenhadamardexperiment class method)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.params_control", false]], "params_control() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment class method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.params_control", false]], "params_control() (qurry.qurrech.randomized_measure_v1.experiment.echolistenrandomizedv1experiment class method)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.params_control", false]], "params_control() (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment class method)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.params_control", false]], "params_control() (qurry.qurrent.hadamard_test.experiment.entropymeasurehadamardexperiment class method)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.params_control", false]], "params_control() (qurry.qurrent.randomized_measure.experiment.entropymeasurerandomizedexperiment class method)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.params_control", false]], "params_control() (qurry.qurrent.randomized_measure_v1.experiment.entropymeasurerandomizedv1experiment class method)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.params_control", false]], "params_control() (qurry.qurries.magnet_square.experiment.magnetsquareexperiment class method)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.params_control", false]], "params_control() (qurry.qurries.magnet_square_z.experiment.zdirmagnetsquareexperiment class method)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.params_control", false]], "params_control() (qurry.qurries.samplingqurry.experiment.qurryexperiment class method)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment.params_control", false]], "params_control() (qurry.qurries.string_operator.experiment.stringoperatorexperiment class method)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment.params_control", false]], "params_control() (qurry.qurries.wavesqurry.experiment.wavesexecuterexperiment class method)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.params_control", false]], "params_control() (qurry.qurrium.experiment.experiment.experimentprototype class method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.params_control", false]], "parse() (in module qurry.capsule.jsonablize)": [[3, "qurry.capsule.jsonablize.parse", false]], "passmanager_processor() (in module qurry.qurrium.utils.build)": [[73, "qurry.qurrium.utils.build.passmanager_processor", false]], "passmanagercontainer (class in qurry.qurrium.container.passmanagers)": [[54, "qurry.qurrium.container.passmanagers.PassManagerContainer", false]], "passmanagers (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.passmanagers", false]], "passmanagertype (in module qurry.declare.qurrium)": [[7, "qurry.declare.qurrium.PassManagerType", false]], "pending_pool (qurry.qurrium.multimanager.beforewards.before attribute)": [[67, "qurry.qurrium.multimanager.beforewards.Before.pending_pool", false]], "pending_strategy (in module qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.PENDING_STRATEGY", false]], "pending_strategy (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.pending_strategy", false]], "pending_target_provider (in module qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.PENDING_TARGET_PROVIDER", false]], "pendingstrategyliteral (in module qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.PendingStrategyLiteral", false]], "pendingtargetproviderliteral (in module qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.PendingTargetProviderLiteral", false]], "postprocessingbackenddeprecatedwarning": [[23, "qurry.process.exceptions.PostProcessingBackendDeprecatedWarning", false]], "postprocessingbackendlabel (in module qurry.process.availability)": [[12, "qurry.process.availability.PostProcessingBackendLabel", false]], "postprocessingcythonimporterror": [[23, "qurry.process.exceptions.PostProcessingCythonImportError", false]], "postprocessingcythonunavailablewarning": [[23, "qurry.process.exceptions.PostProcessingCythonUnavailableWarning", false]], "postprocessingrustimporterror": [[23, "qurry.process.exceptions.PostProcessingRustImportError", false]], "postprocessingrustunavailablewarning": [[23, "qurry.process.exceptions.PostProcessingRustUnavailableWarning", false]], "postprocessingthirdpartyimporterror": [[23, "qurry.process.exceptions.PostProcessingThirdPartyImportError", false]], "postprocessingthirdpartyunavailablewarning": [[23, "qurry.process.exceptions.PostProcessingThirdPartyUnavailableWarning", false]], "precomputed_rho_m_k_i (in module qurry.process.classical_shadow.unitary_set)": [[22, "qurry.process.classical_shadow.unitary_set.PRECOMPUTED_RHO_M_K_I", false]], "precomputed_rho_m_k_i_2 (in module qurry.process.classical_shadow.unitary_set)": [[22, "qurry.process.classical_shadow.unitary_set.PRECOMPUTED_RHO_M_K_I_2", false]], "prediction_algorithm() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.prediction_algorithm", false]], "prediction_einsum_aij_bji_to_ab_jax() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.prediction_einsum_aij_bji_to_ab_jax", false]], "prediction_einsum_aij_bji_to_ab_numpy() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.prediction_einsum_aij_bji_to_ab_numpy", false]], "preparing_all_system() (in module qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2.preparing_all_system", false]], "preparing_all_system() (in module qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy.preparing_all_system", false]], "print() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.print", false]], "printargs (class in qurry.capsule.utils)": [[6, "qurry.capsule.utils.PrintArgs", false]], "process() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.process", false]], "process() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.process", false]], "process_map() (qurry.tools.parallelmanager.parallelmanager method)": [[89, "qurry.tools.parallelmanager.ParallelManager.process_map", false]], "progressbar_ascii (in module qurry.tools.progressbar)": [[90, "qurry.tools.progressbar.PROGRESSBAR_ASCII", false]], "protect_keys (qurry.capsule.mori.taglist.taglist attribute)": [[4, "qurry.capsule.mori.taglist.TagList.protect_keys", false]], "purity (qurry.process.classical_shadow.container.classicalshadowpurity attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowPurity.purity", false]], "purity (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.purity", false]], "purity (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.purity", false]], "purity (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.purity", false]], "purity (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.purity", false]], "purity (qurry.qurrent.hadamard_test.analysis.emhanalysiscontent attribute)": [[38, "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent.purity", false]], "purity (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.purity", false]], "purity (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.purity", false]], "purity_cell() (in module qurry.process.randomized_measure.entangled_entropy_v1.purity_cell)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell.purity_cell", false]], "purity_cell_2() (in module qurry.process.randomized_measure.entangled_entropy.purity_cell_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2", false]], "purity_cell_2_py() (in module qurry.process.randomized_measure.entangled_entropy.purity_cell_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2_py", false]], "purity_cell_2_rust() (in module qurry.process.randomized_measure.entangled_entropy.purity_cell_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2_rust", false]], "purity_cell_py() (in module qurry.process.randomized_measure.entangled_entropy_v1.purity_cell)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell.purity_cell_py", false]], "purity_cell_rust() (in module qurry.process.randomized_measure.entangled_entropy_v1.purity_cell)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell.purity_cell_rust", false]], "purity_echo_core() (in module qurry.process.hadamard_test.purity_echo_core)": [[24, "qurry.process.hadamard_test.purity_echo_core.purity_echo_core", false]], "purity_echo_core_allrust() (in module qurry.process.hadamard_test.purity_echo_core)": [[24, "qurry.process.hadamard_test.purity_echo_core.purity_echo_core_allrust", false]], "purityallsys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.purityAllSys", false]], "purityallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.purityAllSys", false]], "purityallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.purityAllSys", false]], "purityallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.purityAllSys", false]], "purityallsys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.purityAllSys", false]], "purityallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.purityAllSys", false]], "puritycells (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.purityCells", false]], "puritycells (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.purityCells", false]], "puritycells (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.purityCells", false]], "puritycells (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.purityCells", false]], "puritycells (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.purityCells", false]], "puritycellsallsys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.purityCellsAllSys", false]], "puritycellsallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.purityCellsAllSys", false]], "puritycellsallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.purityCellsAllSys", false]], "puritycellsallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.existingallsystemsource attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.ExistingAllSystemSource.purityCellsAllSys", false]], "puritycellsallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.purityCellsAllSys", false]], "puritycellsallsys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.purityCellsAllSys", false]], "puritycellsallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.purityCellsAllSys", false]], "puritysd (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.puritySD", false]], "puritysd (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.puritySD", false]], "puritysd (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.puritySD", false]], "puritysd (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.puritySD", false]], "puritysd (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.puritySD", false]], "puritysdallsys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.puritySDAllSys", false]], "puritysdallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.puritySDAllSys", false]], "puritysdallsys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.puritySDAllSys", false]], "puritysdallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.puritySDAllSys", false]], "puritysdallsys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.puritySDAllSys", false]], "puritysdallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.puritySDAllSys", false]], "pytorch_cuda_check() (in module qurry.tools.command)": [[86, "qurry.tools.command.pytorch_cuda_check", false]], "qasm_dumps() (in module qurry.qurrium.utils.qasm)": [[79, "qurry.qurrium.utils.qasm.qasm_dumps", false]], "qasm_loads() (in module qurry.qurrium.utils.qasm)": [[79, "qurry.qurrium.utils.qasm.qasm_loads", false]], "qasm_version_detect() (in module qurry.qurrium.utils.qasm)": [[79, "qurry.qurrium.utils.qasm.qasm_version_detect", false]], "qiskit_ibm_runtime_issue_1318 (in module qurry.tools.backend.import_fake)": [[85, "qurry.tools.backend.import_fake.QISKIT_IBM_RUNTIME_ISSUE_1318", false]], "qiskit_version (in module qurry.tools.qiskit_version)": [[91, "qurry.tools.qiskit_version.QISKIT_VERSION", false]], "qiskit_version_statesheet() (in module qurry.tools.qiskit_version)": [[91, "qurry.tools.qiskit_version.qiskit_version_statesheet", false]], "qiskit_version_v0_check() (in module qurry.tools.qiskit_version)": [[91, "qurry.tools.qiskit_version.qiskit_version_v0_check", false]], "qiskitversion (class in qurry.tools.qiskit_version)": [[91, "qurry.tools.qiskit_version.QiskitVersion", false]], "quantities() (qurry.qurrech.hadamard_test.experiment.echolistenhadamardexperiment class method)": [[34, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.quantities", false]], "quantities() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment class method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.quantities", false]], "quantities() (qurry.qurrech.randomized_measure_v1.experiment.echolistenrandomizedv1experiment class method)": [[36, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.quantities", false]], "quantities() (qurry.qurrent.classical_shadow.experiment.shadowunveilexperiment class method)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.quantities", false]], "quantities() (qurry.qurrent.hadamard_test.experiment.entropymeasurehadamardexperiment class method)": [[38, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.quantities", false]], "quantities() (qurry.qurrent.randomized_measure.experiment.entropymeasurerandomizedexperiment class method)": [[39, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.quantities", false]], "quantities() (qurry.qurrent.randomized_measure_v1.experiment.entropymeasurerandomizedv1experiment class method)": [[40, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.quantities", false]], "quantities() (qurry.qurries.magnet_square.experiment.magnetsquareexperiment class method)": [[41, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.quantities", false]], "quantities() (qurry.qurries.magnet_square_z.experiment.zdirmagnetsquareexperiment class method)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.quantities", false]], "quantities() (qurry.qurries.samplingqurry.experiment.qurryexperiment class method)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment.quantities", false]], "quantities() (qurry.qurries.string_operator.experiment.stringoperatorexperiment class method)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment.quantities", false]], "quantities() (qurry.qurries.wavesqurry.experiment.wavesexecuterexperiment class method)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.quantities", false]], "quantities() (qurry.qurrium.experiment.experiment.experimentprototype class method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.quantities", false]], "quantities_input_collecter() (in module qurry.qurrent.classical_shadow.experiment)": [[37, "qurry.qurrent.classical_shadow.experiment.quantities_input_collecter", false]], "quantity_container (qurry.qurrium.multimanager.multimanager.multimanager attribute)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.quantity_container", false]], "quantitycontainer (class in qurry.qurrium.container.multiquantity)": [[53, "qurry.qurrium.container.multiquantity.QuantityContainer", false]], "qubit_mapper() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.qubit_mapper", false]], "qubit_mapper_2_int() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.qubit_mapper_2_int", false]], "qubit_operator_to_pauli_coeff() (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.qubit_operator_to_pauli_coeff", false]], "qubit_selector() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.qubit_selector", false]], "qubit_selector_rust() (in module qurry.process.utils.bit_slice)": [[33, "qurry.process.utils.bit_slice.qubit_selector_rust", false]], "qubits_measured (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.qubits_measured", false]], "qubits_measured (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.qubits_measured", false]], "qubits_measured_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.qubits_measured_1", false]], "qubits_measured_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.qubits_measured_2", false]], "quickjson() (in module qurry.capsule.jsonablize)": [[3, "qurry.capsule.jsonablize.quickJSON", false]], "quickread() (in module qurry.capsule.quick)": [[5, "qurry.capsule.quick.quickRead", false]], "qurriumprototype (class in qurry.qurrium.qurrium)": [[72, "qurry.qurrium.qurrium.QurriumPrototype", false]], "qurry.capsule": [[2, "module-qurry.capsule", false]], "qurry.capsule.exception": [[0, "module-qurry.capsule.exception", false]], "qurry.capsule.hoshi": [[1, "module-qurry.capsule.hoshi", false]], "qurry.capsule.hoshi.hoshi": [[1, "module-qurry.capsule.hoshi.hoshi", false]], "qurry.capsule.hoshi.repr_modify": [[1, "module-qurry.capsule.hoshi.repr_modify", false]], "qurry.capsule.jsonablize": [[3, "module-qurry.capsule.jsonablize", false]], "qurry.capsule.mori": [[4, "module-qurry.capsule.mori", false]], "qurry.capsule.mori.gitsync": [[4, "module-qurry.capsule.mori.gitsync", false]], "qurry.capsule.mori.taglist": [[4, "module-qurry.capsule.mori.taglist", false]], "qurry.capsule.quick": [[5, "module-qurry.capsule.quick", false]], "qurry.capsule.utils": [[6, "module-qurry.capsule.utils", false]], "qurry.declare": [[11, "module-qurry.declare", false]], "qurry.declare.qurrium": [[7, "module-qurry.declare.qurrium", false]], "qurry.declare.run": [[8, "module-qurry.declare.run", false]], "qurry.declare.run.base_run": [[8, "module-qurry.declare.run.base_run", false]], "qurry.declare.run.ibm": [[8, "module-qurry.declare.run.ibm", false]], "qurry.declare.run.simulator": [[8, "module-qurry.declare.run.simulator", false]], "qurry.declare.transpile": [[9, "module-qurry.declare.transpile", false]], "qurry.exceptions": [[10, "module-qurry.exceptions", false]], "qurry.process": [[11, "module-qurry.process", false]], "qurry.process.availability": [[12, "module-qurry.process.availability", false]], "qurry.process.classical_shadow": [[16, "module-qurry.process.classical_shadow", false]], "qurry.process.classical_shadow.classical_shadow": [[13, "module-qurry.process.classical_shadow.classical_shadow", false]], "qurry.process.classical_shadow.container": [[14, "module-qurry.process.classical_shadow.container", false]], "qurry.process.classical_shadow.expectation_process": [[15, "module-qurry.process.classical_shadow.expectation_process", false]], "qurry.process.classical_shadow.matrix_calcution": [[17, "module-qurry.process.classical_shadow.matrix_calcution", false]], "qurry.process.classical_shadow.rho_m_core": [[18, "module-qurry.process.classical_shadow.rho_m_core", false]], "qurry.process.classical_shadow.rho_m_flatten": [[19, "module-qurry.process.classical_shadow.rho_m_flatten", false]], "qurry.process.classical_shadow.rho_mk_cell": [[20, "module-qurry.process.classical_shadow.rho_mk_cell", false]], "qurry.process.classical_shadow.trace_expect_process": [[21, "module-qurry.process.classical_shadow.trace_expect_process", false]], "qurry.process.classical_shadow.unitary_set": [[22, "module-qurry.process.classical_shadow.unitary_set", false]], "qurry.process.exceptions": [[23, "module-qurry.process.exceptions", false]], "qurry.process.hadamard_test.entangled_entropy": [[24, "module-qurry.process.hadamard_test.entangled_entropy", false]], "qurry.process.hadamard_test.purity_echo_core": [[24, "module-qurry.process.hadamard_test.purity_echo_core", false]], "qurry.process.hadamard_test.wavefunction_overlap": [[24, "module-qurry.process.hadamard_test.wavefunction_overlap", false]], "qurry.process.magnet_square.magnet_square": [[25, "module-qurry.process.magnet_square.magnet_square", false]], "qurry.process.magnet_square.magsq_core": [[25, "module-qurry.process.magnet_square.magsq_core", false]], "qurry.process.randomized_measure": [[28, "module-qurry.process.randomized_measure", false]], "qurry.process.randomized_measure.entangled_entropy": [[26, "module-qurry.process.randomized_measure.entangled_entropy", false]], "qurry.process.randomized_measure.entangled_entropy.container": [[26, "module-qurry.process.randomized_measure.entangled_entropy.container", false]], "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2": [[26, "module-qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2", false]], "qurry.process.randomized_measure.entangled_entropy.entropy_core_2": [[26, "module-qurry.process.randomized_measure.entangled_entropy.entropy_core_2", false]], "qurry.process.randomized_measure.entangled_entropy.error_mitigation": [[26, "module-qurry.process.randomized_measure.entangled_entropy.error_mitigation", false]], "qurry.process.randomized_measure.entangled_entropy.purity_cell_2": [[26, "module-qurry.process.randomized_measure.entangled_entropy.purity_cell_2", false]], "qurry.process.randomized_measure.entangled_entropy_v1": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1", false]], "qurry.process.randomized_measure.entangled_entropy_v1.container": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1.container", false]], "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy", false]], "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1.entropy_core", false]], "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell": [[27, "module-qurry.process.randomized_measure.entangled_entropy_v1.purity_cell", false]], "qurry.process.randomized_measure.wavefunction_overlap": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap", false]], "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2", false]], "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap.echo_core_2", false]], "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2": [[29, "module-qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2", false]], "qurry.process.randomized_measure.wavefunction_overlap_v1": [[30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1", false]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell": [[30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell", false]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core": [[30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core", false]], "qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap": [[30, "module-qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap", false]], "qurry.process.status.backend": [[31, "module-qurry.process.status.backend", false]], "qurry.process.string_operator.string_operator": [[32, "module-qurry.process.string_operator.string_operator", false]], "qurry.process.string_operator.strop_core": [[32, "module-qurry.process.string_operator.strop_core", false]], "qurry.process.utils.bit_slice": [[33, "module-qurry.process.utils.bit_slice", false]], "qurry.process.utils.counts_process": [[33, "module-qurry.process.utils.counts_process", false]], "qurry.process.utils.dummy": [[33, "module-qurry.process.utils.dummy", false]], "qurry.process.utils.other": [[33, "module-qurry.process.utils.other", false]], "qurry.process.utils.randomized": [[33, "module-qurry.process.utils.randomized", false]], "qurry.process.utils.test": [[33, "module-qurry.process.utils.test", false]], "qurry.qurrech": [[11, "module-qurry.qurrech", false]], "qurry.qurrech.hadamard_test": [[34, "module-qurry.qurrech.hadamard_test", false]], "qurry.qurrech.hadamard_test.analysis": [[34, "module-qurry.qurrech.hadamard_test.analysis", false]], "qurry.qurrech.hadamard_test.arguments": [[34, "module-qurry.qurrech.hadamard_test.arguments", false]], "qurry.qurrech.hadamard_test.experiment": [[34, "module-qurry.qurrech.hadamard_test.experiment", false]], "qurry.qurrech.hadamard_test.qurry": [[34, "module-qurry.qurrech.hadamard_test.qurry", false]], "qurry.qurrech.randomized_measure": [[35, "module-qurry.qurrech.randomized_measure", false]], "qurry.qurrech.randomized_measure.analysis": [[35, "module-qurry.qurrech.randomized_measure.analysis", false]], "qurry.qurrech.randomized_measure.arguments": [[35, "module-qurry.qurrech.randomized_measure.arguments", false]], "qurry.qurrech.randomized_measure.experiment": [[35, "module-qurry.qurrech.randomized_measure.experiment", false]], "qurry.qurrech.randomized_measure.qurry": [[35, "module-qurry.qurrech.randomized_measure.qurry", false]], "qurry.qurrech.randomized_measure.utils": [[35, "module-qurry.qurrech.randomized_measure.utils", false]], "qurry.qurrech.randomized_measure_v1": [[36, "module-qurry.qurrech.randomized_measure_v1", false]], "qurry.qurrech.randomized_measure_v1.analysis": [[36, "module-qurry.qurrech.randomized_measure_v1.analysis", false]], "qurry.qurrech.randomized_measure_v1.arguments": [[36, "module-qurry.qurrech.randomized_measure_v1.arguments", false]], "qurry.qurrech.randomized_measure_v1.experiment": [[36, "module-qurry.qurrech.randomized_measure_v1.experiment", false]], "qurry.qurrech.randomized_measure_v1.qurry": [[36, "module-qurry.qurrech.randomized_measure_v1.qurry", false]], "qurry.qurrent": [[11, "module-qurry.qurrent", false]], "qurry.qurrent.classical_shadow": [[37, "module-qurry.qurrent.classical_shadow", false]], "qurry.qurrent.classical_shadow.analysis": [[37, "module-qurry.qurrent.classical_shadow.analysis", false]], "qurry.qurrent.classical_shadow.arguments": [[37, "module-qurry.qurrent.classical_shadow.arguments", false]], "qurry.qurrent.classical_shadow.experiment": [[37, "module-qurry.qurrent.classical_shadow.experiment", false]], "qurry.qurrent.classical_shadow.qurry": [[37, "module-qurry.qurrent.classical_shadow.qurry", false]], "qurry.qurrent.classical_shadow.utils": [[37, "module-qurry.qurrent.classical_shadow.utils", false]], "qurry.qurrent.hadamard_test": [[38, "module-qurry.qurrent.hadamard_test", false]], "qurry.qurrent.hadamard_test.analysis": [[38, "module-qurry.qurrent.hadamard_test.analysis", false]], "qurry.qurrent.hadamard_test.arguments": [[38, "module-qurry.qurrent.hadamard_test.arguments", false]], "qurry.qurrent.hadamard_test.experiment": [[38, "module-qurry.qurrent.hadamard_test.experiment", false]], "qurry.qurrent.hadamard_test.qurry": [[38, "module-qurry.qurrent.hadamard_test.qurry", false]], "qurry.qurrent.randomized_measure": [[39, "module-qurry.qurrent.randomized_measure", false]], "qurry.qurrent.randomized_measure.analysis": [[39, "module-qurry.qurrent.randomized_measure.analysis", false]], "qurry.qurrent.randomized_measure.arguments": [[39, "module-qurry.qurrent.randomized_measure.arguments", false]], "qurry.qurrent.randomized_measure.experiment": [[39, "module-qurry.qurrent.randomized_measure.experiment", false]], "qurry.qurrent.randomized_measure.qurry": [[39, "module-qurry.qurrent.randomized_measure.qurry", false]], "qurry.qurrent.randomized_measure.utils": [[39, "module-qurry.qurrent.randomized_measure.utils", false]], "qurry.qurrent.randomized_measure_v1": [[40, "module-qurry.qurrent.randomized_measure_v1", false]], "qurry.qurrent.randomized_measure_v1.analysis": [[40, "module-qurry.qurrent.randomized_measure_v1.analysis", false]], "qurry.qurrent.randomized_measure_v1.arguments": [[40, "module-qurry.qurrent.randomized_measure_v1.arguments", false]], "qurry.qurrent.randomized_measure_v1.experiment": [[40, "module-qurry.qurrent.randomized_measure_v1.experiment", false]], "qurry.qurrent.randomized_measure_v1.qurry": [[40, "module-qurry.qurrent.randomized_measure_v1.qurry", false]], "qurry.qurrent.randomized_measure_v1.utils": [[40, "module-qurry.qurrent.randomized_measure_v1.utils", false]], "qurry.qurries": [[11, "module-qurry.qurries", false]], "qurry.qurries.magnet_square": [[41, "module-qurry.qurries.magnet_square", false]], "qurry.qurries.magnet_square.analysis": [[41, "module-qurry.qurries.magnet_square.analysis", false]], "qurry.qurries.magnet_square.arguments": [[41, "module-qurry.qurries.magnet_square.arguments", false]], "qurry.qurries.magnet_square.experiment": [[41, "module-qurry.qurries.magnet_square.experiment", false]], "qurry.qurries.magnet_square.qurry": [[41, "module-qurry.qurries.magnet_square.qurry", false]], "qurry.qurries.magnet_square.utils": [[41, "module-qurry.qurries.magnet_square.utils", false]], "qurry.qurries.magnet_square_z": [[42, "module-qurry.qurries.magnet_square_z", false]], "qurry.qurries.magnet_square_z.analysis": [[42, "module-qurry.qurries.magnet_square_z.analysis", false]], "qurry.qurries.magnet_square_z.arguments": [[42, "module-qurry.qurries.magnet_square_z.arguments", false]], "qurry.qurries.magnet_square_z.experiment": [[42, "module-qurry.qurries.magnet_square_z.experiment", false]], "qurry.qurries.magnet_square_z.qurry": [[42, "module-qurry.qurries.magnet_square_z.qurry", false]], "qurry.qurries.magnet_square_z.utils": [[42, "module-qurry.qurries.magnet_square_z.utils", false]], "qurry.qurries.position_distribution": [[43, "module-qurry.qurries.position_distribution", false]], "qurry.qurries.samplingqurry": [[44, "module-qurry.qurries.samplingqurry", false]], "qurry.qurries.samplingqurry.analysis": [[44, "module-qurry.qurries.samplingqurry.analysis", false]], "qurry.qurries.samplingqurry.arguments": [[44, "module-qurry.qurries.samplingqurry.arguments", false]], "qurry.qurries.samplingqurry.experiment": [[44, "module-qurry.qurries.samplingqurry.experiment", false]], "qurry.qurries.samplingqurry.qurry": [[44, "module-qurry.qurries.samplingqurry.qurry", false]], "qurry.qurries.string_operator": [[45, "module-qurry.qurries.string_operator", false]], "qurry.qurries.string_operator.analysis": [[45, "module-qurry.qurries.string_operator.analysis", false]], "qurry.qurries.string_operator.arguments": [[45, "module-qurry.qurries.string_operator.arguments", false]], "qurry.qurries.string_operator.experiment": [[45, "module-qurry.qurries.string_operator.experiment", false]], "qurry.qurries.string_operator.qurry": [[45, "module-qurry.qurries.string_operator.qurry", false]], "qurry.qurries.string_operator.utils": [[45, "module-qurry.qurries.string_operator.utils", false]], "qurry.qurries.twisted_operator": [[46, "module-qurry.qurries.twisted_operator", false]], "qurry.qurries.wavesqurry": [[47, "module-qurry.qurries.wavesqurry", false]], "qurry.qurries.wavesqurry.analysis": [[47, "module-qurry.qurries.wavesqurry.analysis", false]], "qurry.qurries.wavesqurry.arguments": [[47, "module-qurry.qurries.wavesqurry.arguments", false]], "qurry.qurries.wavesqurry.experiment": [[47, "module-qurry.qurries.wavesqurry.experiment", false]], "qurry.qurries.wavesqurry.qurry": [[47, "module-qurry.qurries.wavesqurry.qurry", false]], "qurry.qurrium": [[11, "module-qurry.qurrium", false]], "qurry.qurrium.analysis": [[48, "module-qurry.qurrium.analysis", false]], "qurry.qurrium.analysis.analysis": [[48, "module-qurry.qurrium.analysis.analysis", false]], "qurry.qurrium.container": [[51, "module-qurry.qurrium.container", false]], "qurry.qurrium.container.experiments": [[49, "module-qurry.qurrium.container.experiments", false]], "qurry.qurrium.container.experiments_wrapper": [[50, "module-qurry.qurrium.container.experiments_wrapper", false]], "qurry.qurrium.container.multimanagers": [[52, "module-qurry.qurrium.container.multimanagers", false]], "qurry.qurrium.container.multiquantity": [[53, "module-qurry.qurrium.container.multiquantity", false]], "qurry.qurrium.container.passmanagers": [[54, "module-qurry.qurrium.container.passmanagers", false]], "qurry.qurrium.container.waves_dynamic": [[55, "module-qurry.qurrium.container.waves_dynamic", false]], "qurry.qurrium.container.waves_static": [[56, "module-qurry.qurrium.container.waves_static", false]], "qurry.qurrium.experiment": [[63, "module-qurry.qurrium.experiment", false]], "qurry.qurrium.experiment.afterwards": [[57, "module-qurry.qurrium.experiment.afterwards", false]], "qurry.qurrium.experiment.analyses": [[58, "module-qurry.qurrium.experiment.analyses", false]], "qurry.qurrium.experiment.arguments": [[59, "module-qurry.qurrium.experiment.arguments", false]], "qurry.qurrium.experiment.beforewards": [[60, "module-qurry.qurrium.experiment.beforewards", false]], "qurry.qurrium.experiment.experiment": [[61, "module-qurry.qurrium.experiment.experiment", false]], "qurry.qurrium.experiment.export": [[62, "module-qurry.qurrium.experiment.export", false]], "qurry.qurrium.experiment.utils": [[64, "module-qurry.qurrium.experiment.utils", false]], "qurry.qurrium.multimanager": [[68, "module-qurry.qurrium.multimanager", false]], "qurry.qurrium.multimanager.afterwards": [[65, "module-qurry.qurrium.multimanager.afterwards", false]], "qurry.qurrium.multimanager.arguments": [[66, "module-qurry.qurrium.multimanager.arguments", false]], "qurry.qurrium.multimanager.beforewards": [[67, "module-qurry.qurrium.multimanager.beforewards", false]], "qurry.qurrium.multimanager.multimanager": [[69, "module-qurry.qurrium.multimanager.multimanager", false]], "qurry.qurrium.multimanager.process": [[70, "module-qurry.qurrium.multimanager.process", false]], "qurry.qurrium.multimanager.utils": [[71, "module-qurry.qurrium.multimanager.utils", false]], "qurry.qurrium.qurrium": [[72, "module-qurry.qurrium.qurrium", false]], "qurry.qurrium.utils": [[76, "module-qurry.qurrium.utils", false]], "qurry.qurrium.utils.build": [[73, "module-qurry.qurrium.utils.build", false]], "qurry.qurrium.utils.chunk": [[74, "module-qurry.qurrium.utils.chunk", false]], "qurry.qurrium.utils.construct": [[75, "module-qurry.qurrium.utils.construct", false]], "qurry.qurrium.utils.inputfixer": [[77, "module-qurry.qurrium.utils.inputfixer", false]], "qurry.qurrium.utils.iocontrol": [[78, "module-qurry.qurrium.utils.iocontrol", false]], "qurry.qurrium.utils.qasm": [[79, "module-qurry.qurrium.utils.qasm", false]], "qurry.qurrium.utils.random_unitary": [[80, "module-qurry.qurrium.utils.random_unitary", false]], "qurry.qurrium.utils.randomized": [[81, "module-qurry.qurrium.utils.randomized", false]], "qurry.recipe": [[11, "module-qurry.recipe", false]], "qurry.recipe.n_body": [[82, "module-qurry.recipe.n_body", false]], "qurry.recipe.simple": [[83, "module-qurry.recipe.simple", false]], "qurry.recipe.simple.cat": [[83, "module-qurry.recipe.simple.cat", false]], "qurry.recipe.simple.intracell": [[83, "module-qurry.recipe.simple.intracell", false]], "qurry.recipe.simple.paramagnet": [[83, "module-qurry.recipe.simple.paramagnet", false]], "qurry.tools": [[11, "module-qurry.tools", false]], "qurry.tools.backend": [[85, "module-qurry.tools.backend", false]], "qurry.tools.backend.backend_manager": [[85, "module-qurry.tools.backend.backend_manager", false]], "qurry.tools.backend.env_check": [[85, "module-qurry.tools.backend.env_check", false]], "qurry.tools.backend.import_fake": [[85, "module-qurry.tools.backend.import_fake", false]], "qurry.tools.backend.import_simulator": [[85, "module-qurry.tools.backend.import_simulator", false]], "qurry.tools.backend.utils": [[85, "module-qurry.tools.backend.utils", false]], "qurry.tools.command": [[86, "module-qurry.tools.command", false]], "qurry.tools.datetime": [[87, "module-qurry.tools.datetime", false]], "qurry.tools.except_decorator": [[88, "module-qurry.tools.except_decorator", false]], "qurry.tools.parallelmanager": [[89, "module-qurry.tools.parallelmanager", false]], "qurry.tools.progressbar": [[90, "module-qurry.tools.progressbar", false]], "qurry.tools.qiskit_version": [[91, "module-qurry.tools.qiskit_version", false]], "qurry_progressbar() (in module qurry.tools.progressbar)": [[90, "qurry.tools.progressbar.qurry_progressbar", false]], "qurryanalysis (class in qurry.qurries.samplingqurry.analysis)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysis", false]], "qurryanalysiscontent (class in qurry.qurries.samplingqurry.analysis)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent", false]], "qurryanalysisinput (class in qurry.qurries.samplingqurry.analysis)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysisInput", false]], "qurryanalyzeargs (class in qurry.qurries.samplingqurry.arguments)": [[44, "qurry.qurries.samplingqurry.arguments.QurryAnalyzeArgs", false]], "qurryarguments (class in qurry.qurries.samplingqurry.arguments)": [[44, "qurry.qurries.samplingqurry.arguments.QurryArguments", false]], "qurryargumentsexpectednotnone": [[10, "qurry.exceptions.QurryArgumentsExpectedNotNone", false]], "qurrycountlost": [[10, "qurry.exceptions.QurryCountLost", false]], "qurrydependenciesfailureerror": [[10, "qurry.exceptions.QurryDependenciesFailureError", false]], "qurrydependenciesnotworking": [[10, "qurry.exceptions.QurryDependenciesNotWorking", false]], "qurrydeprecatedwarning": [[10, "qurry.exceptions.QurryDeprecatedWarning", false]], "qurrydummyrunnerwarning": [[10, "qurry.exceptions.QurryDummyRunnerWarning", false]], "qurryerror": [[10, "qurry.exceptions.QurryError", false]], "qurryexperiment (class in qurry.qurries.samplingqurry.experiment)": [[44, "qurry.qurries.samplingqurry.experiment.QurryExperiment", false]], "qurryexperimentcountsnotcompleted": [[10, "qurry.exceptions.QurryExperimentCountsNotCompleted", false]], "qurryextrapackagerequired": [[10, "qurry.exceptions.QurryExtraPackageRequired", false]], "qurryhashidinvalid": [[10, "qurry.exceptions.QurryHashIDInvalid", false]], "qurryimportwarning": [[10, "qurry.exceptions.QurryImportWarning", false]], "qurryinfo (qurry.qurrium.multimanager.multimanager.multimanager attribute)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.qurryinfo", false]], "qurryinheritionnoeffect": [[10, "qurry.exceptions.QurryInheritionNoEffect", false]], "qurryinvalidargument": [[10, "qurry.exceptions.QurryInvalidArgument", false]], "qurryinvalidinherition": [[10, "qurry.exceptions.QurryInvalidInherition", false]], "qurrymeasureargs (class in qurry.qurries.samplingqurry.arguments)": [[44, "qurry.qurries.samplingqurry.arguments.QurryMeasureArgs", false]], "qurrymemoryoverallocationwarning": [[10, "qurry.exceptions.QurryMemoryOverAllocationWarning", false]], "qurryoutputargs (class in qurry.qurries.samplingqurry.arguments)": [[44, "qurry.qurries.samplingqurry.arguments.QurryOutputArgs", false]], "qurrypendingtagtoomany": [[10, "qurry.exceptions.QurryPendingTagTooMany", false]], "qurrypositionalargumentnotsupported": [[10, "qurry.exceptions.QurryPositionalArgumentNotSupported", false]], "qurrypostprocessingerror": [[23, "qurry.process.exceptions.QurryPostProcessingError", false]], "qurrypostprocessingwarning": [[23, "qurry.process.exceptions.QurryPostProcessingWarning", false]], "qurryprotectcontent": [[10, "qurry.exceptions.QurryProtectContent", false]], "qurryresetaccomplished": [[10, "qurry.exceptions.QurryResetAccomplished", false]], "qurryresetsecurityactivated": [[10, "qurry.exceptions.QurryResetSecurityActivated", false]], "qurrysummonerinvalid": [[10, "qurry.exceptions.QurrySummonerInvalid", false]], "qurrytranspileconfigurationignored": [[10, "qurry.exceptions.QurryTranspileConfigurationIgnored", false]], "qurryunknownexportoption": [[10, "qurry.exceptions.QurryUnknownExportOption", false]], "qurryunprovenfeaturewarning": [[10, "qurry.exceptions.QurryUnprovenFeatureWarning", false]], "qurryunrecongnizedarguments": [[10, "qurry.exceptions.QurryUnrecongnizedArguments", false]], "qurryv9 (class in qurry.qurries.samplingqurry.qurry)": [[44, "qurry.qurries.samplingqurry.qurry.QurryV9", false]], "qurrywarning": [[10, "qurry.exceptions.QurryWarning", false]], "random() (in module qurry.capsule)": [[2, "qurry.capsule.random", false]], "random() (in module qurry.tools.backend.backend_manager)": [[85, "qurry.tools.backend.backend_manager.random", false]], "random_unitary_seeds (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1arguments attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1measureargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1outputargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1OutputArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.classical_shadow.arguments.shadowunveilmeasureargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.classical_shadow.arguments.shadowunveiloutputargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedmeasureargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedoutputargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1arguments attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1measureargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs.random_unitary_seeds", false]], "random_unitary_seeds (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1outputargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1OutputArgs.random_unitary_seeds", false]], "randomized_circuit_method() (in module qurry.qurrent.randomized_measure.utils)": [[39, "qurry.qurrent.randomized_measure.utils.randomized_circuit_method", false]], "randomized_entangled_entropy() (in module qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2.randomized_entangled_entropy", false]], "randomized_entangled_entropy_complex() (in module qurry.qurrent.randomized_measure.utils)": [[39, "qurry.qurrent.randomized_measure.utils.randomized_entangled_entropy_complex", false]], "randomized_entangled_entropy_complex_v1() (in module qurry.qurrent.randomized_measure_v1.utils)": [[40, "qurry.qurrent.randomized_measure_v1.utils.randomized_entangled_entropy_complex_v1", false]], "randomized_entangled_entropy_mitigated() (in module qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2)": [[26, "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2.randomized_entangled_entropy_mitigated", false]], "randomized_entangled_entropy_mitigated_v1() (in module qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy.randomized_entangled_entropy_mitigated_v1", false]], "randomized_entangled_entropy_v1() (in module qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy.randomized_entangled_entropy_v1", false]], "randomized_overlap_echo() (in module qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.randomized_overlap_echo", false]], "randomized_overlap_echo_v1() (in module qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap)": [[30, "qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap.randomized_overlap_echo_v1", false]], "randomizedentangledentropycomplex (class in qurry.process.randomized_measure.entangled_entropy_v1.container)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex", false]], "randomizedentangledentropymitigatedcomplex (class in qurry.process.randomized_measure.entangled_entropy_v1.container)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex", false]], "randomizedmeasureerror": [[10, "qurry.exceptions.RandomizedMeasureError", false]], "randomizedmeasureunitaryoperatornotfullcovering": [[10, "qurry.exceptions.RandomizedMeasureUnitaryOperatorNotFullCovering", false]], "rawread() (qurry.qurrium.multimanager.arguments.multicommonparams class method)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.rawread", false]], "read() (qurry.capsule.mori.taglist.taglist class method)": [[4, "qurry.capsule.mori.taglist.TagList.read", false]], "read() (qurry.qurrium.analysis.analysis.analysisprototype class method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.read", false]], "read() (qurry.qurrium.container.multiquantity.quantitycontainer method)": [[53, "qurry.qurrium.container.multiquantity.QuantityContainer.read", false]], "read() (qurry.qurrium.experiment.afterwards.after class method)": [[57, "qurry.qurrium.experiment.afterwards.After.read", false]], "read() (qurry.qurrium.experiment.beforewards.before class method)": [[60, "qurry.qurrium.experiment.beforewards.Before.read", false]], "read() (qurry.qurrium.experiment.experiment.experimentprototype class method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.read", false]], "read() (qurry.qurrium.multimanager.beforewards.before class method)": [[67, "qurry.qurrium.multimanager.beforewards.Before.read", false]], "read() (qurry.qurrium.multimanager.multimanager.multimanager class method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.read", false]], "read_with_arguments() (qurry.qurrium.experiment.arguments.commonparams class method)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.read_with_arguments", false]], "register() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.register", false]], "registers_mapping (qurry.qurrent.classical_shadow.analysis.suanalysisinput attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.registers_mapping", false]], "registers_mapping (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.registers_mapping", false]], "registers_mapping (qurry.qurrent.randomized_measure.analysis.emranalysisinput attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.registers_mapping", false]], "registers_mapping (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.registers_mapping", false]], "registers_mapping_1 (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.registers_mapping_1", false]], "registers_mapping_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.registers_mapping_1", false]], "registers_mapping_2 (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.registers_mapping_2", false]], "registers_mapping_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.registers_mapping_2", false]], "remove() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.remove", false]], "remove() (qurry.qurrium.container.multiquantity.quantitycontainer method)": [[53, "qurry.qurrium.container.multiquantity.QuantityContainer.remove", false]], "remove() (qurry.qurrium.container.waves_static.wavecontainer method)": [[56, "qurry.qurrium.container.waves_static.WaveContainer.remove", false]], "remove() (qurry.qurrium.qurrium.qurriumprototype method)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.remove", false]], "remove_analysis() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.remove_analysis", false]], "replace_backend() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.replace_backend", false]], "reports (qurry.qurrium.experiment.experiment.experimentprototype attribute)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.reports", false]], "reports (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.reports", false]], "required_folder (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.REQUIRED_FOLDER", false]], "reset_afterwards() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.reset_afterwards", false]], "result (qurry.qurrium.experiment.afterwards.after attribute)": [[57, "qurry.qurrium.experiment.afterwards.After.result", false]], "result() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.result", false]], "result() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.result", false]], "retrievedresult (qurry.qurrium.multimanager.afterwards.after attribute)": [[65, "qurry.qurrium.multimanager.afterwards.After.retrievedResult", false]], "revive_circuit() (qurry.qurrium.experiment.beforewards.before method)": [[60, "qurry.qurrium.experiment.beforewards.Before.revive_circuit", false]], "revive_target() (qurry.qurrium.experiment.beforewards.before method)": [[60, "qurry.qurrium.experiment.beforewards.Before.revive_target", false]], "rho_m_core() (in module qurry.process.classical_shadow.rho_m_core)": [[18, "qurry.process.classical_shadow.rho_m_core.rho_m_core", false]], "rho_m_core_py() (in module qurry.process.classical_shadow.rho_m_core)": [[18, "qurry.process.classical_shadow.rho_m_core.rho_m_core_py", false]], "rho_m_flatten_core() (in module qurry.process.classical_shadow.rho_m_flatten)": [[19, "qurry.process.classical_shadow.rho_m_flatten.rho_m_flatten_core", false]], "rho_m_flatten_counts_list_vectorize_pyrust() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.rho_m_flatten_counts_list_vectorize_pyrust", false]], "rho_mk_cell_py() (in module qurry.process.classical_shadow.rho_mk_cell)": [[20, "qurry.process.classical_shadow.rho_mk_cell.rho_mk_cell_py", false]], "rho_mk_cell_py_precomputed() (in module qurry.process.classical_shadow.rho_mk_cell)": [[20, "qurry.process.classical_shadow.rho_mk_cell.rho_mk_cell_py_precomputed", false]], "rho_mki_kronecker_product_numpy() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.rho_mki_kronecker_product_numpy", false]], "rho_mki_kronecker_product_numpy_2() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.rho_mki_kronecker_product_numpy_2", false]], "rhomcoremethod (in module qurry.process.classical_shadow.rho_m_core)": [[18, "qurry.process.classical_shadow.rho_m_core.RhoMCoreMethod", false]], "rhomkcellmethod (in module qurry.process.classical_shadow.rho_mk_cell)": [[20, "qurry.process.classical_shadow.rho_mk_cell.RhoMKCellMethod", false]], "rjust_len (in module qurry.qurrium.utils.iocontrol)": [[78, "qurry.qurrium.utils.iocontrol.RJUST_LEN", false]], "run() (qurry.qurrech.randomized_measure.experiment.echolistenrandomizedexperiment method)": [[35, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.run", false]], "run() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.run", false]], "run_args (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.run_args", false]], "runargstype (in module qurry.declare.run.base_run)": [[8, "qurry.declare.run.base_run.RunArgsType", false]], "rxmatrix (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.RXmatrix", false]], "rymatrix (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.RYmatrix", false]], "rzmatrix (in module qurry.qurrium.utils.randomized)": [[81, "qurry.qurrium.utils.randomized.RZmatrix", false]], "sampling (qurry.qurries.samplingqurry.arguments.qurryarguments attribute)": [[44, "qurry.qurries.samplingqurry.arguments.QurryArguments.sampling", false]], "sampling (qurry.qurries.samplingqurry.arguments.qurrymeasureargs attribute)": [[44, "qurry.qurries.samplingqurry.arguments.QurryMeasureArgs.sampling", false]], "sampling (qurry.qurries.samplingqurry.arguments.qurryoutputargs attribute)": [[44, "qurry.qurries.samplingqurry.arguments.QurryOutputArgs.sampling", false]], "save_location (qurry.capsule.mori.taglist.taglist.paramscontrol attribute)": [[4, "qurry.capsule.mori.taglist.TagList.ParamsControl.save_location", false]], "save_location (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.save_location", false]], "save_location (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.save_location", false]], "save_location (qurry.qurrium.utils.iocontrol.iocomplex attribute)": [[78, "qurry.qurrium.utils.iocontrol.IOComplex.save_location", false]], "second_backend (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.second_backend", false]], "second_backend (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.second_backend", false]], "second_backend (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.second_backend", false]], "second_passmanager (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.second_passmanager", false]], "second_passmanager_pair (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.second_passmanager_pair", false]], "second_transpile_args (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.second_transpile_args", false]], "second_transpile_args (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.second_transpile_args", false]], "second_transpile_args (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.second_transpile_args", false]], "select_all_trace_rho_by_einsum_aij_bji_to_ab() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.select_all_trace_rho_by_einsum_aij_bji_to_ab", false]], "select_prediction_einsum_aij_bji_to_ab() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.select_prediction_einsum_aij_bji_to_ab", false]], "select_single_trace_rho_method() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.select_single_trace_rho_method", false]], "selected_classical_registers (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedanalyzeargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedAnalyzeArgs.selected_classical_registers", false]], "selected_qubits (qurry.qurrent.classical_shadow.analysis.suanalysisinput attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.selected_qubits", false]], "selected_qubits (qurry.qurrent.classical_shadow.arguments.shadowunveilanalyzeargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilAnalyzeArgs.selected_qubits", false]], "selected_qubits (qurry.qurrent.randomized_measure.analysis.emranalysisinput attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.selected_qubits", false]], "selected_qubits (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedanalyzeargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedAnalyzeArgs.selected_qubits", false]], "sep (qurry.capsule.utils.printargs attribute)": [[6, "qurry.capsule.utils.PrintArgs.sep", false]], "separators (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.separators", false]], "seperatedexecutingoverlapresult": [[10, "qurry.exceptions.SeperatedExecutingOverlapResult", false]], "serial (qurry.qurrium.analysis.analysis.analysisprototype attribute)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.serial", false]], "serial (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.serial", false]], "serial (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.serial", false]], "serial_naming() (in module qurry.qurrium.utils.iocontrol)": [[78, "qurry.qurrium.utils.iocontrol.serial_naming", false]], "set_cpu_only() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.set_cpu_only", false]], "set_pbar_description() (in module qurry.tools.progressbar)": [[90, "qurry.tools.progressbar.set_pbar_description", false]], "shadow_norm_upperbound (qurry.process.classical_shadow.container.classicalshadowestimation attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowEstimation.shadow_norm_upperbound", false]], "shadowunveil (class in qurry.qurrent.classical_shadow.qurry)": [[37, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil", false]], "shadowunveilanalysis (class in qurry.qurrent.classical_shadow.analysis)": [[37, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis", false]], "shadowunveilanalyzeargs (class in qurry.qurrent.classical_shadow.arguments)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilAnalyzeArgs", false]], "shadowunveilarguments (class in qurry.qurrent.classical_shadow.arguments)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", false]], "shadowunveilexperiment (class in qurry.qurrent.classical_shadow.experiment)": [[37, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", false]], "shadowunveilmeasureargs (class in qurry.qurrent.classical_shadow.arguments)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs", false]], "shadowunveiloutputargs (class in qurry.qurrent.classical_shadow.arguments)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs", false]], "short_name (in module qurry.qurrech.hadamard_test.arguments)": [[34, "qurry.qurrech.hadamard_test.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurrech.randomized_measure.arguments)": [[35, "qurry.qurrech.randomized_measure.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurrech.randomized_measure_v1.arguments)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurrent.classical_shadow.arguments)": [[37, "qurry.qurrent.classical_shadow.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurrent.hadamard_test.arguments)": [[38, "qurry.qurrent.hadamard_test.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurrent.randomized_measure.arguments)": [[39, "qurry.qurrent.randomized_measure.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurrent.randomized_measure_v1.arguments)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurries.magnet_square.arguments)": [[41, "qurry.qurries.magnet_square.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurries.magnet_square_z.arguments)": [[42, "qurry.qurries.magnet_square_z.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurries.samplingqurry.arguments)": [[44, "qurry.qurries.samplingqurry.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurries.string_operator.arguments)": [[45, "qurry.qurries.string_operator.arguments.SHORT_NAME", false]], "short_name (in module qurry.qurries.wavesqurry.arguments)": [[47, "qurry.qurries.wavesqurry.arguments.SHORT_NAME", false]], "short_name (qurry.qurrech.hadamard_test.qurry.echolistenhadamard attribute)": [[34, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.short_name", false]], "short_name (qurry.qurrech.randomized_measure.qurry.echolistenrandomized attribute)": [[35, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.short_name", false]], "short_name (qurry.qurrech.randomized_measure_v1.qurry.echolistenrandomizedv1 attribute)": [[36, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.short_name", false]], "short_name (qurry.qurrent.classical_shadow.qurry.shadowunveil attribute)": [[37, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.short_name", false]], "short_name (qurry.qurrent.hadamard_test.qurry.entropymeasurehadamard attribute)": [[38, "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard.short_name", false]], "short_name (qurry.qurrent.randomized_measure.qurry.entropymeasurerandomized attribute)": [[39, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.short_name", false]], "short_name (qurry.qurrent.randomized_measure_v1.qurry.entropymeasurerandomizedv1 attribute)": [[40, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.short_name", false]], "short_name (qurry.qurries.magnet_square.qurry.magnetsquare attribute)": [[41, "qurry.qurries.magnet_square.qurry.MagnetSquare.short_name", false]], "short_name (qurry.qurries.magnet_square_z.qurry.zdirmagnetsquare attribute)": [[42, "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare.short_name", false]], "short_name (qurry.qurries.samplingqurry.qurry.qurryv9 attribute)": [[44, "qurry.qurries.samplingqurry.qurry.QurryV9.short_name", false]], "short_name (qurry.qurries.string_operator.qurry.stringoperator attribute)": [[45, "qurry.qurries.string_operator.qurry.StringOperator.short_name", false]], "short_name (qurry.qurries.wavesqurry.qurry.wavesexecuter attribute)": [[47, "qurry.qurries.wavesqurry.qurry.WavesExecuter.short_name", false]], "short_name (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.short_name", false]], "shorten_name() (in module qurry.tools.backend.utils)": [[85, "qurry.tools.backend.utils.shorten_name", false]], "shot_counts_selected_clreg_checker_pyrust() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.shot_counts_selected_clreg_checker_pyrust", false]], "shots (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.shots", false]], "shots (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysisinput attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput.shots", false]], "shots (qurry.qurrent.classical_shadow.analysis.suanalysisinput attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.shots", false]], "shots (qurry.qurrent.randomized_measure.analysis.emranalysisinput attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.shots", false]], "shots (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysisinput attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput.shots", false]], "shots (qurry.qurries.magnet_square.analysis.msanalysiscontent attribute)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent.shots", false]], "shots (qurry.qurries.magnet_square_z.analysis.zdirmsanalysiscontent attribute)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent.shots", false]], "shots (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.shots", false]], "shots (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.shots", false]], "shots (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.shots", false]], "side_product (qurry.qurrium.experiment.beforewards.before attribute)": [[60, "qurry.qurrium.experiment.beforewards.Before.side_product", false]], "side_product_fields (qurry.qurrech.hadamard_test.analysis.echolistenhadamardanalysis property)": [[34, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurrech.randomized_measure.analysis.echolistenrandomizedanalysis property)": [[35, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurrech.randomized_measure_v1.analysis.echolistenrandomizedv1analysis property)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis.side_product_fields", false]], "side_product_fields (qurry.qurrent.classical_shadow.analysis.shadowunveilanalysis property)": [[37, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurrent.hadamard_test.analysis.entropymeasurehadamardanalysis property)": [[38, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurrent.randomized_measure.analysis.entropymeasurerandomizedanalysis property)": [[39, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurrent.randomized_measure_v1.analysis.entropymeasurerandomizedv1analysis property)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis.side_product_fields", false]], "side_product_fields (qurry.qurries.magnet_square.analysis.magnetsquareanalysis property)": [[41, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurries.magnet_square_z.analysis.zdirmagnetsquareanalysis property)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurries.samplingqurry.analysis.qurryanalysis property)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurries.string_operator.analysis.stringoperatoranalysis property)": [[45, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurries.wavesqurry.analysis.wavesexecuteranalysis property)": [[47, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis.side_product_fields", false]], "side_product_fields (qurry.qurrium.analysis.analysis.analysisprototype property)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.side_product_fields", false]], "single_counts_recount() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.single_counts_recount", false]], "single_counts_recount_pyrust() (in module qurry.process.utils.counts_process)": [[33, "qurry.process.utils.counts_process.single_counts_recount_pyrust", false]], "single_trace_rho_by_einsum_ij_ji() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.single_trace_rho_by_einsum_ij_ji", false]], "single_trace_rho_by_trace_of_matmul() (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.single_trace_rho_by_trace_of_matmul", false]], "singlet (class in qurry.recipe.simple.intracell)": [[83, "qurry.recipe.simple.intracell.Singlet", false]], "singletracerhomethod (in module qurry.process.classical_shadow.matrix_calcution)": [[17, "qurry.process.classical_shadow.matrix_calcution.SingleTraceRhoMethod", false]], "skipkeys (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.skipkeys", false]], "soanalysiscontent (class in qurry.qurries.string_operator.analysis)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent", false]], "soanalysisinput (class in qurry.qurries.string_operator.analysis)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisInput", false]], "solve_p() (in module qurry.process.randomized_measure.entangled_entropy.error_mitigation)": [[26, "qurry.process.randomized_measure.entangled_entropy.error_mitigation.solve_p", false]], "sort_hashable_ahead() (in module qurry.capsule.jsonablize)": [[3, "qurry.capsule.jsonablize.sort_hashable_ahead", false]], "sort_keys (qurry.capsule.utils.jsondumpargs attribute)": [[6, "qurry.capsule.utils.JSONDumpArgs.sort_keys", false]], "source (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.source", false]], "source (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.source", false]], "source (qurry.process.randomized_measure.entangled_entropy_v1.container.existingallsystemsource attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.ExistingAllSystemSource.source", false]], "specificanalsisargs (in module qurry.declare.qurrium)": [[7, "qurry.declare.qurrium.SpecificAnalsisArgs", false]], "starmap() (qurry.tools.parallelmanager.parallelmanager method)": [[89, "qurry.tools.parallelmanager.ParallelManager.starmap", false]], "state (qurry.recipe.simple.intracell.intracell property)": [[83, "qurry.recipe.simple.intracell.Intracell.state", false]], "statesheet() (qurry.qurrium.analysis.analysis.analysisprototype method)": [[48, "qurry.qurrium.analysis.analysis.AnalysisPrototype.statesheet", false]], "statesheet() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.statesheet", false]], "statesheet() (qurry.tools.backend.backend_manager.backendwrapper method)": [[85, "qurry.tools.backend.backend_manager.BackendWrapper.statesheet", false]], "str_op (qurry.qurries.string_operator.analysis.soanalysiscontent attribute)": [[45, "qurry.qurries.string_operator.analysis.SOAnalysisContent.str_op", false]], "str_op (qurry.qurries.string_operator.arguments.stringoperatorarguments attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments.str_op", false]], "str_op (qurry.qurries.string_operator.arguments.stringoperatormeasureargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs.str_op", false]], "str_op (qurry.qurries.string_operator.arguments.stringoperatoroutputargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorOutputArgs.str_op", false]], "string_operator (in module qurry.qurries.string_operator.utils)": [[45, "qurry.qurries.string_operator.utils.STRING_OPERATOR", false]], "string_operator_core() (in module qurry.process.string_operator.strop_core)": [[32, "qurry.process.string_operator.strop_core.string_operator_core", false]], "string_operator_order() (in module qurry.process.string_operator.string_operator)": [[32, "qurry.process.string_operator.string_operator.string_operator_order", false]], "stringoperator (class in qurry.process.string_operator.string_operator)": [[32, "qurry.process.string_operator.string_operator.StringOperator", false]], "stringoperator (class in qurry.qurries.string_operator.qurry)": [[45, "qurry.qurries.string_operator.qurry.StringOperator", false]], "stringoperatoranalysis (class in qurry.qurries.string_operator.analysis)": [[45, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis", false]], "stringoperatoranalyzeargs (class in qurry.qurries.string_operator.arguments)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorAnalyzeArgs", false]], "stringoperatorarguments (class in qurry.qurries.string_operator.arguments)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorArguments", false]], "stringoperatordirection (in module qurry.qurries.string_operator.utils)": [[45, "qurry.qurries.string_operator.utils.StringOperatorDirection", false]], "stringoperatorexperiment (class in qurry.qurries.string_operator.experiment)": [[45, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", false]], "stringoperatorlib (class in qurry.qurries.string_operator.utils)": [[45, "qurry.qurries.string_operator.utils.StringOperatorLib", false]], "stringoperatorlibtype (in module qurry.qurries.string_operator.utils)": [[45, "qurry.qurries.string_operator.utils.StringOperatorLibType", false]], "stringoperatormeasureargs (class in qurry.qurries.string_operator.arguments)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs", false]], "stringoperatoroutputargs (class in qurry.qurries.string_operator.arguments)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorOutputArgs", false]], "stringoperatorunits (in module qurry.qurries.string_operator.utils)": [[45, "qurry.qurries.string_operator.utils.StringOperatorUnits", false]], "suanalysiscontent (class in qurry.qurrent.classical_shadow.analysis)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", false]], "suanalysisinput (class in qurry.qurrent.classical_shadow.analysis)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", false]], "summoner_id (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.summoner_id", false]], "summoner_id (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.summoner_id", false]], "summoner_id (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.summoner_id", false]], "summoner_id (qurry.qurrium.multimanager.multimanager.multimanager property)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.summoner_id", false]], "summoner_name (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.summoner_name", false]], "summoner_name (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.summoner_name", false]], "summoner_name (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.summoner_name", false]], "summoner_name (qurry.qurrium.multimanager.multimanager.multimanager property)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.summoner_name", false]], "summonner_check() (in module qurry.qurrium.experiment.utils)": [[64, "qurry.qurrium.experiment.utils.summonner_check", false]], "sync() (qurry.capsule.mori.gitsync.gitsynccontrol method)": [[4, "qurry.capsule.mori.gitsync.GitSyncControl.sync", false]], "taglist (class in qurry.capsule.mori.taglist)": [[4, "qurry.capsule.mori.taglist.TagList", false]], "taglist.paramscontrol (class in qurry.capsule.mori.taglist)": [[4, "qurry.capsule.mori.taglist.TagList.ParamsControl", false]], "taglistkeyable (in module qurry.qurrium.multimanager.beforewards)": [[67, "qurry.qurrium.multimanager.beforewards.TagListKeyable", false]], "taglisttakenotiterablewarning": [[0, "qurry.capsule.exception.TagListTakeNotIterableWarning", false]], "tags (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.tags", false]], "tags (qurry.qurrium.multimanager.arguments.multicommonparams attribute)": [[66, "qurry.qurrium.multimanager.arguments.MultiCommonparams.tags", false]], "taking_time (qurry.process.classical_shadow.container.classicalshadowbasic attribute)": [[14, "qurry.process.classical_shadow.container.ClassicalShadowBasic.taking_time", false]], "taking_time (qurry.process.magnet_square.magnet_square.magnetsquare attribute)": [[25, "qurry.process.magnet_square.magnet_square.MagnetSquare.taking_time", false]], "taking_time (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresult attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult.taking_time", false]], "taking_time (qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.wavefuctionoverlapresult attribute)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult.taking_time", false]], "taking_time (qurry.qurrech.randomized_measure.analysis.elranalysiscontent attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.taking_time", false]], "taking_time (qurry.qurrent.classical_shadow.analysis.suanalysiscontent attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.taking_time", false]], "taking_time (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.taking_time", false]], "taking_time (qurry.qurries.magnet_square.analysis.msanalysiscontent attribute)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent.taking_time", false]], "taking_time (qurry.qurries.magnet_square_z.analysis.zdirmsanalysiscontent attribute)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent.taking_time", false]], "taking_time_all_sys (qurry.process.randomized_measure.entangled_entropy.container.entangledentropyresultmitigated attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated.taking_time_all_sys", false]], "taking_time_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfo attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.taking_time_all_sys", false]], "taking_time_all_sys (qurry.process.randomized_measure.entangled_entropy.container.existedallsysteminfoinput attribute)": [[26, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput.taking_time_all_sys", false]], "taking_time_all_sys (qurry.qurrent.randomized_measure.analysis.emranalysiscontent attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.taking_time_all_sys", false]], "takingtime (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropycomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex.takingTime", false]], "takingtime (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.takingTime", false]], "takingtime (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysiscontent attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.takingTime", false]], "takingtime (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.takingTime", false]], "takingtimeallsys (qurry.process.randomized_measure.entangled_entropy_v1.container.randomizedentangledentropymitigatedcomplex attribute)": [[27, "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex.takingTimeAllSys", false]], "takingtimeallsys (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysiscontent attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.takingTimeAllSys", false]], "talalalala() (in module qurry.capsule)": [[2, "qurry.capsule.talalalala", false]], "tales (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.tales", false]], "tales_reports (qurry.qurrium.experiment.export.export attribute)": [[62, "qurry.qurrium.experiment.export.Export.tales_reports", false]], "target (qurry.qurrium.experiment.beforewards.before attribute)": [[60, "qurry.qurrium.experiment.beforewards.Before.target", false]], "target_keys (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.target_keys", false]], "target_qasm (qurry.qurrium.experiment.beforewards.before attribute)": [[60, "qurry.qurrium.experiment.beforewards.Before.target_qasm", false]], "tarlocation (qurry.qurrium.utils.iocontrol.iocomplex attribute)": [[78, "qurry.qurrium.utils.iocontrol.IOComplex.tarLocation", false]], "tarname (qurry.qurrium.utils.iocontrol.iocomplex attribute)": [[78, "qurry.qurrium.utils.iocontrol.IOComplex.tarName", false]], "test_bit_slice() (in module qurry.process.utils.test)": [[33, "qurry.process.utils.test.test_bit_slice", false]], "times (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.times", false]], "times (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.times", false]], "times (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.times", false]], "times (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1arguments attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.times", false]], "times (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1measureargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs.times", false]], "times (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1outputargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1OutputArgs.times", false]], "times (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.times", false]], "times (qurry.qurrent.classical_shadow.arguments.shadowunveilmeasureargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs.times", false]], "times (qurry.qurrent.classical_shadow.arguments.shadowunveiloutputargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs.times", false]], "times (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.times", false]], "times (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedmeasureargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs.times", false]], "times (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedoutputargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs.times", false]], "times (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1arguments attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.times", false]], "times (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1measureargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs.times", false]], "times (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1outputargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1OutputArgs.times", false]], "topologicalparamagnet (class in qurry.recipe.simple.paramagnet)": [[83, "qurry.recipe.simple.paramagnet.TopologicalParamagnet", false]], "tqdm (class in qurry.tools.progressbar)": [[90, "qurry.tools.progressbar.tqdm", false]], "trace_rho_square() (in module qurry.process.classical_shadow.classical_shadow)": [[13, "qurry.process.classical_shadow.classical_shadow.trace_rho_square", false]], "trace_rho_square_core() (in module qurry.process.classical_shadow.trace_expect_process)": [[21, "qurry.process.classical_shadow.trace_expect_process.trace_rho_square_core", false]], "traceless() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.traceless", false]], "tracerhomethod (in module qurry.process.classical_shadow.trace_expect_process)": [[21, "qurry.process.classical_shadow.trace_expect_process.TraceRhoMethod", false]], "transpile_args (qurry.qurrium.experiment.arguments.commonparams attribute)": [[59, "qurry.qurrium.experiment.arguments.Commonparams.transpile_args", false]], "transpileargs (class in qurry.declare.transpile)": [[9, "qurry.declare.transpile.TranspileArgs", false]], "trivialparamagnet (class in qurry.recipe.simple.paramagnet)": [[83, "qurry.recipe.simple.paramagnet.TrivialParamagnet", false]], "tuple_str_parse() (in module qurry.capsule.mori.taglist)": [[4, "qurry.capsule.mori.taglist.tuple_str_parse", false]], "twobody (class in qurry.recipe.n_body)": [[82, "qurry.recipe.n_body.TwoBody", false]], "txt() (in module qurry.capsule.hoshi.hoshi)": [[1, "qurry.capsule.hoshi.hoshi.txt", false]], "txt() (qurry.capsule.hoshi.hoshi.hoshi method)": [[1, "qurry.capsule.hoshi.hoshi.Hoshi.txt", false]], "u_m_gates (in module qurry.process.classical_shadow.unitary_set)": [[22, "qurry.process.classical_shadow.unitary_set.U_M_GATES", false]], "u_m_matrix (in module qurry.process.classical_shadow.unitary_set)": [[22, "qurry.process.classical_shadow.unitary_set.U_M_MATRIX", false]], "ultimate_answer (qurry.qurries.samplingqurry.analysis.qurryanalysiscontent attribute)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent.ultimate_answer", false]], "ultimate_answer (qurry.qurries.wavesqurry.analysis.weanalysiscontent attribute)": [[47, "qurry.qurries.wavesqurry.analysis.WEAnalysisContent.ultimate_answer", false]], "ultimate_question (qurry.qurries.samplingqurry.analysis.qurryanalysisinput attribute)": [[44, "qurry.qurries.samplingqurry.analysis.QurryAnalysisInput.ultimate_question", false]], "ultimate_question (qurry.qurries.wavesqurry.analysis.weanalysisinput attribute)": [[47, "qurry.qurries.wavesqurry.analysis.WEAnalysisInput.ultimate_question", false]], "unconfiguredwarning": [[10, "qurry.exceptions.UnconfiguredWarning", false]], "unitary_full_cover_check() (in module qurry.qurrech.randomized_measure.utils)": [[35, "qurry.qurrech.randomized_measure.utils.unitary_full_cover_check", false]], "unitary_loc (qurry.qurrech.randomized_measure_v1.analysis.elrv1analysisinput attribute)": [[36, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput.unitary_loc", false]], "unitary_loc (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1arguments attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.unitary_loc", false]], "unitary_loc (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1measureargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs.unitary_loc", false]], "unitary_loc (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1outputargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1OutputArgs.unitary_loc", false]], "unitary_loc (qurry.qurrent.classical_shadow.arguments.shadowunveilmeasureargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs.unitary_loc", false]], "unitary_loc (qurry.qurrent.classical_shadow.arguments.shadowunveiloutputargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs.unitary_loc", false]], "unitary_loc (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedmeasureargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs.unitary_loc", false]], "unitary_loc (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedoutputargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs.unitary_loc", false]], "unitary_loc (qurry.qurrent.randomized_measure_v1.analysis.emrv1analysisinput attribute)": [[40, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput.unitary_loc", false]], "unitary_loc (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1arguments attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.unitary_loc", false]], "unitary_loc (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1measureargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs.unitary_loc", false]], "unitary_loc (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1outputargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1OutputArgs.unitary_loc", false]], "unitary_loc_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.unitary_loc_1", false]], "unitary_loc_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.unitary_loc_1", false]], "unitary_loc_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.unitary_loc_2", false]], "unitary_loc_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.unitary_loc_2", false]], "unitary_loc_not_cover_measure (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.unitary_loc_not_cover_measure", false]], "unitary_loc_not_cover_measure (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedoutputargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs.unitary_loc_not_cover_measure", false]], "unitary_loc_not_cover_measure (qurry.qurrent.classical_shadow.arguments.shadowunveilmeasureargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs.unitary_loc_not_cover_measure", false]], "unitary_loc_not_cover_measure (qurry.qurrent.classical_shadow.arguments.shadowunveiloutputargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs.unitary_loc_not_cover_measure", false]], "unitary_loc_not_cover_measure (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedmeasureargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs.unitary_loc_not_cover_measure", false]], "unitary_loc_not_cover_measure (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedoutputargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs.unitary_loc_not_cover_measure", false]], "unitary_located (qurry.qurrent.classical_shadow.analysis.suanalysisinput attribute)": [[37, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.unitary_located", false]], "unitary_located (qurry.qurrent.classical_shadow.arguments.shadowunveilarguments attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.unitary_located", false]], "unitary_located (qurry.qurrent.randomized_measure.analysis.emranalysisinput attribute)": [[39, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.unitary_located", false]], "unitary_located (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedarguments attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.unitary_located", false]], "unitary_located_mapping_1 (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.unitary_located_mapping_1", false]], "unitary_located_mapping_1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.unitary_located_mapping_1", false]], "unitary_located_mapping_2 (qurry.qurrech.randomized_measure.analysis.elranalysisinput attribute)": [[35, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.unitary_located_mapping_2", false]], "unitary_located_mapping_2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedarguments attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.unitary_located_mapping_2", false]], "unitary_operator (qurry.qurries.magnet_square.analysis.msanalysiscontent attribute)": [[41, "qurry.qurries.magnet_square.analysis.MSAnalysisContent.unitary_operator", false]], "unitary_operator (qurry.qurries.magnet_square.arguments.magnetsquarearguments attribute)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments.unitary_operator", false]], "unitary_operator (qurry.qurries.magnet_square.arguments.magnetsquaremeasureargs attribute)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareMeasureArgs.unitary_operator", false]], "unitary_operator (qurry.qurries.magnet_square.arguments.magnetsquareoutputargs attribute)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareOutputArgs.unitary_operator", false]], "unproven_feature() (in module qurry.tools.except_decorator)": [[88, "qurry.tools.except_decorator.unproven_feature", false]], "update_save_location() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.update_save_location", false]], "v5_to_v7_field_transpose() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.v5_to_v7_field_transpose", false]], "v5_to_v7_field_transpose() (in module qurry.qurrium.experiment.beforewards)": [[60, "qurry.qurrium.experiment.beforewards.v5_to_v7_field_transpose", false]], "v5_to_v7_field_transpose() (in module qurry.qurrium.multimanager.arguments)": [[66, "qurry.qurrium.multimanager.arguments.v5_to_v7_field_transpose", false]], "v7_to_v11_field_transpose() (in module qurry.qurrium.experiment.beforewards)": [[60, "qurry.qurrium.experiment.beforewards.v7_to_v11_field_transpose", false]], "v7_to_v9_field_transpose() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.v7_to_v9_field_transpose", false]], "value_parse() (in module qurry.capsule.jsonablize)": [[3, "qurry.capsule.jsonablize.value_parse", false]], "version_check() (in module qurry.tools.backend.env_check)": [[85, "qurry.tools.backend.env_check.version_check", false]], "very_easy_chunk_distribution() (in module qurry.qurrium.utils.chunk)": [[74, "qurry.qurrium.utils.chunk.very_easy_chunk_distribution", false]], "very_easy_chunk_size() (in module qurry.qurrium.utils.chunk)": [[74, "qurry.qurrium.utils.chunk.very_easy_chunk_size", false]], "wave (qurry.qurrent.classical_shadow.arguments.shadowunveilmeasureargs attribute)": [[37, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs.wave", false]], "wave (qurry.qurrent.hadamard_test.arguments.entropymeasurehadamardmeasureargs attribute)": [[38, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardMeasureArgs.wave", false]], "wave (qurry.qurrent.randomized_measure.arguments.entropymeasurerandomizedmeasureargs attribute)": [[39, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs.wave", false]], "wave (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1measureargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs.wave", false]], "wave (qurry.qurries.magnet_square.arguments.magnetsquaremeasureargs attribute)": [[41, "qurry.qurries.magnet_square.arguments.MagnetSquareMeasureArgs.wave", false]], "wave (qurry.qurries.magnet_square_z.arguments.zdirmagnetsquaremeasureargs attribute)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareMeasureArgs.wave", false]], "wave (qurry.qurries.samplingqurry.arguments.qurrymeasureargs attribute)": [[44, "qurry.qurries.samplingqurry.arguments.QurryMeasureArgs.wave", false]], "wave (qurry.qurries.string_operator.arguments.stringoperatormeasureargs attribute)": [[45, "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs.wave", false]], "wave1 (qurry.qurrech.hadamard_test.arguments.echolistenhadamardmeasureargs attribute)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardMeasureArgs.wave1", false]], "wave1 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.wave1", false]], "wave1 (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1measureargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs.wave1", false]], "wave2 (qurry.qurrech.hadamard_test.arguments.echolistenhadamardmeasureargs attribute)": [[34, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardMeasureArgs.wave2", false]], "wave2 (qurry.qurrech.randomized_measure.arguments.echolistenrandomizedmeasureargs attribute)": [[35, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs.wave2", false]], "wave2 (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1measureargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs.wave2", false]], "wave_container_maker() (in module qurry.qurrium.container.waves_dynamic)": [[55, "qurry.qurrium.container.waves_dynamic.wave_container_maker", false]], "wave_key_to_target_keys() (in module qurry.qurrium.experiment.arguments)": [[59, "qurry.qurrium.experiment.arguments.wave_key_to_target_keys", false]], "wavecontainer (class in qurry.qurrium.container.waves_static)": [[56, "qurry.qurrium.container.waves_static.WaveContainer", false]], "wavefuctionoverlapresult (class in qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2)": [[29, "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult", false]], "wavefunctionoverlap() (in module qurry.qurrech)": [[11, "qurry.qurrech.WaveFunctionOverlap", false]], "waves (qurry.qurrium.qurrium.qurriumprototype attribute)": [[72, "qurry.qurrium.qurrium.QurriumPrototype.waves", false]], "wavesexecuter (class in qurry.qurries.wavesqurry.qurry)": [[47, "qurry.qurries.wavesqurry.qurry.WavesExecuter", false]], "wavesexecuteranalysis (class in qurry.qurries.wavesqurry.analysis)": [[47, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis", false]], "wavesexecuteranalyzeargs (class in qurry.qurries.wavesqurry.arguments)": [[47, "qurry.qurries.wavesqurry.arguments.WavesExecuterAnalyzeArgs", false]], "wavesexecuterarguments (class in qurry.qurries.wavesqurry.arguments)": [[47, "qurry.qurries.wavesqurry.arguments.WavesExecuterArguments", false]], "wavesexecuterexperiment (class in qurry.qurries.wavesqurry.experiment)": [[47, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", false]], "wavesexecutermeasureargs (class in qurry.qurries.wavesqurry.arguments)": [[47, "qurry.qurries.wavesqurry.arguments.WavesExecuterMeasureArgs", false]], "wavesexecuteroutputargs (class in qurry.qurries.wavesqurry.arguments)": [[47, "qurry.qurries.wavesqurry.arguments.WavesExecuterOutputArgs", false]], "weanalysiscontent (class in qurry.qurries.wavesqurry.analysis)": [[47, "qurry.qurries.wavesqurry.analysis.WEAnalysisContent", false]], "weanalysisinput (class in qurry.qurries.wavesqurry.analysis)": [[47, "qurry.qurries.wavesqurry.analysis.WEAnalysisInput", false]], "where() (qurry.qurrium.container.experiments_wrapper.experimentcontainerwrapper method)": [[50, "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper.where", false]], "workers_distribution() (in module qurry.tools.parallelmanager)": [[89, "qurry.tools.parallelmanager.workers_distribution", false]], "workers_num (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1analyzeargs attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs.workers_num", false]], "workers_num (qurry.qurrech.randomized_measure_v1.arguments.echolistenrandomizedv1arguments attribute)": [[36, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.workers_num", false]], "workers_num (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1analyzeargs attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs.workers_num", false]], "workers_num (qurry.qurrent.randomized_measure_v1.arguments.entropymeasurerandomizedv1arguments attribute)": [[40, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.workers_num", false]], "worst_accuracy_predict_epsilon_calc() (in module qurry.process.classical_shadow.expectation_process)": [[15, "qurry.process.classical_shadow.expectation_process.worst_accuracy_predict_epsilon_calc", false]], "write() (qurry.qurrium.container.multiquantity.quantitycontainer method)": [[53, "qurry.qurrium.container.multiquantity.QuantityContainer.write", false]], "write() (qurry.qurrium.experiment.experiment.experimentprototype method)": [[61, "qurry.qurrium.experiment.experiment.ExperimentPrototype.write", false]], "write() (qurry.qurrium.experiment.export.export method)": [[62, "qurry.qurrium.experiment.export.Export.write", false]], "write() (qurry.qurrium.multimanager.multimanager.multimanager method)": [[69, "qurry.qurrium.multimanager.multimanager.MultiManager.write", false]], "your_need_earbuds_then_call_this_function() (in module qurry.capsule)": [[2, "qurry.capsule.your_need_earbuds_then_call_this_function", false]], "z_dir_magnet_square() (in module qurry.process.magnet_square.magnet_square)": [[25, "qurry.process.magnet_square.magnet_square.z_dir_magnet_square", false]], "z_dir_magnetic_square_core() (in module qurry.process.magnet_square.magsq_core)": [[25, "qurry.process.magnet_square.magsq_core.z_dir_magnetic_square_core", false]], "zdirmagnetsquare (class in qurry.qurries.magnet_square_z.qurry)": [[42, "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare", false]], "zdirmagnetsquareanalysis (class in qurry.qurries.magnet_square_z.analysis)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis", false]], "zdirmagnetsquareanalyzeargs (class in qurry.qurries.magnet_square_z.arguments)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareAnalyzeArgs", false]], "zdirmagnetsquarearguments (class in qurry.qurries.magnet_square_z.arguments)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments", false]], "zdirmagnetsquareexperiment (class in qurry.qurries.magnet_square_z.experiment)": [[42, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", false]], "zdirmagnetsquaremeasureargs (class in qurry.qurries.magnet_square_z.arguments)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareMeasureArgs", false]], "zdirmagnetsquareoutputargs (class in qurry.qurries.magnet_square_z.arguments)": [[42, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareOutputArgs", false]], "zdirmsanalysiscontent (class in qurry.qurries.magnet_square_z.analysis)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent", false]], "zdirmsanalysisinput (class in qurry.qurries.magnet_square_z.analysis)": [[42, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisInput", false]], "zy (qurry.qurries.string_operator.utils.stringoperatorlib attribute)": [[45, "qurry.qurries.string_operator.utils.StringOperatorLib.zy", false]]}, "objects": {"qurry": [[2, 0, 0, 1, "capsule", ""], [11, 0, 0, 1, "declare", ""], [10, 0, 0, 1, "exceptions", ""], [11, 0, 0, 1, "process", ""], [11, 0, 0, 1, "qurrech", ""], [11, 0, 0, 1, "qurrent", ""], [11, 0, 0, 1, "qurries", ""], [11, 0, 0, 1, "qurrium", ""], [11, 0, 0, 1, "recipe", ""], [11, 0, 0, 1, "tools", ""]], "qurry.capsule": [[2, 1, 1, 0, "CapSule", "Why there is a link to the song \"CapSule\" by Mori Calliope and Hoshimachi Suisei? This package is definitely not related to any Vtuber, right? It must be a coincidence. :3"], [2, 1, 1, 0, "dead_beats_lurking_now", "Dead Beats Lurking Now~ Dead Beats Lurking Now~ Dead Beats Lurking Now~"], [0, 0, 0, 1, "exception", ""], [2, 1, 1, 0, "guh", "Guh~"], [1, 0, 0, 1, "hoshi", ""], [3, 0, 0, 1, "jsonablize", ""], [4, 0, 0, 1, "mori", ""], [5, 0, 0, 1, "quick", ""], [2, 1, 1, 0, "random", ""], [2, 1, 1, 0, "talalalala", "Talalalala~"], [6, 0, 0, 1, "utils", ""], [2, 1, 1, 0, "your_need_earbuds_then_call_this_function", "I have warned you. You need earbuds to call this function."]], "qurry.capsule.exception": [[0, 2, 1, 0, "CapSuleError", "Base class for errors raised by capsule."], [0, 2, 1, 0, "CapSuleValuedError", "ValueErrors raised by capsule."], [0, 2, 1, 0, "CapSuleWarning", "Base class for warning raised by capsule."], [0, 2, 1, 0, "TagListTakeNotIterableWarning", "Warning raised when the input of take() is not iterable."]], "qurry.capsule.exception.CapSuleError.__init__": [[0, 3, 2, "qurry.capsule.exception.CapSuleError", "message", "Base class for errors raised by capsule."]], "qurry.capsule.exception.CapSuleValuedError.__init__": [[0, 3, 2, "qurry.capsule.exception.CapSuleValuedError", "message", "ValueErrors raised by capsule."]], "qurry.capsule.exception.CapSuleWarning.__init__": [[0, 3, 2, "qurry.capsule.exception.CapSuleWarning", "message", "Base class for warning raised by capsule."]], "qurry.capsule.exception.TagListTakeNotIterableWarning.__init__": [[0, 3, 2, "qurry.capsule.exception.TagListTakeNotIterableWarning", "message", "Warning raised when the input of take() is not iterable."]], "qurry.capsule.hoshi": [[1, 0, 0, 1, "hoshi", ""], [1, 0, 0, 1, "repr_modify", ""]], "qurry.capsule.hoshi.hoshi": [[1, 4, 1, 0, "Hoshi", "Hoshi - An Organized Printer"], [1, 1, 1, 0, "divider", "Print a divider."], [1, 1, 1, 0, "hnprint", "Print a title."], [1, 1, 1, 0, "itemize", "Print a listing item."], [1, 1, 1, 0, "txt", "Print a text."]], "qurry.capsule.hoshi.hoshi.Hoshi": [[1, 4, 1, 0, "ConfigContainer", "Config container for Hoshi."], [1, 7, 1, 0, "divider", "Add a divider."], [1, 7, 1, 0, "h1", "Add a h1 title."], [1, 7, 1, 0, "h2", "Add a h2 title."], [1, 7, 1, 0, "h3", "Add a h3 title."], [1, 7, 1, 0, "h4", "Add a h4 title."], [1, 7, 1, 0, "h5", "Add a h5 title."], [1, 7, 1, 0, "h6", "Add a h6 title."], [1, 7, 1, 0, "itemize", "Add a listing item."], [1, 5, 1, 0, "lines", "Return the print lines."], [1, 7, 1, 0, "newline", "Add a new line."], [1, 7, 1, 0, "print", "Print the content."], [1, 7, 1, 0, "txt", "Add a text."]], "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer": [[1, 5, 1, 0, "divider_fields", "Return a list of divider fields."], [1, 6, 1, 0, "divider_length", "Alias for field number 9"], [1, 6, 1, 0, "hint_itemize", "Alias for field number 8"], [1, 5, 1, 0, "itemize_fields", "Return a list of itemize fields."], [1, 6, 1, 0, "listing_itemize", "Alias for field number 1"], [1, 6, 1, 0, "listing_level", "Alias for field number 0"], [1, 6, 1, 0, "ljust_description_filler", "Alias for field number 3"], [1, 6, 1, 0, "ljust_description_len", "Alias for field number 2"], [1, 6, 1, 0, "ljust_value_filler", "Alias for field number 5"], [1, 6, 1, 0, "ljust_value_len", "Alias for field number 4"], [1, 6, 1, 0, "ljust_value_max_len", "Alias for field number 6"], [1, 6, 1, 0, "max_value_len", "Alias for field number 7"]], "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer.__init__": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "divider_length", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "hint_itemize", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "listing_itemize", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "listing_level", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "ljust_description_filler", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "ljust_description_len", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "ljust_value_filler", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "ljust_value_len", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "ljust_value_max_len", "Config container for Hoshi."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.ConfigContainer", "max_value_len", "Config container for Hoshi."]], "qurry.capsule.hoshi.hoshi.Hoshi.__init__": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi", "kwargs", "Hoshi - An Organized Printer"], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi", "name", "Hoshi - An Organized Printer"], [1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi", "raw", "Hoshi - An Organized Printer"]], "qurry.capsule.hoshi.hoshi.Hoshi.divider": [[1, 3, 2, 0, "length", "Length of the divider."]], "qurry.capsule.hoshi.hoshi.Hoshi.h1": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.h1", "text", "Add a h1 title."]], "qurry.capsule.hoshi.hoshi.Hoshi.h2": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.h2", "text", "Add a h2 title."]], "qurry.capsule.hoshi.hoshi.Hoshi.h3": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.h3", "text", "Add a h3 title."]], "qurry.capsule.hoshi.hoshi.Hoshi.h4": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.h4", "text", "Add a h4 title."]], "qurry.capsule.hoshi.hoshi.Hoshi.h5": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.h5", "text", "Add a h5 title."]], "qurry.capsule.hoshi.hoshi.Hoshi.h6": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.Hoshi.h6", "text", "Add a h6 title."]], "qurry.capsule.hoshi.hoshi.Hoshi.itemize": [[1, 3, 2, 0, "description", "Description of the item."], [1, 3, 2, 0, "hint", "Hint of the item."], [1, 3, 2, 0, "listing_level", "Listing level."], [1, 3, 2, 0, "value", "Value of the item."]], "qurry.capsule.hoshi.hoshi.Hoshi.newline": [[1, 3, 2, 0, "item", "Item to add."]], "qurry.capsule.hoshi.hoshi.Hoshi.txt": [[1, 3, 2, 0, "listing_level", "Listing level."], [1, 3, 2, 0, "text", "Text to print."]], "qurry.capsule.hoshi.hoshi.divider": [[1, 3, 2, 0, "length", "Length of the divider."], [1, 3, 2, 0, "raw_input", "If True, return a dict."]], "qurry.capsule.hoshi.hoshi.hnprint": [[1, 3, 2, 0, "heading", "Heading level."], [1, 3, 2, 0, "raw_input", "If True, return a dict."], [1, 3, 2, 0, "title", "tilte of the section."]], "qurry.capsule.hoshi.hoshi.itemize": [[1, 3, 2, "qurry.capsule.hoshi.hoshi.itemize", "description", "Print a listing item."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.itemize", "export_len", "Print a listing item."], [1, 3, 2, "qurry.capsule.hoshi.hoshi.itemize", "independent_newline", "Print a listing item."]], "qurry.capsule.hoshi.hoshi.txt": [[1, 3, 2, 0, "listing_level", "Listing level."], [1, 3, 2, 0, "raw_input", "If True, return a dict."], [1, 3, 2, 0, "text", "Text to print."]], "qurry.capsule.hoshi.repr_modify": [[1, 1, 1, 0, "easy_repr_modify_wrapper", "Wrapper for easy representation modification."]], "qurry.capsule.hoshi.repr_modify.easy_repr_modify_wrapper": [[1, 3, 2, 0, "repr_content", "The content of the representation. If it is a string, it will be the representation. If it is a function, it will be the representation function."]], "qurry.capsule.jsonablize": [[3, 1, 1, 0, "key_parse", "Make key JSON-allowable. If a key is not allowed by dumps(), then return its str representation."], [3, 1, 1, 0, "parse", "Make a Python object JSON-allowable."], [3, 1, 1, 0, "quickJSON", "Configurable quick JSON export."], [3, 1, 1, 0, "sort_hashable_ahead", "Make hashable values be the ahead in dictionary.\""], [3, 1, 1, 0, "value_parse", "Make value JSON-allowable. If a value is not allowed by dumps(), then return its str representation."]], "qurry.capsule.jsonablize.key_parse": [[3, 3, 2, 0, "k", "Key."]], "qurry.capsule.jsonablize.parse": [[3, 3, 2, 0, "o", "Python object."]], "qurry.capsule.jsonablize.quickJSON": [[3, 3, 2, 0, "content", "Content wants to be written."], [3, 3, 2, 0, "encoding", "Encoding method."], [3, 3, 2, 0, "filename", "Filename of the file."], [3, 3, 2, 0, "indent", "Indent length for json."], [3, 3, 2, "qurry.capsule.jsonablize.quickJSON", "jsonable", "Configurable quick JSON export."], [3, 3, 2, 0, "mode", "Mode for open() function."], [3, 3, 2, 0, "mute", "Mute the exportation."], [3, 3, 2, 0, "save_location", "Location of files."]], "qurry.capsule.jsonablize.sort_hashable_ahead": [[3, 3, 2, 0, "o", "Unsorted dictionary."]], "qurry.capsule.jsonablize.value_parse": [[3, 3, 2, 0, "v", "Value."]], "qurry.capsule.mori": [[4, 0, 0, 1, "gitsync", ""], [4, 0, 0, 1, "taglist", ""]], "qurry.capsule.mori.gitsync": [[4, 4, 1, 0, "GitSyncControl", "A gitignore file generator. A quick way to create .gitignore"]], "qurry.capsule.mori.gitsync.GitSyncControl": [[4, 7, 1, 0, "clear_duplicates", "Clear duplicate items in .gitignore."], [4, 7, 1, 0, "comment", "Add comment to .gitignore."], [4, 7, 1, 0, "export", "Export .gitignore"], [4, 7, 1, 0, "ignore", "Add file to ignore from sync."], [4, 7, 1, 0, "load", "Read existed .gitignore"], [4, 7, 1, 0, "sync", "Add file to sync."]], "qurry.capsule.mori.gitsync.GitSyncControl.__init__": [[4, 3, 2, "qurry.capsule.mori.gitsync.GitSyncControl", "iterable", "A gitignore file generator. A quick way to create .gitignore"]], "qurry.capsule.mori.gitsync.GitSyncControl.comment": [[4, 3, 2, 0, "comment", "The comment to be added."]], "qurry.capsule.mori.gitsync.GitSyncControl.export": [[4, 3, 2, 0, "open_args", "The other arguments for open() function. Defaults to None, it will be set to DEFAULT_OPEN_ARGS."], [4, 3, 2, 0, "print_args", "The other arguments for print() function. Defaults to None, it will be set to DEFAULT_PRINT_ARGS."], [4, 3, 2, 0, "save_location", "The location of .gitignore."]], "qurry.capsule.mori.gitsync.GitSyncControl.ignore": [[4, 3, 2, 0, "filename", "Filename."], [4, 3, 2, 0, "force", "Force to add the file to ignore. If the file is already added, then it will be added again. Defaults to False."]], "qurry.capsule.mori.gitsync.GitSyncControl.load": [[4, 3, 2, 0, "open_args", "The other arguments for open() function. Defaults to None, it will be set to the returned valuse of create_open_args() with is_read_only set to True."], [4, 3, 2, 0, "save_location", "The location of .gitignore."], [4, 3, 2, 0, "take_duplicate", "Take duplicate item in .gitignore."]], "qurry.capsule.mori.gitsync.GitSyncControl.sync": [[4, 3, 2, 0, "filename", "Filename."], [4, 3, 2, 0, "force", "Force to add the file to sync. If the file is already added, then it will be added again. Defaults to False."]], "qurry.capsule.mori.taglist": [[4, 4, 1, 0, "TagList", "Specific data structures of Qurrium like dict[str, list[any]]."], [4, 1, 1, 0, "key_tuple_loads", "If a dictionary with string keys which read from json may originally be a python tuple, then transplies as a tuple."], [4, 1, 1, 0, "tuple_str_parse", "Convert tuple strings to real tuple."]], "qurry.capsule.mori.taglist.TagList": [[4, 4, 1, 0, "ParamsControl", "The type of arguments for params_control()"], [4, 7, 1, 0, "all", "Export all values in TagList."], [4, 7, 1, 0, "export", "Export TagList to a file."], [4, 7, 1, 0, "guider", "Append a value to the TagList with a tag."], [4, 7, 1, 0, "params_control", "Handling all arguments."], [4, 6, 1, 0, "protect_keys", "Reserved keys for TagList."], [4, 7, 1, 0, "read", "Read a TagList from a file."]], "qurry.capsule.mori.taglist.TagList.ParamsControl": [[4, 6, 1, 0, "json_dump_args", "The arguments for dump() function."], [4, 6, 1, 0, "open_args", "The arguments for open() function."], [4, 6, 1, 0, "save_location", "The exported location."]], "qurry.capsule.mori.taglist.TagList.ParamsControl.__init__": [[4, 3, 2, "qurry.capsule.mori.taglist.TagList.ParamsControl", "json_dump_args", "The type of arguments for params_control()"], [4, 3, 2, "qurry.capsule.mori.taglist.TagList.ParamsControl", "open_args", "The type of arguments for params_control()"], [4, 3, 2, "qurry.capsule.mori.taglist.TagList.ParamsControl", "save_location", "The type of arguments for params_control()"]], "qurry.capsule.mori.taglist.TagList.__init__": [[4, 3, 2, 0, "name", "The name of this TagList."], [4, 3, 2, "qurry.capsule.mori.taglist.TagList", "o", "Specific data structures of Qurrium like dict[str, list[any]]."], [4, 3, 2, "qurry.capsule.mori.taglist.TagList", "tuple_str_auto_transplie", "Specific data structures of Qurrium like dict[str, list[any]]."]], "qurry.capsule.mori.taglist.TagList.export": [[4, 3, 2, 0, "json_dump_args", "The other arguments for dump() function. Defaults to None, it will be set to DEFAULT_JSON_DUMP_ARGS."], [4, 3, 2, 0, "name", "The file name should be something like \"{name}.{taglist_name}.json\" or \"{taglist_name}.json\" when 'name' is None."], [4, 3, 2, 0, "open_args", "The other arguments for open() function. Defaults to None, it will be set to DEFAULT_OPEN_ARGS."], [4, 3, 2, 0, "save_location", "The location of file."], [4, 3, 2, 0, "taglist_name", "The suffix name for this TagList. Defaults to __name__. The file name will be"]], "qurry.capsule.mori.taglist.TagList.guider": [[4, 3, 2, 0, "proposal_tag", "The tag for this value."], [4, 3, 2, 0, "v", "The value for legacy."]], "qurry.capsule.mori.taglist.TagList.params_control": [[4, 3, 2, 0, "is_read_only", "Whether to read a file of TagList exportation."], [4, 3, 2, 0, "json_dump_args", "The other arguments for dump() function. Defaults to None, it will be set to DEFAULT_JSON_DUMP_ARGS."], [4, 3, 2, 0, "open_args", "The other arguments for open() function. Defaults to None, it will be set to DEFAULT_OPEN_ARGS."], [4, 3, 2, 0, "save_location", "The exported location."]], "qurry.capsule.mori.taglist.TagList.read": [[4, 3, 2, 0, "filename", "The file name of exported TagList. The file name should be something like \"{name}.{taglist_name}.json\" or \"{taglist_name}.json\" when 'name' is None."], [4, 3, 2, 0, "json_dump_args", "The other arguments for dump() function. Defaults to None, it will be set to DEFAULT_JSON_DUMP_ARGS."], [4, 3, 2, 0, "open_args", "The other arguments for open() function. Defaults to None, it will be set to the returned valuse of create_open_args() with is_read_only set to True."], [4, 3, 2, 0, "save_location", "The location of file."], [4, 3, 2, 0, "taglist_name", "The class name of :TagList. Defaults to __name__."], [4, 3, 2, 0, "tuple_str_auto_transplie", "Whether to transplie tuple string in the keys of the dict to real tuple."]], "qurry.capsule.mori.taglist.key_tuple_loads": [[4, 3, 2, 0, "o", "A dictionary with string keys which read from json."]], "qurry.capsule.mori.taglist.tuple_str_parse": [[4, 3, 2, 0, "k", "Tuplizing available string."]], "qurry.capsule.quick": [[5, 1, 1, 0, "quickRead", "Quick read file."]], "qurry.capsule.quick.quickRead": [[5, 3, 2, 0, "encoding", "Encoding method."], [5, 3, 2, 0, "filename", "Filename."], [5, 3, 2, 0, "filetype", "Type of the file."], [5, 3, 2, 0, "save_location", "Location of files."]], "qurry.capsule.utils": [[6, 8, 1, 0, "DEFAULT_ENCODING", "Default encoding for file operations."], [6, 8, 1, 0, "DEFAULT_ENSURE_ASCII", "Default ensure_ascii for JSON serialization."], [6, 8, 1, 0, "DEFAULT_INDENT", "Default indentation for JSON serialization."], [6, 8, 1, 0, "DEFAULT_JSON_DUMP_ARGS", "Default arguments for JSON dump function."], [6, 8, 1, 0, "DEFAULT_MODE", "Default mode for file operations."], [6, 8, 1, 0, "DEFAULT_OPEN_ARGS", "Default arguments for open function."], [6, 8, 1, 0, "DEFAULT_PRINT_ARGS", "Default arguments for print function."], [6, 4, 1, 0, "JSONDumpArgs", "Default arguments for print function."], [6, 4, 1, 0, "OpenArgs", "Default arguments for open function."], [6, 4, 1, 0, "PrintArgs", "Default arguments for print function."], [6, 1, 1, 0, "create_json_dump_args", "Create JSON dump arguments."], [6, 1, 1, 0, "create_open_args", "Create open arguments."], [6, 1, 1, 0, "create_print_args", "Create print arguments."]], "qurry.capsule.utils.JSONDumpArgs": [[6, 6, 1, 0, "allow_nan", "Whether to allow NaN and Infinity values."], [6, 6, 1, 0, "check_circular", "Whether to check for circular references."], [6, 6, 1, 0, "cls", "Custom JSONEncoder class to use for serialization."], [6, 6, 1, 0, "default", "Function to call for objects that are not serializable."], [6, 6, 1, 0, "ensure_ascii", "Whether to escape non-ASCII characters."], [6, 6, 1, 0, "indent", "Indentation level for pretty-printing JSON, default is 2."], [6, 6, 1, 0, "separators", "')."], [6, 6, 1, 0, "skipkeys", "Whether to skip keys that are not serializable."], [6, 6, 1, 0, "sort_keys", "Whether to sort the keys in the JSON output."]], "qurry.capsule.utils.OpenArgs": [[6, 6, 1, 0, "buffering", "Buffering policy for the file"], [6, 6, 1, 0, "closefd", "Whether to close the file descriptor when the file is closed"], [6, 6, 1, 0, "encoding", "Encoding used for the file"], [6, 6, 1, 0, "errors", "Error handling scheme for the file"], [6, 6, 1, 0, "mode", "Mode in which the file is opened"], [6, 6, 1, 0, "newline", "Newline character handling for the file"], [6, 6, 1, 0, "opener", "Custom opener for the file, if needed"]], "qurry.capsule.utils.PrintArgs": [[6, 6, 1, 0, "end", "String appended after the last value, default is newline."], [6, 6, 1, 0, "flush", "Whether to flush the output buffer after printing."], [6, 6, 1, 0, "sep", "String inserted between values, default is space."]], "qurry.capsule.utils.create_json_dump_args": [[6, 3, 2, 0, "json_dump_args", "Arguments for json.dump function."]], "qurry.capsule.utils.create_open_args": [[6, 3, 2, 0, "is_read_only", "Whether the file is read-only."], [6, 3, 2, 0, "open_args", "Arguments for open function."]], "qurry.capsule.utils.create_print_args": [[6, 3, 2, 0, "print_args", "Arguments for print function."]], "qurry.declare": [[7, 0, 0, 1, "qurrium", ""], [8, 0, 0, 1, "run", ""], [9, 0, 0, 1, "transpile", ""]], "qurry.declare.qurrium": [[7, 4, 1, 0, "AnalyzeArgs", "Analysis input prototype."], [7, 4, 1, 0, "BasicArgs", "Basic input fields for measure() and multiOutput()."], [7, 8, 1, 0, "ConfigListType", "The generic type hint for the input of multiBulid() and multiOutput()."], [7, 4, 1, 0, "OutputArgs", "Basic output arguments for output()."], [7, 8, 1, 0, "PassManagerType", "The type hint for passmanager argument in output()."], [7, 8, 1, 0, "SpecificAnalsisArgs", "The type hint for analyze() and multiAnalysis()."]], "qurry.declare.run": [[8, 0, 0, 1, "base_run", ""], [8, 0, 0, 1, "ibm", ""], [8, 0, 0, 1, "simulator", ""]], "qurry.declare.run.base_run": [[8, 4, 1, 0, "BaseRunArgs", "Arguments for run()."], [8, 8, 1, 0, "RunArgsType", "The type hint for run()."]], "qurry.declare.run.ibm": [[8, 4, 1, 0, "IBMProviderBackendRunArgs", "Arguments for run()."], [8, 4, 1, 0, "IBMQBackendRunArgs", "Arguments for run()."], [8, 4, 1, 0, "IBMRuntimeBackendRunArgs", "Arguments for run()."]], "qurry.declare.run.simulator": [[8, 4, 1, 0, "AerBackendRunArgs", "Arguments for run()."], [8, 4, 1, 0, "BasicAerBackendRunArgs", "Arguments for run()."], [8, 4, 1, 0, "BasicSimulatorRunArgs", "For BasicSimulator from qiskit.providers.basic_provider:"]], "qurry.declare.transpile": [[9, 4, 1, 0, "TranspileArgs", "Transpile arguments for transpile()"]], "qurry.exceptions": [[10, 2, 1, 0, "OpenQASM3Issue13362Warning", "OpenQASM3 warning for Qiskit issue 12632. You will need to upgrade your Qiskit version to 1.3.2 for fixing this issue."], [10, 2, 1, 0, "OpenQASMProcessingWarning", "OpenQASM processing warning."], [10, 2, 1, 0, "OverlapComparisonSizeDifferent", "The sizes between two system that need to be compared are different."], [10, 2, 1, 0, "QurryArgumentsExpectedNotNone", "Arguments expected not None warning."], [10, 2, 1, 0, "QurryCountLost", "Count lost error."], [10, 2, 1, 0, "QurryDependenciesFailureError", "The dependencies of Qurrium like Qiskit raise some error."], [10, 2, 1, 0, "QurryDependenciesNotWorking", "Some function from the dependencies of Qurry like Qiskit will not working for some reason."], [10, 2, 1, 0, "QurryDeprecatedWarning", "Deprecated warning."], [10, 2, 1, 0, "QurryDummyRunnerWarning", "Dummy runner warning."], [10, 2, 1, 0, "QurryError", "Base class for errors raised by Qurrium."], [10, 2, 1, 0, "QurryExperimentCountsNotCompleted", "Experiment is not completed."], [10, 2, 1, 0, "QurryExtraPackageRequired", "Extra package required for Qurrium."], [10, 2, 1, 0, "QurryHashIDInvalid", "Hash ID invalid warning."], [10, 2, 1, 0, "QurryImportWarning", "Warning for qurry trying to import something."], [10, 2, 1, 0, "QurryInheritionNoEffect", "This configuration method has no effect."], [10, 2, 1, 0, "QurryInvalidArgument", "Invalid argument for Qurrium."], [10, 2, 1, 0, "QurryInvalidInherition", "Invalid inherition class making by Qurrium."], [10, 2, 1, 0, "QurryMemoryOverAllocationWarning", "Automatically shutdown experiment to protect RAM for preventing crashing."], [10, 2, 1, 0, "QurryPendingTagTooMany", "Pending tag too many warning."], [10, 2, 1, 0, "QurryPositionalArgumentNotSupported", "Positional argument is not supported."], [10, 2, 1, 0, "QurryProtectContent", "Warning for protect content."], [10, 2, 1, 0, "QurryResetAccomplished", "Warning for class reset."], [10, 2, 1, 0, "QurryResetSecurityActivated", "Warning for reset class security."], [10, 2, 1, 0, "QurrySummonerInvalid", "Warning for summoner info incompletion. The summoner is the instance of MultiManager."], [10, 2, 1, 0, "QurryTranspileConfigurationIgnored", "Transpile configuration ignored warning."], [10, 2, 1, 0, "QurryUnknownExportOption", "Unknown export option warning."], [10, 2, 1, 0, "QurryUnprovenFeatureWarning", "Unproven feature warning. This feature is not proven to be working or not. Please report if you find any issue with this feature."], [10, 2, 1, 0, "QurryUnrecongnizedArguments", "This argument is not recognized but may be kept at somewhere."], [10, 2, 1, 0, "QurryWarning", "Base class for warning raised by Qurrium."], [10, 2, 1, 0, "RandomizedMeasureError", "The error for randomized measure."], [10, 2, 1, 0, "RandomizedMeasureUnitaryOperatorNotFullCovering", "Randomized measure unitary operator warning for not full covering the measure range."], [10, 2, 1, 0, "SeperatedExecutingOverlapResult", "When the seperated executing overlap the result with the same backend"], [10, 2, 1, 0, "UnconfiguredWarning", "For dummy function in qurrium has been activated."]], "qurry.exceptions.OpenQASM3Issue13362Warning.__init__": [[10, 3, 2, "qurry.exceptions.OpenQASM3Issue13362Warning", "message", "OpenQASM3 warning for Qiskit issue 12632. You will need to upgrade your Qiskit version to 1.3.2 for fixing this issue."]], "qurry.exceptions.OpenQASMProcessingWarning.__init__": [[10, 3, 2, "qurry.exceptions.OpenQASMProcessingWarning", "message", "OpenQASM processing warning."]], "qurry.exceptions.OverlapComparisonSizeDifferent.__init__": [[10, 3, 2, "qurry.exceptions.OverlapComparisonSizeDifferent", "message", "The sizes between two system that need to be compared are different."]], "qurry.exceptions.QurryArgumentsExpectedNotNone.__init__": [[10, 3, 2, "qurry.exceptions.QurryArgumentsExpectedNotNone", "message", "Arguments expected not None warning."]], "qurry.exceptions.QurryCountLost.__init__": [[10, 3, 2, "qurry.exceptions.QurryCountLost", "message", "Count lost error."]], "qurry.exceptions.QurryDependenciesFailureError.__init__": [[10, 3, 2, "qurry.exceptions.QurryDependenciesFailureError", "message", "The dependencies of Qurrium like Qiskit raise some error."]], "qurry.exceptions.QurryDependenciesNotWorking.__init__": [[10, 3, 2, "qurry.exceptions.QurryDependenciesNotWorking", "message", "Some function from the dependencies of Qurry like Qiskit will not working for some reason."]], "qurry.exceptions.QurryDeprecatedWarning.__init__": [[10, 3, 2, "qurry.exceptions.QurryDeprecatedWarning", "message", "Deprecated warning."]], "qurry.exceptions.QurryDummyRunnerWarning.__init__": [[10, 3, 2, "qurry.exceptions.QurryDummyRunnerWarning", "message", "Dummy runner warning."]], "qurry.exceptions.QurryError.__init__": [[10, 3, 2, "qurry.exceptions.QurryError", "message", "Base class for errors raised by Qurrium."]], "qurry.exceptions.QurryExperimentCountsNotCompleted.__init__": [[10, 3, 2, "qurry.exceptions.QurryExperimentCountsNotCompleted", "message", "Experiment is not completed."]], "qurry.exceptions.QurryExtraPackageRequired.__init__": [[10, 3, 2, "qurry.exceptions.QurryExtraPackageRequired", "message", "Extra package required for Qurrium."]], "qurry.exceptions.QurryHashIDInvalid.__init__": [[10, 3, 2, "qurry.exceptions.QurryHashIDInvalid", "message", "Hash ID invalid warning."]], "qurry.exceptions.QurryImportWarning.__init__": [[10, 3, 2, "qurry.exceptions.QurryImportWarning", "message", "Warning for qurry trying to import something."]], "qurry.exceptions.QurryInheritionNoEffect.__init__": [[10, 3, 2, "qurry.exceptions.QurryInheritionNoEffect", "message", "This configuration method has no effect."]], "qurry.exceptions.QurryInvalidArgument.__init__": [[10, 3, 2, "qurry.exceptions.QurryInvalidArgument", "message", "Invalid argument for Qurrium."]], "qurry.exceptions.QurryInvalidInherition.__init__": [[10, 3, 2, "qurry.exceptions.QurryInvalidInherition", "message", "Invalid inherition class making by Qurrium."]], "qurry.exceptions.QurryMemoryOverAllocationWarning.__init__": [[10, 3, 2, "qurry.exceptions.QurryMemoryOverAllocationWarning", "message", "Automatically shutdown experiment to protect RAM for preventing crashing."]], "qurry.exceptions.QurryPendingTagTooMany.__init__": [[10, 3, 2, "qurry.exceptions.QurryPendingTagTooMany", "message", "Pending tag too many warning."]], "qurry.exceptions.QurryPositionalArgumentNotSupported.__init__": [[10, 3, 2, "qurry.exceptions.QurryPositionalArgumentNotSupported", "message", "Positional argument is not supported."]], "qurry.exceptions.QurryProtectContent.__init__": [[10, 3, 2, "qurry.exceptions.QurryProtectContent", "message", "Warning for protect content."]], "qurry.exceptions.QurryResetAccomplished.__init__": [[10, 3, 2, "qurry.exceptions.QurryResetAccomplished", "message", "Warning for class reset."]], "qurry.exceptions.QurryResetSecurityActivated.__init__": [[10, 3, 2, "qurry.exceptions.QurryResetSecurityActivated", "message", "Warning for reset class security."]], "qurry.exceptions.QurrySummonerInvalid.__init__": [[10, 3, 2, "qurry.exceptions.QurrySummonerInvalid", "message", "Warning for summoner info incompletion. The summoner is the instance of MultiManager."]], "qurry.exceptions.QurryTranspileConfigurationIgnored.__init__": [[10, 3, 2, "qurry.exceptions.QurryTranspileConfigurationIgnored", "message", "Transpile configuration ignored warning."]], "qurry.exceptions.QurryUnknownExportOption.__init__": [[10, 3, 2, "qurry.exceptions.QurryUnknownExportOption", "message", "Unknown export option warning."]], "qurry.exceptions.QurryUnprovenFeatureWarning.__init__": [[10, 3, 2, "qurry.exceptions.QurryUnprovenFeatureWarning", "message", "Unproven feature warning. This feature is not proven to be working or not. Please report if you find any issue with this feature."]], "qurry.exceptions.QurryUnrecongnizedArguments.__init__": [[10, 3, 2, "qurry.exceptions.QurryUnrecongnizedArguments", "message", "This argument is not recognized but may be kept at somewhere."]], "qurry.exceptions.QurryWarning.__init__": [[10, 3, 2, "qurry.exceptions.QurryWarning", "message", "Base class for warning raised by Qurrium."]], "qurry.exceptions.RandomizedMeasureError.__init__": [[10, 3, 2, "qurry.exceptions.RandomizedMeasureError", "message", "The error for randomized measure."]], "qurry.exceptions.RandomizedMeasureUnitaryOperatorNotFullCovering.__init__": [[10, 3, 2, "qurry.exceptions.RandomizedMeasureUnitaryOperatorNotFullCovering", "message", "Randomized measure unitary operator warning for not full covering the measure range."]], "qurry.exceptions.SeperatedExecutingOverlapResult.__init__": [[10, 3, 2, "qurry.exceptions.SeperatedExecutingOverlapResult", "message", "When the seperated executing overlap the result with the same backend"]], "qurry.exceptions.UnconfiguredWarning.__init__": [[10, 3, 2, "qurry.exceptions.UnconfiguredWarning", "message", "For dummy function in qurrium has been activated."]], "qurry.process": [[12, 0, 0, 1, "availability", ""], [16, 0, 0, 1, "classical_shadow", ""], [23, 0, 0, 1, "exceptions", ""], [28, 0, 0, 1, "randomized_measure", ""]], "qurry.process.availability": [[12, 8, 1, 0, "BACKEND_TYPES", "The backend types for post-processing."], [12, 8, 1, 0, "PostProcessingBackendLabel", "The backend label for post-processing."], [12, 1, 1, 0, "availablility", "Returns the availablility of the post-processing backend."], [12, 1, 1, 0, "default_postprocessing_backend", "Return the default post-processing backend."]], "qurry.process.availability.availablility": [[12, 3, 2, "qurry.process.availability.availablility", "import_statement", "Returns the availablility of the post-processing backend."], [12, 3, 2, 0, "module_location", "The location of the module."]], "qurry.process.availability.default_postprocessing_backend": [[12, 3, 2, 0, "cython_available", "Cython availability."], [12, 3, 2, 0, "rust_available", "Rust availability."]], "qurry.process.classical_shadow": [[13, 0, 0, 1, "classical_shadow", ""], [14, 0, 0, 1, "container", ""], [15, 0, 0, 1, "expectation_process", ""], [17, 0, 0, 1, "matrix_calcution", ""], [18, 0, 0, 1, "rho_m_core", ""], [19, 0, 0, 1, "rho_m_flatten", ""], [20, 0, 0, 1, "rho_mk_cell", ""], [21, 0, 0, 1, "trace_expect_process", ""], [22, 0, 0, 1, "unitary_set", ""]], "qurry.process.classical_shadow.classical_shadow": [[13, 1, 1, 0, "classical_shadow_complex", "Calculate the expectation value of Rho and the purity by classical shadow."], [13, 1, 1, 0, "esitimation_of_given_operators", "Calculate the expectation value of given operators."], [13, 1, 1, 0, "mean_of_rho", "Calculate the mean of Rho."], [13, 1, 1, 0, "trace_rho_square", "Trace of Rho square."]], "qurry.process.classical_shadow.classical_shadow.classical_shadow_complex": [[13, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [13, 3, 2, 0, "counts", "The list of the counts."], [13, 3, 2, 0, "estimate_trace_method", "The method to calculate the trace for searching esitmator."], [13, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [13, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [13, 3, 2, 0, "pbar", "The progress bar."], [13, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [13, 3, 2, 0, "rho_method", "The method to use for the calculation."], [13, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [13, 3, 2, 0, "shots", "The number of shots."], [13, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.process.classical_shadow.classical_shadow.esitimation_of_given_operators": [[13, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [13, 3, 2, 0, "counts", "The list of the counts."], [13, 3, 2, 0, "estimate_trace_method", "The method to calculate the trace for searching esitmator."], [13, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [13, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [13, 3, 2, 0, "pbar", "The progress bar."], [13, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [13, 3, 2, 0, "rho_method", "The method to use for the calculation."], [13, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [13, 3, 2, 0, "shots", "The number of shots."]], "qurry.process.classical_shadow.classical_shadow.mean_of_rho": [[13, 3, 2, 0, "counts", "The list of the counts."], [13, 3, 2, 0, "pbar", "The progress bar."], [13, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [13, 3, 2, 0, "rho_method", "The method to use for the calculation."], [13, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [13, 3, 2, 0, "shots", "The number of shots."]], "qurry.process.classical_shadow.classical_shadow.trace_rho_square": [[13, 3, 2, 0, "counts", "The list of the counts."], [13, 3, 2, 0, "pbar", "The progress bar."], [13, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [13, 3, 2, 0, "rho_method", "The method to use for the calculation."], [13, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [13, 3, 2, 0, "shots", "The number of shots."], [13, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.process.classical_shadow.container": [[14, 4, 1, 0, "ClassicalShadowBasic", "The basic information of the classical shadow."], [14, 4, 1, 0, "ClassicalShadowComplex", "The expectation value of Rho and the purity calculated by classical shadow."], [14, 4, 1, 0, "ClassicalShadowEstimation", "The esitimations of the classical shadow from classical snapshots."], [14, 4, 1, 0, "ClassicalShadowMeanRho", "The esitimations of the classical shadow from classical snapshots."], [14, 4, 1, 0, "ClassicalShadowPurity", "The expectation value of Rho."]], "qurry.process.classical_shadow.container.ClassicalShadowBasic": [[14, 6, 1, 0, "average_classical_snapshots_rho", "The dictionary of average classical snapshots, which uses the notation rho in Predicting many properties of a quantum system from very few measurements"], [14, 6, 1, 0, "classical_registers_actually", "The list of the selected_classical_registers."], [14, 6, 1, 0, "taking_time", "The time taken for the calculation."]], "qurry.process.classical_shadow.container.ClassicalShadowEstimation": [[14, 6, 1, 0, "accuracy_predict_epsilon", "The prediction of accuracy, which used the notation \\epsilon and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."], [14, 6, 1, 0, "accuracy_prob_comp_delta", "The probabiltiy complement of accuracy, which used the notation \\delta and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material. The probabiltiy of accuracy is 1 - \\delta."], [14, 6, 1, 0, "corresponding_rhos", "The corresponding rho of measurement primitive \\mathcal{U}."], [14, 6, 1, 0, "epsilon_upperbound", "The upper bound of the prediction of accuracy, which used the notation \\epsilon and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."], [14, 6, 1, 0, "estimate_of_given_operators", "The esitmation values of measurement primitive \\mathcal{U}."], [14, 6, 1, 0, "maximum_shadow_norm", "The maximum shadow norm, which is defined in the supplementary material. The maximum shadow norm is used to calculate the prediction of accuracy \\epsilon from the equation (S13) in the supplementary material."], [14, 6, 1, 0, "num_of_estimators_k", "The number of esitmators, which used the notation K and mentioned in Algorithm 1 in the paper, Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."], [14, 6, 1, 0, "shadow_norm_upperbound", "The largest shadow norm upper bound is defined as follows,"]], "qurry.process.classical_shadow.container.ClassicalShadowMeanRho": [[14, 6, 1, 0, "mean_of_rho", "The mean of single classical snapshots."]], "qurry.process.classical_shadow.container.ClassicalShadowPurity": [[14, 6, 1, 0, "entropy", "The entropy calculated by classical shadow."], [14, 6, 1, 0, "purity", "The purity calculated by classical shadow."]], "qurry.process.classical_shadow.expectation_process": [[15, 1, 1, 0, "accuracy_predict_epsilon_calc", "Calculate the prediction of accuracy, which used the notation \\epsilon and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."], [15, 1, 1, 0, "accuracy_prob_comp_delta_calc", "Calculate the accuracy probability component delta."], [15, 1, 1, 0, "dim_check", "Check the dimension of the operator."], [15, 1, 1, 0, "inverted_quantum_channel", "Inverted quantum channel."], [15, 1, 1, 0, "largest_shadow_norm_squared_upperbound", "Calculate the largest shadow norm upper bound."], [15, 1, 1, 0, "num_of_esitmator_calc", "Calculate the number of estimators."], [15, 1, 1, 0, "prediction_algorithm", "Calculate the prediction of accuracy and the number of estimators."], [15, 1, 1, 0, "traceless", "Make the operator traceless."], [15, 1, 1, 0, "worst_accuracy_predict_epsilon_calc", "Calculate the prediction of accuracy in worst scenario, which used the notation \\epsilon and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."]], "qurry.process.classical_shadow.expectation_process.accuracy_predict_epsilon_calc": [[15, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [15, 3, 2, 0, "num_classical_snapshot", "The number of classical snapshots. It is N in the equation."]], "qurry.process.classical_shadow.expectation_process.accuracy_prob_comp_delta_calc": [[15, 3, 2, 0, "num_of_esitmators", "The number of estimators. It is K in the equation."], [15, 3, 2, 0, "num_of_given_operators", "The number of given operators. It is M in the equation."]], "qurry.process.classical_shadow.expectation_process.dim_check": [[15, 3, 2, 0, "op", "The operator to be checked."]], "qurry.process.classical_shadow.expectation_process.inverted_quantum_channel": [[15, 3, 2, 0, "op", "The operator to be inverted."]], "qurry.process.classical_shadow.expectation_process.largest_shadow_norm_squared_upperbound": [[15, 3, 2, 0, "op", "The operator to be calculated."]], "qurry.process.classical_shadow.expectation_process.num_of_esitmator_calc": [[15, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [15, 3, 2, 0, "num_classical_snapshot", "The number of classical snapshots. It is N in the equation."], [15, 3, 2, 0, "num_of_given_operators", "The number of given operators. It is M in the equation."]], "qurry.process.classical_shadow.expectation_process.prediction_algorithm": [[15, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [15, 3, 2, 0, "classical_snapshots_rho", "The classical snapshots. The key is the index of the classical snapshot, and the value is the classical snapshot."], [15, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [15, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [15, 3, 2, 0, "trace_method", "The method to calculate the trace for searching esitmator."]], "qurry.process.classical_shadow.expectation_process.traceless": [[15, 3, 2, 0, "op", "The operator to be made traceless."]], "qurry.process.classical_shadow.expectation_process.worst_accuracy_predict_epsilon_calc": [[15, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [15, 3, 2, 0, "num_classical_snapshot", "The number of classical snapshots. It is N in the equation."]], "qurry.process.classical_shadow.matrix_calcution": [[17, 8, 1, 0, "AllTraceRhoMethod", "The method to calculate the all trace of Rho square."], [17, 8, 1, 0, "ClassicalShadowPythonMethod", "The method to use for the calculation of classical shadow. It can be either \"jax\" or \"numpy\"."], [17, 8, 1, 0, "DEFAULT_PYTHON_METHOD", "The default backend to use for the calculation of classical shadow. It can be either \"jax\" or \"numpy\"."], [17, 8, 1, 0, "SingleTraceRhoMethod", "The method to calculate the trace of single Rho square."], [17, 1, 1, 0, "all_trace_rho_by_einsum_aij_bji_to_ab_jax", "The trace of Rho by einsum_aij_bji_to_ab by JAX."], [17, 1, 1, 0, "all_trace_rho_by_einsum_aij_bji_to_ab_numpy", "The trace of Rho by einsum_aij_bji_to_ab."], [17, 1, 1, 0, "prediction_einsum_aij_bji_to_ab_jax", "Calculate the prediction of given operators by einsum_aij_bji_to_ab_jax."], [17, 1, 1, 0, "prediction_einsum_aij_bji_to_ab_numpy", "Calculate the prediction of given operators by einsum_aij_bji_to_ab_numpy."], [17, 1, 1, 0, "rho_mki_kronecker_product_numpy", "Kronecker product for \\rho_{mki} by Numpy."], [17, 1, 1, 0, "rho_mki_kronecker_product_numpy_2", "Kronecker product for \\rho_{mki} by Numpy."], [17, 1, 1, 0, "select_all_trace_rho_by_einsum_aij_bji_to_ab", "Select the method to calculate the trace of Rho square."], [17, 1, 1, 0, "select_prediction_einsum_aij_bji_to_ab", "Select the method to calculate the prediction of given operators."], [17, 1, 1, 0, "select_single_trace_rho_method", "Select the method to calculate the trace of Rho square."], [17, 1, 1, 0, "set_cpu_only", "Set JAX to use CPU only."], [17, 1, 1, 0, "single_trace_rho_by_einsum_ij_ji", "The single trace of Rho by einsum_ij_ji by Numpy."], [17, 1, 1, 0, "single_trace_rho_by_trace_of_matmul", "The single trace of Rho by trace of matmul."]], "qurry.process.classical_shadow.matrix_calcution.all_trace_rho_by_einsum_aij_bji_to_ab_jax": [[17, 3, 2, 0, "rho_m_array", "The Rho M array."]], "qurry.process.classical_shadow.matrix_calcution.all_trace_rho_by_einsum_aij_bji_to_ab_numpy": [[17, 3, 2, 0, "rho_m_array", "The Rho M array."]], "qurry.process.classical_shadow.matrix_calcution.prediction_einsum_aij_bji_to_ab_jax": [[17, 3, 2, 0, "estimators", "The estimators."], [17, 3, 2, 0, "given_operators", "The given operators."]], "qurry.process.classical_shadow.matrix_calcution.prediction_einsum_aij_bji_to_ab_numpy": [[17, 3, 2, 0, "estimators", "The estimators."], [17, 3, 2, 0, "given_operators", "The given operators."]], "qurry.process.classical_shadow.matrix_calcution.rho_mki_kronecker_product_numpy": [[17, 3, 2, 0, "key_list_of_precomputed", "The list of the keys of the precomputed \\rho_{mki}."]], "qurry.process.classical_shadow.matrix_calcution.rho_mki_kronecker_product_numpy_2": [[17, 3, 2, 0, "key_list_of_precomputed", "The list of the keys of the precomputed \\rho_{mki}."]], "qurry.process.classical_shadow.matrix_calcution.select_all_trace_rho_by_einsum_aij_bji_to_ab": [[17, 3, 2, 0, "method", "The method to use for the calculation."]], "qurry.process.classical_shadow.matrix_calcution.select_prediction_einsum_aij_bji_to_ab": [[17, 3, 2, 0, "method", "The method to use for the calculation."]], "qurry.process.classical_shadow.matrix_calcution.select_single_trace_rho_method": [[17, 3, 2, 0, "method", "The method to use for the calculation."]], "qurry.process.classical_shadow.matrix_calcution.single_trace_rho_by_einsum_ij_ji": [[17, 3, 2, "qurry.process.classical_shadow.matrix_calcution.single_trace_rho_by_einsum_ij_ji", "rho_m1_and_rho_m2", "The single trace of Rho by einsum_ij_ji by Numpy."]], "qurry.process.classical_shadow.matrix_calcution.single_trace_rho_by_trace_of_matmul": [[17, 3, 2, "qurry.process.classical_shadow.matrix_calcution.single_trace_rho_by_trace_of_matmul", "rho_m1_and_rho_m2", "The single trace of Rho by trace of matmul."]], "qurry.process.classical_shadow.rho_m_core": [[18, 8, 1, 0, "RhoMCoreMethod", "Type for rho_m_core method. It can be either \"numpy\", \"numpy_precomputed\" or \"numpy_flatten\"."], [18, 1, 1, 0, "rho_m_core", "Rho M Cell Core calculation."], [18, 1, 1, 0, "rho_m_core_py", "Rho M Cell Core calculation."]], "qurry.process.classical_shadow.rho_m_core.rho_m_core": [[18, 3, 2, 0, "counts", "The list of the counts."], [18, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [18, 3, 2, 0, "rho_method", "The method to use for the calculation."], [18, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [18, 3, 2, 0, "shots", "The number of shots."]], "qurry.process.classical_shadow.rho_m_core.rho_m_core_py": [[18, 3, 2, 0, "counts", "The list of the counts."], [18, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [18, 3, 2, 0, "rho_method", "The method to use for the calculation."], [18, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [18, 3, 2, 0, "shots", "The number of shots."]], "qurry.process.classical_shadow.rho_m_flatten": [[19, 1, 1, 0, "rho_m_flatten_core", "Rho M Cell Core calculation."]], "qurry.process.classical_shadow.rho_m_flatten.rho_m_flatten_core": [[19, 3, 2, 0, "counts", "The list of the counts."], [19, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [19, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [19, 3, 2, 0, "shots", "The number of shots."]], "qurry.process.classical_shadow.rho_mk_cell": [[20, 8, 1, 0, "RhoMKCellMethod", "Type for rho_mk_cell method. It can be either \"numpy\", \"numpy_precomputed\"."], [20, 1, 1, 0, "rho_mk_cell_py", "\\rho_{mk} calculation for single cell."], [20, 1, 1, 0, "rho_mk_cell_py_precomputed", "\\rho_{mk} calculation for single cell."]], "qurry.process.classical_shadow.rho_mk_cell.rho_mk_cell_py": [[20, 3, 2, 0, "idx", "Index of the cell (counts)."], [20, 3, 2, 0, "nu_shadow_direction", "The shadow direction of the unitary operators."], [20, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [20, 3, 2, 0, "single_counts", "Counts measured by the single quantum circuit."]], "qurry.process.classical_shadow.rho_mk_cell.rho_mk_cell_py_precomputed": [[20, 3, 2, 0, "idx", "Index of the cell (counts)."], [20, 3, 2, 0, "nu_shadow_direction", "The shadow direction of the unitary operators."], [20, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [20, 3, 2, 0, "single_counts", "Counts measured by the single quantum circuit."]], "qurry.process.classical_shadow.trace_expect_process": [[21, 8, 1, 0, "TraceRhoMethod", "The method to calculate the trace of Rho square."], [21, 1, 1, 0, "mean_rho_core", "Calculate the expectation value of Rho."], [21, 1, 1, 0, "trace_rho_square_core", "Calculate the trace of Rho square."]], "qurry.process.classical_shadow.trace_expect_process.mean_rho_core": [[21, 3, 2, 0, "rho_m_list", "The dictionary of Rho M. The dictionary of Rho M I."], [21, 3, 2, 0, "selected_classical_registers_sorted", "The list of the selected_classical_registers."]], "qurry.process.classical_shadow.trace_expect_process.trace_rho_square_core": [[21, 3, 2, 0, "rho_m_list", "The dictionary of Rho M."], [21, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.process.classical_shadow.unitary_set": [[22, 8, 1, 0, "IDENTITY", "The NDArray[np.int32] objects for the identity matrix."], [22, 8, 1, 0, "OUTER_PRODUCT", "The NDArray[np.int32] objects for the outer product of |0\\rangle and |1\\rangle."], [22, 8, 1, 0, "PRECOMPUTED_RHO_M_K_I", "Precomputed \\rho_{mki} matrix."], [22, 8, 1, 0, "PRECOMPUTED_RHO_M_K_I_2", "Precomputed \\rho_{mki} matrix."], [22, 8, 1, 0, "U_M_GATES", "The Gate objects for the unitary operators U_M in the classical shadow."], [22, 8, 1, 0, "U_M_MATRIX", "The NDArray[np.complex128] objects for the unitary operators U_M in the classical shadow."]], "qurry.process.exceptions": [[23, 2, 1, 0, "AccuracyProbabilityCalculationError", "Invalid accuracy probability component delta for Classical Shadow post-processing."], [23, 2, 1, 0, "AccuracyProbabilityWarning", "Warning for invalid accuracy probability component delta in Classical Shadow post-processing."], [23, 2, 1, 0, "ClassicalShadowError", "Base class for errors raised by Classical Shadow post-processing."], [23, 2, 1, 0, "ClassicalShadowWarning", "Base class for warning raised by Classical Shadow post-processing."], [23, 2, 1, 0, "PostProcessingBackendDeprecatedWarning", "Post-processing backend is deprecated."], [23, 2, 1, 0, "PostProcessingCythonImportError", "Cython import error."], [23, 2, 1, 0, "PostProcessingCythonUnavailableWarning", "Cython unavailable warning."], [23, 2, 1, 0, "PostProcessingRustImportError", "Rust import error."], [23, 2, 1, 0, "PostProcessingRustUnavailableWarning", "Rust unavailable warning."], [23, 2, 1, 0, "PostProcessingThirdPartyImportError", "Third party import error."], [23, 2, 1, 0, "PostProcessingThirdPartyUnavailableWarning", "Third party unavailable warning."], [23, 2, 1, 0, "QurryPostProcessingError", "Base class for errors raised by Qurry."], [23, 2, 1, 0, "QurryPostProcessingWarning", "Base class for warning raised by Qurry."]], "qurry.process.exceptions.AccuracyProbabilityCalculationError.__init__": [[23, 3, 2, "qurry.process.exceptions.AccuracyProbabilityCalculationError", "message", "Invalid accuracy probability component delta for Classical Shadow post-processing."]], "qurry.process.exceptions.AccuracyProbabilityWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.AccuracyProbabilityWarning", "message", "Warning for invalid accuracy probability component delta in Classical Shadow post-processing."]], "qurry.process.exceptions.ClassicalShadowError.__init__": [[23, 3, 2, "qurry.process.exceptions.ClassicalShadowError", "message", "Base class for errors raised by Classical Shadow post-processing."]], "qurry.process.exceptions.ClassicalShadowWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.ClassicalShadowWarning", "message", "Base class for warning raised by Classical Shadow post-processing."]], "qurry.process.exceptions.PostProcessingBackendDeprecatedWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingBackendDeprecatedWarning", "message", "Post-processing backend is deprecated."]], "qurry.process.exceptions.PostProcessingCythonImportError.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingCythonImportError", "message", "Cython import error."]], "qurry.process.exceptions.PostProcessingCythonUnavailableWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingCythonUnavailableWarning", "message", "Cython unavailable warning."]], "qurry.process.exceptions.PostProcessingRustImportError.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingRustImportError", "message", "Rust import error."]], "qurry.process.exceptions.PostProcessingRustUnavailableWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingRustUnavailableWarning", "message", "Rust unavailable warning."]], "qurry.process.exceptions.PostProcessingThirdPartyImportError.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingThirdPartyImportError", "message", "Third party import error."]], "qurry.process.exceptions.PostProcessingThirdPartyUnavailableWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.PostProcessingThirdPartyUnavailableWarning", "message", "Third party unavailable warning."]], "qurry.process.exceptions.QurryPostProcessingError.__init__": [[23, 3, 2, "qurry.process.exceptions.QurryPostProcessingError", "message", "Base class for errors raised by Qurry."]], "qurry.process.exceptions.QurryPostProcessingWarning.__init__": [[23, 3, 2, "qurry.process.exceptions.QurryPostProcessingWarning", "message", "Base class for warning raised by Qurry."]], "qurry.process.hadamard_test": [[24, 0, 0, 1, "entangled_entropy", ""], [24, 0, 0, 1, "purity_echo_core", ""], [24, 0, 0, 1, "wavefunction_overlap", ""]], "qurry.process.hadamard_test.entangled_entropy": [[24, 1, 1, 0, "hadamard_entangled_entropy", "Calculate entangled entropy with more information combined. The entropy we compute is the Second Order R\u00e9nyi Entropy."]], "qurry.process.hadamard_test.entangled_entropy.hadamard_entangled_entropy": [[24, 3, 2, 0, "backend", "Backend of the postprocessing."], [24, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [24, 3, 2, 0, "pbar", "Progress bar."], [24, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.hadamard_test.purity_echo_core": [[24, 1, 1, 0, "purity_echo_core", "Calculate entangled entropy with more information combined. The entropy we compute is the Second Order R\u00e9nyi Entropy."], [24, 1, 1, 0, "purity_echo_core_allrust", "The core function of entangled entropy by Rust."]], "qurry.process.hadamard_test.purity_echo_core.purity_echo_core": [[24, 3, 2, "qurry.process.hadamard_test.purity_echo_core.purity_echo_core", "backend", "Calculate entangled entropy with more information combined. The entropy we compute is the Second Order R\u00e9nyi Entropy."], [24, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [24, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.hadamard_test.purity_echo_core.purity_echo_core_allrust": [[24, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [24, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.hadamard_test.wavefunction_overlap": [[24, 1, 1, 0, "hadamard_overlap_echo", "Calculate overlap echo with more information combined. The echo we compute is the Loschmidt Echo."]], "qurry.process.hadamard_test.wavefunction_overlap.hadamard_overlap_echo": [[24, 3, 2, 0, "backend", "Backend of the postprocessing."], [24, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [24, 3, 2, 0, "pbar", "Progress bar."], [24, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.magnet_square": [[25, 0, 0, 1, "magnet_square", ""], [25, 0, 0, 1, "magsq_core", ""]], "qurry.process.magnet_square.magnet_square": [[25, 4, 1, 0, "MagnetSquare", "Magnetization Square type."], [25, 1, 1, 0, "magnet_square", "Calculate the magnet square."], [25, 1, 1, 0, "z_dir_magnet_square", "Calculate the magnet square for Z direction."]], "qurry.process.magnet_square.magnet_square.MagnetSquare": [[25, 6, 1, 0, "magnet_square", "Magnetization Square."], [25, 6, 1, 0, "magnet_square_cells", "Magnetization Square cells."], [25, 6, 1, 0, "taking_time", "Taking time."]], "qurry.process.magnet_square.magnet_square.magnet_square": [[25, 3, 2, 0, "backend", "Backend to use."], [25, 3, 2, 0, "counts", "List of counts."], [25, 3, 2, 0, "num_qubits", "Number of qubits."], [25, 3, 2, 0, "pbar", "Progress bar."], [25, 3, 2, 0, "shots", "Number of shots."]], "qurry.process.magnet_square.magnet_square.z_dir_magnet_square": [[25, 3, 2, 0, "backend", "Backend to use."], [25, 3, 2, 0, "num_qubits", "Number of qubits."], [25, 3, 2, 0, "pbar", "Progress bar."], [25, 3, 2, 0, "shots", "Number of shots."], [25, 3, 2, 0, "single_counts", "Single count."]], "qurry.process.magnet_square.magsq_core": [[25, 1, 1, 0, "magnetic_square_core", "The core function of Magnetization square by Python."], [25, 1, 1, 0, "magsq_cell_py", "Calculate the magnitudes square cell"], [25, 1, 1, 0, "magsq_cell_py_deprecated", "Calculate the magnitudes square cell"], [25, 1, 1, 0, "magsq_cell_wrapper", "Wrapper for the magnetic square cell."], [25, 1, 1, 0, "z_dir_magnetic_square_core", "The core function of Z direction Magnetization square by Python."]], "qurry.process.magnet_square.magsq_core.magnetic_square_core": [[25, 3, 2, 0, "backend", "Post Processing backend."], [25, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [25, 3, 2, 0, "num_qubits", "Number of qubits."], [25, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.magnet_square.magsq_core.magsq_cell_py": [[25, 3, 2, 0, "idx", "Index of the cell (counts)."], [25, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."], [25, 3, 2, 0, "single_counts", "Single counts of the cell."]], "qurry.process.magnet_square.magsq_core.magsq_cell_py_deprecated": [[25, 3, 2, 0, "idx", "Index of the cell (counts)."], [25, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."], [25, 3, 2, 0, "single_counts", "Single counts of the cell."]], "qurry.process.magnet_square.magsq_core.magsq_cell_wrapper": [[25, 3, 2, 0, "arguments", "The arguments for the magnetic square cell."]], "qurry.process.magnet_square.magsq_core.z_dir_magnetic_square_core": [[25, 3, 2, 0, "backend", "Post Processing backend."], [25, 3, 2, 0, "num_qubits", "Number of qubits."], [25, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."], [25, 3, 2, 0, "single_counts", "Single count."]], "qurry.process.randomized_measure": [[26, 0, 0, 1, "entangled_entropy", ""], [27, 0, 0, 1, "entangled_entropy_v1", ""], [29, 0, 0, 1, "wavefunction_overlap", ""], [30, 0, 0, 1, "wavefunction_overlap_v1", ""]], "qurry.process.randomized_measure.entangled_entropy": [[26, 0, 0, 1, "container", ""], [26, 0, 0, 1, "entangled_entropy_2", ""], [26, 0, 0, 1, "entropy_core_2", ""], [26, 0, 0, 1, "error_mitigation", ""], [26, 0, 0, 1, "purity_cell_2", ""]], "qurry.process.randomized_measure.entangled_entropy.container": [[26, 4, 1, 0, "EntangledEntropyResult", "The return type of the post-processing for entangled entropy."], [26, 4, 1, 0, "EntangledEntropyResultMitigated", "The return type of the post-processing for entangled entropy with error mitigation."], [26, 4, 1, 0, "ExistedAllSystemInfo", "Existed all system information"], [26, 4, 1, 0, "ExistedAllSystemInfoInput", "Existed all system information"], [26, 8, 1, 0, "GenericFloatType", "The generic float type by numpy or python."]], "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResult": [[26, 6, 1, 0, "classical_registers", "The list of the index of the selected classical registers."], [26, 6, 1, 0, "classical_registers_actually", "The list of the index of the selected classical registers which is actually used."], [26, 6, 1, 0, "counts_num", "The number of counts."], [26, 6, 1, 0, "entropy", "The entropy of the system."], [26, 6, 1, 0, "entropySD", "The standard deviation of the entropy."], [26, 6, 1, 0, "num_classical_registers", "The number of classical registers."], [26, 6, 1, 0, "purity", "The purity of the system."], [26, 6, 1, 0, "purityCells", "The purity of each single count."], [26, 6, 1, 0, "puritySD", "The standard deviation of the purity."], [26, 6, 1, 0, "taking_time", "The calculation time."]], "qurry.process.randomized_measure.entangled_entropy.container.EntangledEntropyResultMitigated": [[26, 6, 1, 0, "all_system_source", "The name of source of all system."], [26, 6, 1, 0, "classical_registers_actually_all_sys", "The list of the index of the selected classical registers which is actually used."], [26, 6, 1, 0, "classical_registers_all_sys", "The list of the index of the selected classical registers."], [26, 6, 1, 0, "entropyAllSys", "The entropy of the all system."], [26, 6, 1, 0, "entropySDAllSys", "The standard deviation of the entropy of the all system."], [26, 6, 1, 0, "errorRate", "The error rate of the measurement from depolarizing error migigation calculated."], [26, 6, 1, 0, "mitigatedEntropy", "The mitigated entropy."], [26, 6, 1, 0, "mitigatedPurity", "The mitigated purity."], [26, 6, 1, 0, "num_classical_registers_all_sys", "The number of classical registers of all system."], [26, 6, 1, 0, "purityAllSys", "The purity of the all system."], [26, 6, 1, 0, "purityCellsAllSys", "The purity of each single count."], [26, 6, 1, 0, "puritySDAllSys", "The standard deviation of the purity of the all system."], [26, 6, 1, 0, "taking_time_all_sys", "The calculation time of the all system."]], "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo": [[26, 6, 1, 0, "classical_registers_actually_all_sys", "The list of the index of the selected classical registers which is actually used."], [26, 6, 1, 0, "classical_registers_all_sys", "The list of the index of the selected classical registers."], [26, 6, 1, 0, "entropyAllSys", "The entropy of the all system."], [26, 6, 1, 0, "entropySDAllSys", "The standard deviation of the entropy of the all system."], [26, 6, 1, 0, "num_classical_registers_all_sys", "The number of classical registers of all system."], [26, 6, 1, 0, "purityAllSys", "The purity of the all system."], [26, 6, 1, 0, "purityCellsAllSys", "The purity of each single count."], [26, 6, 1, 0, "puritySDAllSys", "The standard deviation of the purity of the all system."], [26, 6, 1, 0, "source", "The source of all system."], [26, 6, 1, 0, "taking_time_all_sys", "The calculation time of the all system."]], "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo.__init__": [[26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "classical_registers_actually_all_sys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "classical_registers_all_sys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "entropyAllSys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "entropySDAllSys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "num_classical_registers_all_sys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "purityAllSys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "purityCellsAllSys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "puritySDAllSys", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "source", "Existed all system information"], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfo", "taking_time_all_sys", "Existed all system information"]], "qurry.process.randomized_measure.entangled_entropy.container.ExistedAllSystemInfoInput": [[26, 6, 1, 0, "classical_registers_actually_all_sys", "The list of the index of the selected classical registers which is actually used."], [26, 6, 1, 0, "classical_registers_all_sys", "The list of the index of the selected classical registers."], [26, 6, 1, 0, "entropyAllSys", "The entropy of the all system."], [26, 6, 1, 0, "entropySDAllSys", "The standard deviation of the entropy of the all system."], [26, 6, 1, 0, "num_classical_registers_all_sys", "The number of classical registers of all system."], [26, 6, 1, 0, "purityAllSys", "The purity of the all system."], [26, 6, 1, 0, "purityCellsAllSys", "The purity of each single count."], [26, 6, 1, 0, "puritySDAllSys", "The standard deviation of the purity of the all system."], [26, 6, 1, 0, "source", "The source of all system."], [26, 6, 1, 0, "taking_time_all_sys", "The calculation time of the all system."]], "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2": [[26, 1, 1, 0, "preparing_all_system", "Prepare all system for the entangled entropy calculation."], [26, 1, 1, 0, "randomized_entangled_entropy", "Calculate entangled entropy. The entropy we compute is the Second Order R\u00e9nyi Entropy."], [26, 1, 1, 0, "randomized_entangled_entropy_mitigated", "Calculate entangled entropy with depolarizing error mitigation. The entropy we compute is the Second Order R\u00e9nyi Entropy."]], "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2.preparing_all_system": [[26, 3, 2, 0, "backend", "Backend for the process."], [26, 3, 2, 0, "counts", "Counts from randomized measurement results."], [26, 3, 2, 0, "existed_all_system", "Existing all system source. If there is known all system result, then you can put it here to save a lot of time on calculating all system for no matter what partition you are using, their all system result is the same. This can save a lot of time Defaults to None."], [26, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [26, 3, 2, 0, "shots", "Shots of the counts."]], "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2.randomized_entangled_entropy": [[26, 3, 2, 0, "backend", "Backend for the process."], [26, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [26, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy.entangled_entropy_2.randomized_entangled_entropy_mitigated": [[26, 3, 2, 0, "backend", "Backend for the process."], [26, 3, 2, 0, "counts", "Counts from randomized measurement results."], [26, 3, 2, 0, "existed_all_system", "Existing all system source. If there is known all system result, then you can put it here to save a lot of time on calculating all system for no matter what partition you are using, their all system result is the same. This can save a lot of time Defaults to None."], [26, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "shots", "Shots of the counts."]], "qurry.process.randomized_measure.entangled_entropy.entropy_core_2": [[26, 1, 1, 0, "entangled_entropy_core_2", "The core function of entangled entropy."], [26, 1, 1, 0, "entangled_entropy_core_2_allrust", "The core function of entangled entropy by Rust for just purity cell part."], [26, 1, 1, 0, "entangled_entropy_core_2_pyrust", "The core function of entangled entropy by Python or Rust for just purity cell part."]], "qurry.process.randomized_measure.entangled_entropy.entropy_core_2.entangled_entropy_core_2": [[26, 3, 2, 0, "backend", "Backend for the process."], [26, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy.entropy_core_2.entangled_entropy_core_2_allrust": [[26, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy.entropy_core_2.entangled_entropy_core_2_pyrust": [[26, 3, 2, 0, "backend", "Backend for the process."], [26, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy.error_mitigation": [[26, 1, 1, 0, "depolarizing_error_mitgation", "Depolarizing error mitigation."], [26, 1, 1, 0, "mitigation_equation", "Calculate the mitigation equation."], [26, 1, 1, 0, "solve_p", "Solve the equation of p from all system size and subsystem size."]], "qurry.process.randomized_measure.entangled_entropy.error_mitigation.depolarizing_error_mitgation": [[26, 3, 2, 0, "all_system", "Value of the whole system."], [26, 3, 2, 0, "meas_system", "Value of the measured subsystem."], [26, 3, 2, 0, "n_a", "The size of the subsystem."], [26, 3, 2, 0, "system_size", "The size of the system."]], "qurry.process.randomized_measure.entangled_entropy.error_mitigation.mitigation_equation": [[26, 3, 2, 0, "meas_series", "Measured series."], [26, 3, 2, 0, "n_a", "Subsystem size."], [26, 3, 2, 0, "pser", "Solution of p."]], "qurry.process.randomized_measure.entangled_entropy.error_mitigation.solve_p": [[26, 3, 2, 0, "meas_series", "Measured series."], [26, 3, 2, 0, "n_a", "Subsystem size."]], "qurry.process.randomized_measure.entangled_entropy.purity_cell_2": [[26, 1, 1, 0, "purity_cell_2", "Calculate the purity cell, one of overlap, of a subsystem."], [26, 1, 1, 0, "purity_cell_2_py", "Calculate the purity cell, one of overlap, of a subsystem by Python."], [26, 1, 1, 0, "purity_cell_2_rust", "Calculate the purity cell, one of overlap, of a subsystem by Rust."]], "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2": [[26, 3, 2, 0, "backend", "Backend for the process."], [26, 3, 2, 0, "idx", "Index of the cell (counts)."], [26, 3, 2, "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2", "selected_classical_registers", "Calculate the purity cell, one of overlap, of a subsystem."], [26, 3, 2, 0, "single_counts", "Counts measured from the single quantum circuit."]], "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2_py": [[26, 3, 2, 0, "idx", "Index of the cell (counts)."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "single_counts", "Counts measured from the single quantum circuit."]], "qurry.process.randomized_measure.entangled_entropy.purity_cell_2.purity_cell_2_rust": [[26, 3, 2, 0, "idx", "Index of the cell (counts)."], [26, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [26, 3, 2, 0, "single_counts", "Counts measured from the single quantum circuit."]], "qurry.process.randomized_measure.entangled_entropy_v1": [[27, 0, 0, 1, "container", ""], [27, 0, 0, 1, "entangled_entropy", ""], [27, 0, 0, 1, "entropy_core", ""], [27, 0, 0, 1, "purity_cell", ""]], "qurry.process.randomized_measure.entangled_entropy_v1.container": [[27, 4, 1, 0, "ExistingAllSystemSource", "Existing all system source."], [27, 4, 1, 0, "RandomizedEntangledEntropyComplex", "The result of the analysis."], [27, 4, 1, 0, "RandomizedEntangledEntropyMitigatedComplex", "The result of the analysis."]], "qurry.process.randomized_measure.entangled_entropy_v1.container.ExistingAllSystemSource": [[27, 6, 1, 0, "bitStringRange", "The range of partition on the bitstring."], [27, 6, 1, 0, "measureActually", "The range of partition refer to all qubits."], [27, 6, 1, 0, "purityCellsAllSys", "The purity of each cell of all system."], [27, 6, 1, 0, "source", "The source of all system."]], "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyComplex": [[27, 6, 1, 0, "bitStringRange", "The range of partition on the bitstring."], [27, 6, 1, 0, "countsNum", "The number of counts."], [27, 6, 1, 0, "degree", "The range of partition."], [27, 6, 1, 0, "entropy", "The entropy of the system."], [27, 6, 1, 0, "entropySD", "The standard deviation of the entropy."], [27, 6, 1, 0, "measureActually", "The range of partition refer to all qubits."], [27, 6, 1, 0, "purity", "The purity of the system."], [27, 6, 1, 0, "purityCells", "The purity of each cell."], [27, 6, 1, 0, "puritySD", "The standard deviation of the purity."], [27, 6, 1, 0, "takingTime", "The time of taking during specific partition."]], "qurry.process.randomized_measure.entangled_entropy_v1.container.RandomizedEntangledEntropyMitigatedComplex": [[27, 6, 1, 0, "allSystemSource", "The source of all system."], [27, 6, 1, 0, "bitStringRange", "The range of partition on the bitstring."], [27, 6, 1, 0, "bitsStringRangeAllSys", "The range of partition on the bitstring of all system."], [27, 6, 1, 0, "countsNum", "The number of counts."], [27, 6, 1, 0, "degree", "The range of partition."], [27, 6, 1, 0, "entropy", "The entropy of the system."], [27, 6, 1, 0, "entropyAllSys", "The entropy of all system."], [27, 6, 1, 0, "entropySD", "The standard deviation of the entropy."], [27, 6, 1, 0, "entropySDAllSys", "The standard deviation of the entropy of all system."], [27, 6, 1, 0, "errorRate", "The error rate of the measurement from depolarizing error migigation calculated."], [27, 6, 1, 0, "measure", "The qubit range of the measurement and text description."], [27, 6, 1, 0, "measureActually", "The range of partition refer to all qubits."], [27, 6, 1, 0, "measureActuallyAllSys", "The range of partition refer to all qubits of all system."], [27, 6, 1, 0, "mitigatedEntropy", "The mitigated entropy."], [27, 6, 1, 0, "mitigatedPurity", "The mitigated purity."], [27, 6, 1, 0, "num_qubits", "The number of qubits of this system."], [27, 6, 1, 0, "purity", "The purity of the system."], [27, 6, 1, 0, "purityAllSys", "The purity of all system."], [27, 6, 1, 0, "purityCells", "The purity of each cell."], [27, 6, 1, 0, "purityCellsAllSys", "The purity of each cell of all system."], [27, 6, 1, 0, "puritySD", "The standard deviation of the purity."], [27, 6, 1, 0, "puritySDAllSys", "The standard deviation of the purity of all system."], [27, 6, 1, 0, "takingTime", "The time of taking during specific partition."], [27, 6, 1, 0, "takingTimeAllSys", "The taking time of the all system if it is calculated, it will be 0 when use the all system from other analysis."]], "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy": [[27, 1, 1, 0, "preparing_all_system", "Prepare the all system source for entangled entropy calculation."], [27, 1, 1, 0, "randomized_entangled_entropy_mitigated_v1", "Calculate entangled entropy with depolarizing error mitigation. The entropy we compute is the Second Order R\u00e9nyi Entropy."], [27, 1, 1, 0, "randomized_entangled_entropy_v1", "Calculate entangled entropy. The entropy we compute is the Second Order R\u00e9nyi Entropy."]], "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy.preparing_all_system": [[27, 3, 2, 0, "backend", "Backend for the post-processing. Defaults to DEFAULT_PROCESS_BACKEND."], [27, 3, 2, 0, "counts", "Counts from randomized measurement results."], [27, 3, 2, 0, "existed_all_system", "Existing all system source. If there is known all system result, then you can put it here to save a lot of time on calculating all system for not matter what partition you are using, their all system result is the same. All system source should contain purityCellsAllSys, bitStringRange, measureActually, source for its name. This can save a lot of time Defaults to None."], [27, 3, 2, 0, "measure", "The range that implemented the measuring gate. If not specified, then use all qubits. This will affect the range of partition when you not implement the measuring gate on all qubit. Defaults to None."], [27, 3, 2, 0, "shots", "Shots of the counts."], [27, 3, 2, 0, "workers_num", "Number of multi-processing workers, it will be ignored if backend is Rust. if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). This only works for Python and Cython backend. Defaults to None."]], "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy.randomized_entangled_entropy_mitigated_v1": [[27, 3, 2, 0, "backend", "Backend for the post-processing. Defaults to DEFAULT_PROCESS_BACKEND."], [27, 3, 2, 0, "counts", "Counts from randomized measurement results."], [27, 3, 2, 0, "degree", "The range of partition."], [27, 3, 2, 0, "existed_all_system", "Existing all system source. If there is known all system result, then you can put it here to save a lot of time on calculating all system for not matter what partition you are using, their all system result is the same. All system source should contain purityCellsAllSys, bitStringRange, measureActually, source for its name. This can save a lot of time Defaults to None."], [27, 3, 2, 0, "measure", "The range that implemented the measuring gate. If not specified, then use all qubits. This will affect the range of partition when you not implement the measuring gate on all qubit. Defaults to None."], [27, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [27, 3, 2, 0, "shots", "Shots of the counts."], [27, 3, 2, 0, "workers_num", "Number of multi-processing workers, it will be ignored if backend is Rust. if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). This only works for Python and Cython backend. Defaults to None."]], "qurry.process.randomized_measure.entangled_entropy_v1.entangled_entropy.randomized_entangled_entropy_v1": [[27, 3, 2, 0, "backend", "Backend for the post-processing. Defaults to DEFAULT_PROCESS_BACKEND."], [27, 3, 2, 0, "counts", "Counts from randomized measurement results."], [27, 3, 2, 0, "degree", "The range of partition."], [27, 3, 2, 0, "measure", "The range that implemented the measuring gate. If not specified, then use all qubits. This will affect the range of partition when you not implement the measuring gate on all qubit. Defaults to None."], [27, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [27, 3, 2, 0, "shots", "Shots of the counts."], [27, 3, 2, 0, "workers_num", "Number of multi-processing workers, it will be ignored if backend is Rust. if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). This only works for Python and Cython backend. Defaults to None."]], "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core": [[27, 1, 1, 0, "entangled_entropy_core", "The core function of entangled entropy."], [27, 1, 1, 0, "entangled_entropy_core_allrust", "The core function of entangled entropy by Rust."], [27, 1, 1, 0, "entangled_entropy_core_pycyrust", "The core function of entangled entropy by Cython, Python, or Rust for just purity cell part."]], "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core.entangled_entropy_core": [[27, 3, 2, 0, "backend", "Backend for the process."], [27, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [27, 3, 2, 0, "degree", "Degree of the subsystem."], [27, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [27, 3, 2, 0, "multiprocess_pool_size", "Number of multi-processing workers, it will be ignored if backend is Rust. if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). Defaults to None."], [27, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core.entangled_entropy_core_allrust": [[27, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [27, 3, 2, 0, "degree", "Degree of the subsystem."], [27, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [27, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy_v1.entropy_core.entangled_entropy_core_pycyrust": [[27, 3, 2, 0, "backend", "Backend for the process."], [27, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [27, 3, 2, 0, "degree", "Degree of the subsystem."], [27, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [27, 3, 2, 0, "multiprocess_pool_size", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). Defaults to None."], [27, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell": [[27, 1, 1, 0, "purity_cell", "Calculate the purity cell, one of overlap, of a subsystem."], [27, 1, 1, 0, "purity_cell_py", "Calculate the purity cell, one of overlap, of a subsystem by Python."], [27, 1, 1, 0, "purity_cell_rust", "Calculate the purity cell, one of overlap, of a subsystem by Rust."]], "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell.purity_cell": [[27, 3, 2, 0, "backend", "Backend for the process."], [27, 3, 2, 0, "bitstring_range", "The range of the subsystem."], [27, 3, 2, 0, "idx", "Index of the cell (counts)."], [27, 3, 2, 0, "single_counts", "Counts measured by the single quantum circuit."], [27, 3, 2, 0, "subsystem_size", "Subsystem size included."]], "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell.purity_cell_py": [[27, 3, 2, 0, "bitstring_range", "The range of the subsystem."], [27, 3, 2, 0, "idx", "Index of the cell (counts)."], [27, 3, 2, 0, "single_counts", "Counts measured by the single quantum circuit."], [27, 3, 2, 0, "subsystem_size", "Subsystem size included."]], "qurry.process.randomized_measure.entangled_entropy_v1.purity_cell.purity_cell_rust": [[27, 3, 2, 0, "bitstring_range", "The range of the subsystem."], [27, 3, 2, 0, "idx", "Index of the cell (counts)."], [27, 3, 2, 0, "single_counts", "Counts measured by the single quantum circuit."], [27, 3, 2, 0, "subsystem_size", "Subsystem size included."]], "qurry.process.randomized_measure.wavefunction_overlap": [[29, 0, 0, 1, "echo_cell_2", ""], [29, 0, 0, 1, "echo_core_2", ""], [29, 0, 0, 1, "wavefunction_overlap_2", ""]], "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2": [[29, 1, 1, 0, "echo_cell_2", "Calculate the echo cell, one of overlap, of a subsystem. :param idx: Index of the cell (counts). :type idx: int :param first_counts: Counts measured from the first quantum circuit. :type first_counts: dict[str, int] :param second_counts: Counts measured from the second quantum circuit. :type second_counts: dict[str, int] :param selected_classical_registers: The list of the index of the selected_classical_registers. :type selected_classical_registers: list[int]"], [29, 1, 1, 0, "echo_cell_2_py", "Calculate the echo cell, one of overlap, of a subsystem by Python."], [29, 1, 1, 0, "echo_cell_2_rust", "Calculate the echo cell, one of overlap, of a subsystem by Rust."]], "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2": [[29, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2", "backend", "Calculate the echo cell, one of overlap, of a subsystem. :param idx: Index of the cell (counts). :type idx: int :param first_counts: Counts measured from the first quantum circuit. :type first_counts: dict[str, int] :param second_counts: Counts measured from the second quantum circuit. :type second_counts: dict[str, int] :param selected_classical_registers: The list of the index of the selected_classical_registers. :type selected_classical_registers: list[int]"], [29, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2", "first_counts", "Calculate the echo cell, one of overlap, of a subsystem. :param idx: Index of the cell (counts). :type idx: int :param first_counts: Counts measured from the first quantum circuit. :type first_counts: dict[str, int] :param second_counts: Counts measured from the second quantum circuit. :type second_counts: dict[str, int] :param selected_classical_registers: The list of the index of the selected_classical_registers. :type selected_classical_registers: list[int]"], [29, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2", "idx", "Calculate the echo cell, one of overlap, of a subsystem. :param idx: Index of the cell (counts). :type idx: int :param first_counts: Counts measured from the first quantum circuit. :type first_counts: dict[str, int] :param second_counts: Counts measured from the second quantum circuit. :type second_counts: dict[str, int] :param selected_classical_registers: The list of the index of the selected_classical_registers. :type selected_classical_registers: list[int]"], [29, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2", "second_counts", "Calculate the echo cell, one of overlap, of a subsystem. :param idx: Index of the cell (counts). :type idx: int :param first_counts: Counts measured from the first quantum circuit. :type first_counts: dict[str, int] :param second_counts: Counts measured from the second quantum circuit. :type second_counts: dict[str, int] :param selected_classical_registers: The list of the index of the selected_classical_registers. :type selected_classical_registers: list[int]"], [29, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2", "selected_classical_registers", "Calculate the echo cell, one of overlap, of a subsystem. :param idx: Index of the cell (counts). :type idx: int :param first_counts: Counts measured from the first quantum circuit. :type first_counts: dict[str, int] :param second_counts: Counts measured from the second quantum circuit. :type second_counts: dict[str, int] :param selected_classical_registers: The list of the index of the selected_classical_registers. :type selected_classical_registers: list[int]"]], "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2_py": [[29, 3, 2, 0, "first_counts", "Counts measured from the first quantum circuit."], [29, 3, 2, 0, "idx", "Index of the cell (counts)."], [29, 3, 2, 0, "second_counts", "Counts measured from the second quantum circuit."], [29, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."]], "qurry.process.randomized_measure.wavefunction_overlap.echo_cell_2.echo_cell_2_rust": [[29, 3, 2, 0, "first_counts", "Counts measured from the first quantum circuit."], [29, 3, 2, 0, "idx", "Index of the cell (counts)."], [29, 3, 2, 0, "second_counts", "Counts measured from the second quantum circuit."], [29, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."]], "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2": [[29, 1, 1, 0, "overlap_echo_core_2", "The core function of wavefunction overlap for just purity cell part."], [29, 1, 1, 0, "overlap_echo_core_2_allrust", "The core function of wavefunction overlap by Rust for just purity cell part."], [29, 1, 1, 0, "overlap_echo_core_2_pyrust", "The core function of wavefunction overlap by Python or Rust for just purity cell part."]], "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2.overlap_echo_core_2": [[29, 3, 2, 0, "backend", "Backend for the process."], [29, 3, 2, 0, "first_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "second_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [29, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2.overlap_echo_core_2_allrust": [[29, 3, 2, 0, "first_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "second_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [29, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap.echo_core_2.overlap_echo_core_2_pyrust": [[29, 3, 2, 0, "backend", "Backend for the process."], [29, 3, 2, 0, "first_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "second_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [29, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2": [[29, 8, 1, 0, "GenericFloatType", "The generic float type by numpy or python."], [29, 4, 1, 0, "WaveFuctionOverlapResult", "The return type of the post-processing for wavefunction overlap."], [29, 1, 1, 0, "randomized_overlap_echo", "Calculate wavefunction overlap a.k.a. loschmidt echo when processes time evolution system."]], "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.WaveFuctionOverlapResult": [[29, 6, 1, 0, "classical_registers", "The list of the index of the selected classical registers."], [29, 6, 1, 0, "classical_registers_actually", "The list of the index of the selected classical registers which is actually used."], [29, 6, 1, 0, "counts_num", "The number of first counts and second counts."], [29, 6, 1, 0, "echo", "The overlap value."], [29, 6, 1, 0, "echoCells", "The overlap of each single count."], [29, 6, 1, 0, "echoSD", "The overlap standard deviation."], [29, 6, 1, 0, "num_classical_registers", "The number of classical registers."], [29, 6, 1, 0, "taking_time", "The calculation time."]], "qurry.process.randomized_measure.wavefunction_overlap.wavefunction_overlap_2.randomized_overlap_echo": [[29, 3, 2, 0, "backend", "Backend for the process."], [29, 3, 2, 0, "first_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [29, 3, 2, 0, "second_counts", "Counts of the experiment on quantum machine."], [29, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [29, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap_v1": [[30, 0, 0, 1, "echo_cell", ""], [30, 0, 0, 1, "echo_core", ""], [30, 0, 0, 1, "wavefunction_overlap", ""]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell": [[30, 1, 1, 0, "echo_cell", "Calculate the echo cell, one of overlap, of a subsystem."], [30, 1, 1, 0, "echo_cell_py", "Calculate the echo cell, one of overlap, of a subsystem by Python."], [30, 1, 1, 0, "echo_cell_rust", "Calculate the echo cell, one of overlap, of a subsystem by Rust."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell": [[30, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell", "backend", "Calculate the echo cell, one of overlap, of a subsystem."], [30, 3, 2, 0, "bitstring_range", "The range of the subsystem."], [30, 3, 2, 0, "first_counts", "Counts measured from the first quantum circuit."], [30, 3, 2, 0, "idx", "Index of the cell (counts)."], [30, 3, 2, 0, "second_counts", "Counts measured from the second quantum circuit."], [30, 3, 2, 0, "subsystem_size", "Subsystem size included."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell_py": [[30, 3, 2, 0, "bitstring_range", "The range of the subsystem."], [30, 3, 2, 0, "first_counts", "Counts measured from the first quantum circuit."], [30, 3, 2, 0, "idx", "Index of the cell (counts)."], [30, 3, 2, 0, "second_counts", "Counts measured from the second quantum circuit."], [30, 3, 2, 0, "subsystem_size", "Subsystem size included."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_cell.echo_cell_rust": [[30, 3, 2, 0, "bitstring_range", "The range of the subsystem."], [30, 3, 2, 0, "first_counts", "Counts measured from the first quantum circuit."], [30, 3, 2, 0, "idx", "Index of the cell (counts)."], [30, 3, 2, 0, "second_counts", "Counts measured from the second quantum circuit."], [30, 3, 2, 0, "subsystem_size", "Subsystem size included."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core": [[30, 1, 1, 0, "overlap_echo_allrust", "The core function of entangled entropy."], [30, 1, 1, 0, "overlap_echo_core", "The core function of entangled entropy."], [30, 1, 1, 0, "overlap_echo_core_pycyrust", "The core function of entangled entropy."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_allrust": [[30, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [30, 3, 2, 0, "degree", "Degree of the subsystem."], [30, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [30, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_core": [[30, 3, 2, 0, "backend", "The backend of the process, 'Cython', 'Rust' or 'Python'. Defaults to DEFAULT_PROCESS_BACKEND."], [30, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [30, 3, 2, 0, "degree", "Degree of the subsystem."], [30, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [30, 3, 2, "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_core", "multiprocess_pool_size", "The core function of entangled entropy."], [30, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.echo_core.overlap_echo_core_pycyrust": [[30, 3, 2, 0, "backend", "Backend for the process."], [30, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [30, 3, 2, 0, "degree", "Degree of the subsystem."], [30, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [30, 3, 2, 0, "multiprocess_pool_size", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). Defaults to None."], [30, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap": [[30, 1, 1, 0, "randomized_overlap_echo_v1", "Calculate wavefunction overlap a.k.a. loschmidt echo when processes time evolution system."]], "qurry.process.randomized_measure.wavefunction_overlap_v1.wavefunction_overlap.randomized_overlap_echo_v1": [[30, 3, 2, 0, "backend", "Backend for the post-processing. Defaults to DEFAULT_PROCESS_BACKEND."], [30, 3, 2, 0, "counts", "Counts from randomized measurement results."], [30, 3, 2, 0, "degree", "The range of partition."], [30, 3, 2, 0, "measure", "The range that implemented the measuring gate. If not specified, then use all qubits. This will affect the range of partition when you not implement the measuring gate on all qubit. Defaults to None."], [30, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [30, 3, 2, 0, "shots", "Shots of the counts."], [30, 3, 2, 0, "workers_num", "Number of multi-processing workers, it will be ignored if backend is Rust. if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). This only works for Python and Cython backend. Defaults to None."]], "qurry.process.status": [[31, 0, 0, 1, "backend", ""]], "qurry.process.status.backend": [[31, 1, 1, 0, "availability_status_print", "Print the availability status of the post-processing modules."]], "qurry.process.string_operator": [[32, 0, 0, 1, "string_operator", ""], [32, 0, 0, 1, "strop_core", ""]], "qurry.process.string_operator.string_operator": [[32, 4, 1, 0, "StringOperator", "String Operator type."], [32, 1, 1, 0, "string_operator_order", "Calculate the order of the string operator."]], "qurry.process.string_operator.string_operator.StringOperator": [[32, 6, 1, 0, "order", "The order of the string operator."]], "qurry.process.string_operator.string_operator.string_operator_order": [[32, 3, 2, 0, "backend", "Backend to use."], [32, 3, 2, 0, "counts", "List of counts."], [32, 3, 2, 0, "pbar", "Progress bar."], [32, 3, 2, 0, "shots", "Number of shots."]], "qurry.process.string_operator.strop_core": [[32, 1, 1, 0, "add_or_reducer", "The add or reduce function. If the sum of the bitstring is even, return 1. If the sum of the bitstring is odd, return -1."], [32, 1, 1, 0, "string_operator_core", "The core function of magnet square by Python and Rust."]], "qurry.process.string_operator.strop_core.add_or_reducer": [[32, 3, 2, 0, "bitstring", "The bitstring."]], "qurry.process.string_operator.strop_core.string_operator_core": [[32, 3, 2, 0, "backend", "Post Processing backend."], [32, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [32, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.process.utils": [[33, 0, 0, 1, "bit_slice", ""], [33, 0, 0, 1, "counts_process", ""], [33, 0, 0, 1, "dummy", ""], [33, 0, 0, 1, "other", ""], [33, 0, 0, 1, "randomized", ""], [33, 0, 0, 1, "test", ""]], "qurry.process.utils.bit_slice": [[33, 1, 1, 0, "cycling_slice", "Slice a iterable object with cycling."], [33, 1, 1, 0, "cycling_slice_rust", "Slice a iterable object with cycling."], [33, 1, 1, 0, "degree_handler", "Handle the degree of freedom for the subsystem."], [33, 1, 1, 0, "degree_handler_rust", "Handle the degree of freedom for the subsystem."], [33, 1, 1, 0, "is_cycling_slice_active", "Check whether the cycling slice is active."], [33, 1, 1, 0, "qubit_mapper", "Map the index of selected qubits to the index of the classical register."], [33, 1, 1, 0, "qubit_mapper_2_int", "Map the index of selected qubits to the index of the classical register. The selected qubits are defined by two integers."], [33, 1, 1, 0, "qubit_selector", "Determint the qubits to be used."], [33, 1, 1, 0, "qubit_selector_rust", "Determint the qubits to be used."]], "qurry.process.utils.bit_slice.cycling_slice": [[33, 3, 2, 0, "end", "Index of end."], [33, 3, 2, 0, "start", "Index of start."], [33, 3, 2, 0, "step", "Step of slice."], [33, 3, 2, 0, "target", "The target object."]], "qurry.process.utils.bit_slice.cycling_slice_rust": [[33, 3, 2, 0, "end", "Index of end."], [33, 3, 2, 0, "start", "Index of start."], [33, 3, 2, 0, "step", "Step of slice."], [33, 3, 2, 0, "target", "The target object."]], "qurry.process.utils.bit_slice.degree_handler": [[33, 3, 2, 0, "allsystem_size", "The size of the whole system."], [33, 3, 2, 0, "degree", "The degree of freedom."], [33, 3, 2, 0, "measure", "The measure range."]], "qurry.process.utils.bit_slice.degree_handler_rust": [[33, 3, 2, 0, "allsystem_size", "The size of the whole system."], [33, 3, 2, 0, "degree", "The degree of freedom."], [33, 3, 2, 0, "measure", "The measure range."]], "qurry.process.utils.bit_slice.is_cycling_slice_active": [[33, 3, 2, 0, "allsystem_size", "The size of the whole system."], [33, 3, 2, 0, "bitstring_range", "The range of the bitstring."], [33, 3, 2, 0, "subsystem_size", "The size of the subsystem"]], "qurry.process.utils.bit_slice.qubit_mapper": [[33, 3, 2, 0, "actual_num_qubits", "The actual number of qubits."], [33, 3, 2, 0, "selected_qubits", "The selected qubits. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits."]], "qurry.process.utils.bit_slice.qubit_mapper_2_int": [[33, 3, 2, 0, "actual_num_qubits", "The actual number of qubits."], [33, 3, 2, 0, "selected_qubits", "The range of the selected qubits."]], "qurry.process.utils.bit_slice.qubit_selector": [[33, 3, 2, 0, "degree", "Degree of freedom or specific subsystem range. Defaults to None then will use number of qubits as degree."], [33, 3, 2, 0, "num_qubits", "Number of qubits."]], "qurry.process.utils.bit_slice.qubit_selector_rust": [[33, 3, 2, 0, "degree", "Degree of freedom or specific subsystem range. Defaults to None then will use number of qubits as degree."], [33, 3, 2, 0, "num_qubits", "Number of qubits."]], "qurry.process.utils.counts_process": [[33, 1, 1, 0, "counts_list_recount", "Calculate the counts under the degree."], [33, 1, 1, 0, "counts_list_recount_pyrust", "Calculate the counts under the degree."], [33, 1, 1, 0, "counts_list_vectorize_pyrust", "Vectorized counts."], [33, 1, 1, 0, "rho_m_flatten_counts_list_vectorize_pyrust", "Dedicated function for rho_m_flatten counts list vectorized."], [33, 1, 1, 0, "shot_counts_selected_clreg_checker_pyrust", "Check whether the selected classical registers are valid."], [33, 1, 1, 0, "single_counts_recount", "Calculate the counts under the degree."], [33, 1, 1, 0, "single_counts_recount_pyrust", "Calculate the counts under the degree."]], "qurry.process.utils.counts_process.counts_list_recount": [[33, 3, 2, 0, "counts_list", "The list of counts measured from the single quantum circuit."], [33, 3, 2, 0, "num_classical_register", "The number of classical registers."], [33, 3, 2, 0, "selected_classical_registers_sorted", "The list of the index of the selected_classical_registers."]], "qurry.process.utils.counts_process.counts_list_recount_pyrust": [[33, 3, 2, 0, "backend", "Backend for the process."], [33, 3, 2, 0, "counts_list", "The list of counts measured from the single quantum circuit."], [33, 3, 2, 0, "num_classical_register", "The number of classical registers."], [33, 3, 2, 0, "selected_classical_registers_sorted", "The list of the index of the selected_classical_registers."]], "qurry.process.utils.counts_process.counts_list_vectorize_pyrust": [[33, 3, 2, "qurry.process.utils.counts_process.counts_list_vectorize_pyrust", "backend", "Vectorized counts."], [33, 3, 2, 0, "counts_list", "The list of counts measured from the single quantum circuit."]], "qurry.process.utils.counts_process.rho_m_flatten_counts_list_vectorize_pyrust": [[33, 3, 2, "qurry.process.utils.counts_process.rho_m_flatten_counts_list_vectorize_pyrust", "backend", "Dedicated function for rho_m_flatten counts list vectorized."], [33, 3, 2, 0, "counts_list", "The list of counts measured from the single quantum circuit."], [33, 3, 2, 0, "random_unitary_um", "The shadow direction of the unitary operators."], [33, 3, 2, 0, "selected_classical_registers_sorted", "The list of the index of the selected_classical_registers."]], "qurry.process.utils.counts_process.shot_counts_selected_clreg_checker_pyrust": [[33, 3, 2, 0, "backend", "Backend for the process."], [33, 3, 2, 0, "counts", "The list of the counts."], [33, 3, 2, 0, "selected_classical_registers", "The selected classical registers."], [33, 3, 2, 0, "shots", "The number of shots."]], "qurry.process.utils.counts_process.single_counts_recount": [[33, 3, 2, 0, "num_classical_register", "The number of classical registers."], [33, 3, 2, 0, "selected_classical_registers_sorted", "The list of the index of the selected_classical_registers."], [33, 3, 2, 0, "single_counts", "Counts measured from the single quantum circuit."]], "qurry.process.utils.counts_process.single_counts_recount_pyrust": [[33, 3, 2, 0, "backend", "Backend for the process."], [33, 3, 2, 0, "num_classical_register", "The number of classical registers."], [33, 3, 2, 0, "selected_classical_registers_sorted", "The list of the index of the selected_classical_registers."], [33, 3, 2, 0, "single_counts", "Counts measured from the single quantum circuit."]], "qurry.process.utils.dummy": [[33, 1, 1, 0, "makeTwoBitStrOneLiner", "Make a list of bit strings with length of num. But it's an ONE LINE code."], [33, 1, 1, 0, "make_dummy_case", "Make a dummy case for the experiment."], [33, 1, 1, 0, "make_two_bit_str", "Make a list of bit strings with length of num."], [33, 1, 1, 0, "make_two_bit_str_32_py", "Make a list of bit strings with length of num."], [33, 1, 1, 0, "make_two_bit_str_unlimit", "Make a list of bit strings with length of num."]], "qurry.process.utils.dummy.makeTwoBitStrOneLiner": [[33, 3, 2, 0, "bitlen", "bit string length."], [33, 3, 2, 0, "bits", "The input for recurrsion."]], "qurry.process.utils.dummy.make_dummy_case": [[33, 3, 2, 0, "backend", "The backend to use."], [33, 3, 2, 0, "bitstring_num", "Maximum number of bits."], [33, 3, 2, 0, "n_a", "Number of qubits in subsystem A."], [33, 3, 2, 0, "shot_per_case", "Number of shots per case."]], "qurry.process.utils.dummy.make_two_bit_str": [[33, 3, 2, 0, "backend", "The backend to use."], [33, 3, 2, "qurry.process.utils.dummy.make_two_bit_str", "bitlen", "Make a list of bit strings with length of num."], [33, 3, 2, 0, "num", "bit string length."]], "qurry.process.utils.dummy.make_two_bit_str_32_py": [[33, 3, 2, 0, "bitlen", "bit string length."], [33, 3, 2, 0, "num", "The number of bit strings."]], "qurry.process.utils.dummy.make_two_bit_str_unlimit": [[33, 3, 2, 0, "backend", "The backend to use."], [33, 3, 2, 0, "bitlen", "bit string length."]], "qurry.process.utils.other": [[33, 8, 1, 0, "NUMERICAL_ERROR_TOLERANCE", "Tolerance for numerical errors in calculations. This is used to determine if two floating-point numbers are close enough to be considered equal."]], "qurry.process.utils.randomized": [[33, 1, 1, 0, "ensemble_cell", "Calculate the value of two counts from qubits in ensemble average."], [33, 1, 1, 0, "ensemble_cell_rust", "Calculate the value of two counts from qubits in ensemble average by Rust."], [33, 1, 1, 0, "hamming_distance", "Calculate the Hamming distance between two bit strings."], [33, 1, 1, 0, "hamming_distance_rust", "Calculate the Hamming distance between two bit strings."]], "qurry.process.utils.randomized.ensemble_cell": [[33, 3, 2, 0, "a_num", "Degree of freedom."], [33, 3, 2, 0, "s_i", "First count's qubits arrange."], [33, 3, 2, 0, "s_i_meas", "First count."], [33, 3, 2, 0, "s_j", "Second count's qubits arrange."], [33, 3, 2, 0, "s_j_meas", "Second count."], [33, 3, 2, 0, "shots", "Shots of executation."]], "qurry.process.utils.randomized.ensemble_cell_rust": [[33, 3, 2, 0, "a_num", "Degree of freedom."], [33, 3, 2, 0, "s_i", "First count's qubits arrange."], [33, 3, 2, 0, "s_i_meas", "First count."], [33, 3, 2, 0, "s_j", "Second count's qubits arrange."], [33, 3, 2, 0, "s_j_meas", "Second count."], [33, 3, 2, 0, "shots", "Shots of executation."]], "qurry.process.utils.randomized.hamming_distance": [[33, 3, 2, 0, "str1", "First string."], [33, 3, 2, 0, "str2", "Second string."]], "qurry.process.utils.randomized.hamming_distance_rust": [[33, 3, 2, 0, "str1", "First string."], [33, 3, 2, 0, "str2", "Second string."]], "qurry.process.utils.test": [[33, 1, 1, 0, "test_bit_slice", "Test the construct module."]], "qurry.qurrech": [[11, 1, 1, 0, "EchoListen", "Call EchoListen() methods."], [11, 1, 1, 0, "WaveFunctionOverlap", "Call WaveFunctionOverlap() methods, another name of EchoListen()."], [34, 0, 0, 1, "hadamard_test", ""], [35, 0, 0, 1, "randomized_measure", ""], [36, 0, 0, 1, "randomized_measure_v1", ""]], "qurry.qurrech.EchoListen": [[11, 3, 2, "qurry.qurrech.EchoListen", "args", "Call EchoListen() methods."], [11, 3, 2, "qurry.qurrech.EchoListen", "kwargs", "Call EchoListen() methods."], [11, 3, 2, 0, "method", "The method to use for wave function overlap measurement."]], "qurry.qurrech.WaveFunctionOverlap": [[11, 3, 2, "qurry.qurrech.WaveFunctionOverlap", "args", "Call WaveFunctionOverlap() methods, another name of EchoListen()."], [11, 3, 2, "qurry.qurrech.WaveFunctionOverlap", "kwargs", "Call WaveFunctionOverlap() methods, another name of EchoListen()."], [11, 3, 2, 0, "method", "The method to use for wave function overlap measurement."]], "qurry.qurrech.hadamard_test": [[34, 0, 0, 1, "analysis", ""], [34, 0, 0, 1, "arguments", ""], [34, 0, 0, 1, "experiment", ""], [34, 0, 0, 1, "qurry", ""]], "qurry.qurrech.hadamard_test.analysis": [[34, 4, 1, 0, "ELHAnalysisContent", "The content of the analysis."], [34, 4, 1, 0, "ELHAnalysisInput", "To set the analysis."], [34, 4, 1, 0, "EchoListenHadamardAnalysis", "The analysis for calculating entangled entropy with more information combined."]], "qurry.qurrech.hadamard_test.analysis.ELHAnalysisContent": [[34, 6, 1, 0, "echo", "The purity of the system."]], "qurry.qurrech.hadamard_test.analysis.ELHAnalysisContent.__init__": [[34, 3, 2, "qurry.qurrech.hadamard_test.analysis.ELHAnalysisContent", "echo", "The content of the analysis."]], "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis": [[34, 7, 1, 0, "content_type", "The content instance type."], [34, 7, 1, 0, "input_type", "The input instance type."], [34, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis.__init__": [[34, 3, 2, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis", "datatime", "The analysis for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis", "log", "The analysis for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis", "other_kwargs", "The analysis for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.analysis.EchoListenHadamardAnalysis", "serial", "The analysis for calculating entangled entropy with more information combined."]], "qurry.qurrech.hadamard_test.arguments": [[34, 4, 1, 0, "EchoListenHadamardAnalyzeArgs", "The input of multiAnalysis(). and analyze()."], [34, 4, 1, 0, "EchoListenHadamardArguments", "Arguments for EchoListenHadamardExperiment."], [34, 4, 1, 0, "EchoListenHadamardMeasureArgs", "Input fields for measure() and multiOutput()."], [34, 4, 1, 0, "EchoListenHadamardOutputArgs", "Output arguments for output()."], [34, 8, 1, 0, "SHORT_NAME", "The short name of EchoListenHadamardExperiment."]], "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments": [[34, 6, 1, 0, "degree", "The degree range."], [34, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."]], "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments.__init__": [[34, 3, 2, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments", "degree", "Arguments for EchoListenHadamardExperiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardArguments", "exp_name", "Arguments for EchoListenHadamardExperiment."]], "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardMeasureArgs": [[34, 6, 1, 0, "degree", "The degree range."], [34, 6, 1, 0, "wave1", "The key or the circuit to execute."], [34, 6, 1, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.hadamard_test.arguments.EchoListenHadamardOutputArgs": [[34, 6, 1, 0, "degree", "The degree range."]], "qurry.qurrech.hadamard_test.experiment": [[34, 4, 1, 0, "EchoListenHadamardExperiment", "The experiment for calculating entangled entropy with more information combined."]], "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment": [[34, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [34, 7, 1, 0, "analyze", "Calculate entangled entropy with more information combined."], [34, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [34, 7, 1, 0, "method", "The method to construct circuit."], [34, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [34, 7, 1, 0, "quantities", "Calculate entangled entropy with more information combined."]], "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.__init__": [[34, 3, 2, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", "afterwards", "The experiment for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", "arguments", "The experiment for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", "beforewards", "The experiment for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", "commonparams", "The experiment for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", "outfields", "The experiment for calculating entangled entropy with more information combined."], [34, 3, 2, "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment", "reports", "The experiment for calculating entangled entropy with more information combined."]], "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.analyze": [[34, 3, 2, 0, "pbar", "The progress bar."]], "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.method": [[34, 3, 2, 0, "arguments", "The arguments of the experiment."], [34, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [34, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [34, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.params_control": [[34, 3, 2, 0, "custom_kwargs", "The custom parameters."], [34, 3, 2, 0, "degree", "The degree range. Defaults to None."], [34, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [34, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrech.hadamard_test.experiment.EchoListenHadamardExperiment.quantities": [[34, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [34, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.qurrech.hadamard_test.qurry": [[34, 4, 1, 0, "EchoListenHadamard", "The experiment for calculating entangled entropy with more information combined."]], "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard": [[34, 5, 1, 0, "experiment_instance", "The experiment instance for this experiment."], [34, 7, 1, 0, "measure", "Execute the experiment."], [34, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [34, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure": [[34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "backend", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "degree", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "exp_name", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "export", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "passmanager", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "pbar", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "qasm_version", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "run_args", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "save_location", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "shots", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "tags", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "transpile_args", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "wave1", "Execute the experiment."], [34, 3, 2, "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure", "wave2", "Execute the experiment."]], "qurry.qurrech.hadamard_test.qurry.EchoListenHadamard.measure_to_output": [[34, 3, 2, 0, "backend", "The quantum backend."], [34, 3, 2, 0, "degree", "The degree of the experiment. Defaults to None."], [34, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [34, 3, 2, 0, "export", "Whether to export the experiment."], [34, 3, 2, 0, "passmanager", "The passmanager."], [34, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [34, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [34, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [34, 3, 2, 0, "save_location", "The location to save the experiment."], [34, 3, 2, 0, "shots", "Shots of the job."], [34, 3, 2, 0, "tags", "The tags of the experiment."], [34, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [34, 3, 2, 0, "wave1", "The key or the circuit to execute."], [34, 3, 2, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure": [[35, 0, 0, 1, "analysis", ""], [35, 0, 0, 1, "arguments", ""], [35, 0, 0, 1, "experiment", ""], [35, 0, 0, 1, "qurry", ""], [35, 0, 0, 1, "utils", ""]], "qurry.qurrech.randomized_measure.analysis": [[35, 4, 1, 0, "ELRAnalysisContent", "The content of the analysis."], [35, 4, 1, 0, "ELRAnalysisInput", "To set the analysis."], [35, 4, 1, 0, "EchoListenRandomizedAnalysis", "The analysis of loschmidt echo."]], "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent": [[35, 6, 1, 0, "classical_registers", "The list of the index of the selected classical registers."], [35, 6, 1, 0, "classical_registers_actually", "The list of the index of the selected classical registers which is actually used."], [35, 6, 1, 0, "counts_num", "The number of first counts and second counts."], [35, 6, 1, 0, "counts_used", "The index of the counts used. If not specified, then use all counts."], [35, 6, 1, 0, "echo", "The overlap value."], [35, 6, 1, 0, "echoCells", "The overlap of each single count."], [35, 6, 1, 0, "echoSD", "The overlap standard deviation."], [35, 6, 1, 0, "num_classical_registers", "The number of classical registers."], [35, 6, 1, 0, "taking_time", "The calculation time."]], "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent.__init__": [[35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "classical_registers", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "classical_registers_actually", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "counts_num", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "counts_used", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "echo", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "echoCells", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "echoSD", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "num_classical_registers", "The content of the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisContent", "taking_time", "The content of the analysis."]], "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput": [[35, 6, 1, 0, "bitstring_mapping_1", "The mapping of the bitstring with the classical registers. When there are mulitple classical registers, the bitstring is the concatenation of the classical registers with space on bitstring. For example, there are three registers with the size of 4, 4, and 6, which the first six bits are for the randomized measurement."], [35, 6, 1, 0, "bitstring_mapping_2", "The mapping of the bitstring with the classical registers. When there are mulitple classical registers, the bitstring is the concatenation of the classical registers with space on bitstring. For example, there are three registers with the size of 4, 4, and 6, which the first six bits are for the randomized measurement."], [35, 6, 1, 0, "registers_mapping_1", "The mapping of the classical registers with quantum registers. for the first quantum circuit."], [35, 6, 1, 0, "registers_mapping_2", "The mapping of the classical registers with quantum registers. for the second quantum circuit."], [35, 6, 1, 0, "shots", "The number of shots."], [35, 6, 1, 0, "unitary_located_mapping_1", "The range of the unitary operator for the first quantum circuit."], [35, 6, 1, 0, "unitary_located_mapping_2", "The range of the unitary operator for the second quantum circuit."]], "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput.__init__": [[35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "bitstring_mapping_1", "To set the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "bitstring_mapping_2", "To set the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "registers_mapping_1", "To set the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "registers_mapping_2", "To set the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "shots", "To set the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "unitary_located_mapping_1", "To set the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.ELRAnalysisInput", "unitary_located_mapping_2", "To set the analysis."]], "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis": [[35, 7, 1, 0, "content_type", "The content instance type."], [35, 7, 1, 0, "input_type", "The input instance type."], [35, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis.__init__": [[35, 3, 2, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis", "datatime", "The analysis of loschmidt echo."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis", "log", "The analysis of loschmidt echo."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis", "other_kwargs", "The analysis of loschmidt echo."], [35, 3, 2, "qurry.qurrech.randomized_measure.analysis.EchoListenRandomizedAnalysis", "serial", "The analysis of loschmidt echo."]], "qurry.qurrech.randomized_measure.arguments": [[35, 4, 1, 0, "EchoListenRandomizedAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [35, 4, 1, 0, "EchoListenRandomizedArguments", "Arguments for EchoListenRandomizedExperiment."], [35, 4, 1, 0, "EchoListenRandomizedMeasureArgs", "Input fields for measure() and multiOutput()."], [35, 4, 1, 0, "EchoListenRandomizedOutputArgs", "Output arguments for output()."], [35, 8, 1, 0, "SHORT_NAME", "The short name of EchoListenRandomizedExperiment."]], "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedAnalyzeArgs": [[35, 6, 1, 0, "backend", "The backend for the process."], [35, 6, 1, 0, "counts_used", "The index of the counts used."], [35, 6, 1, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers. It's not the qubit index of first or second quantum circuit, but their corresponding classical registers."]], "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments": [[35, 6, 1, 0, "actual_num_qubits_1", "The actual number of qubits of the first quantum circuit."], [35, 6, 1, 0, "actual_num_qubits_2", "The actual number of qubits of the second quantum circuit."], [35, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [35, 6, 1, 0, "qubits_measured_1", "The measure range for the first quantum circuit."], [35, 6, 1, 0, "qubits_measured_2", "The measure range for the second quantum circuit."], [35, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [35, 6, 1, 0, "registers_mapping_1", "The mapping of the classical registers with quantum registers. for the first quantum circuit."], [35, 6, 1, 0, "registers_mapping_2", "The mapping of the classical registers with quantum registers. for the second quantum circuit."], [35, 6, 1, 0, "second_backend", "The extra backend for the second quantum circuit. If None, then use the same backend as the first quantum circuit."], [35, 6, 1, 0, "second_transpile_args", "Arguments of transpile() or PassManager for the second quantum circuit. And it only works when the second backend is given."], [35, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [35, 6, 1, 0, "unitary_located_mapping_1", "The range of the unitary operator for the first quantum circuit."], [35, 6, 1, 0, "unitary_located_mapping_2", "The range of the unitary operator for the second quantum circuit."]], "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments.__init__": [[35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "actual_num_qubits_1", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "actual_num_qubits_2", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "exp_name", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "qubits_measured_1", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "qubits_measured_2", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "random_unitary_seeds", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "registers_mapping_1", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "registers_mapping_2", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "second_backend", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "second_transpile_args", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "times", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "unitary_located_mapping_1", "Arguments for EchoListenRandomizedExperiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedArguments", "unitary_located_mapping_2", "Arguments for EchoListenRandomizedExperiment."]], "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedMeasureArgs": [[35, 6, 1, 0, "measure_1", "The measure range for the first quantum circuit."], [35, 6, 1, 0, "measure_2", "The measure range for the second quantum circuit."], [35, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [35, 6, 1, 0, "second_backend", "The extra backend for the second group of quantum circuits. If None, then use the same backend as the first quantum circuit."], [35, 6, 1, 0, "second_passmanager", "The passmanager for the second quantum circuit."], [35, 6, 1, 0, "second_transpile_args", "The transpile arguments for the second group of quantum circuits."], [35, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [35, 6, 1, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit."], [35, 6, 1, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit."], [35, 6, 1, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range."], [35, 6, 1, 0, "wave1", "The key or the circuit to execute."], [35, 6, 1, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure.arguments.EchoListenRandomizedOutputArgs": [[35, 6, 1, 0, "measure_1", "The measure range for the first quantum circuit."], [35, 6, 1, 0, "measure_2", "The measure range for the second quantum circuit."], [35, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [35, 6, 1, 0, "second_backend", "The extra backend for the second quantum circuit. If None, then use the same backend as the first quantum circuit."], [35, 6, 1, 0, "second_passmanager_pair", "The passmanager for the second quantum circuit."], [35, 6, 1, 0, "second_transpile_args", "The transpile arguments for the second group of quantum circuits."], [35, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [35, 6, 1, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit."], [35, 6, 1, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit."], [35, 6, 1, 0, "unitary_loc_not_cover_measure", "Confirm that not all unitary operator are covered by the measure."]], "qurry.qurrech.randomized_measure.experiment": [[35, 4, 1, 0, "EchoListenRandomizedExperiment", "The instance of experiment."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment": [[35, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [35, 7, 1, 0, "analyze", "Calculate wave function overlap with more information combined."], [35, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [35, 7, 1, 0, "build", "Construct the experiment."], [35, 7, 1, 0, "method", "The method to construct circuit."], [35, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [35, 7, 1, 0, "quantities", "Calculate entangled entropy with more information combined."], [35, 7, 1, 0, "result", "Export the result of the experiment."], [35, 7, 1, 0, "run", "Export the result after running the job."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.__init__": [[35, 3, 2, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", "afterwards", "The instance of experiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", "arguments", "The instance of experiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", "beforewards", "The instance of experiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", "commonparams", "The instance of experiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", "outfields", "The instance of experiment."], [35, 3, 2, "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment", "reports", "The instance of experiment."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.analyze": [[35, 3, 2, 0, "backend", "The backend for the process."], [35, 3, 2, 0, "counts_used", "The index of the counts used."], [35, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [35, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers. It's not the qubit index of first or second quantum circuit, but their corresponding classical registers. Defaults to None."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.build": [[35, 3, 2, 0, "backend", "The quantum backend."], [35, 3, 2, 0, "custom_and_main_kwargs", "Other custom arguments."], [35, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [35, 3, 2, 0, "export", "Whether to export the experiment."], [35, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [35, 3, 2, 0, "passmanager_pair", "The passmanager pair for transpile."], [35, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [35, 3, 2, 0, "qasm_version", "The export version of OpenQASM."], [35, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [35, 3, 2, 0, "save_location", "The location to save the experiment."], [35, 3, 2, 0, "second_passmanager_pair", "The passmanager pair for transpile of the second circuit. Defaults to None."], [35, 3, 2, 0, "serial", "Index of experiment in MultiManager. !!ATTENTION, this should only be used by :class:`~qurry.qurrium.multimanager.multimanager.MultiManager`!! Defaults to None."], [35, 3, 2, 0, "shots", "Shots of the job."], [35, 3, 2, 0, "summoner_id", "ID of experiment of MultiManager. !!ATTENTION, this should only be used by :class:`~qurry.qurrium.multimanager.multimanager.MultiManager`!! Defaults to None."], [35, 3, 2, 0, "summoner_name", "Name of experiment of MultiManager. !!ATTENTION, this should only be used by :class:`~qurry.qurrium.multimanager.multimanager.MultiManager`!! Defaults to None."], [35, 3, 2, 0, "tags", "Given the experiment multiple tags to make a dictionary for recongnizing it. Defaults to None."], [35, 3, 2, 0, "targets", "The circuits of the experiment."], [35, 3, 2, 0, "transpile_args", "Arguments of transpile() Defaults to None."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.method": [[35, 3, 2, 0, "arguments", "The arguments of the experiment."], [35, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [35, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [35, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.params_control": [[35, 3, 2, 0, "custom_kwargs", "The custom parameters."], [35, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [35, 3, 2, 0, "measure_1", "The selected qubits for the measurement for the first quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "measure_2", "The selected qubits for the measurement for the second quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [35, 3, 2, 0, "second_backend", "The extra backend for the second quantum circuit. If None, then use the same backend as the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "targets", "The circuits of the experiment."], [35, 3, 2, 0, "times", "The number of random unitary operator."], [35, 3, 2, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_not_cover_measure", "Confirm that not all unitary operator are covered by the measure. If True, then close the warning. Defaults to False."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.quantities": [[35, 3, 2, 0, "backend", "Backend for the process."], [35, 3, 2, 0, "first_counts", "Counts of the experiment on quantum machine."], [35, 3, 2, 0, "pbar", "The progress bar API, you can use put a tqdm.tqdm <https://tqdm.github.io/> object here. This function will update the progress bar description. Defaults to None."], [35, 3, 2, 0, "second_counts", "Counts of the experiment on quantum machine."], [35, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [35, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.result": [[35, 3, 2, 0, "export", "Whether to export the experiment."], [35, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [35, 3, 2, 0, "save_location", "The location to save the experiment."]], "qurry.qurrech.randomized_measure.experiment.EchoListenRandomizedExperiment.run": [[35, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."]], "qurry.qurrech.randomized_measure.qurry": [[35, 4, 1, 0, "EchoListenRandomized", "Randomized Measure for wave function overlap. a.k.a. loschmidt echo when processes time evolution system."]], "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized": [[35, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [35, 7, 1, 0, "measure", "Execute the experiment."], [35, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [35, 7, 1, 0, "multiAnalysis", "Run the analysis for multiple experiments."], [35, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.measure": [[35, 3, 2, 0, "backend", "The quantum backend."], [35, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [35, 3, 2, 0, "export", "Whether to export the experiment."], [35, 3, 2, 0, "measure_1", "The selected qubits for the measurement for the first quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "measure_2", "The selected qubits for the measurement for the second quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "passmanager", "The passmanager."], [35, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [35, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [35, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [35, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [35, 3, 2, 0, "save_location", "The location to save the experiment."], [35, 3, 2, 0, "second_backend", "The extra backend for the second quantum circuit. If None, then use the same backend as the first quantum circuit. Defaults to None."], [35, 3, 2, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.measure", "second_passmanager", "Execute the experiment."], [35, 3, 2, 0, "second_transpile_args", "Arguments of transpile() from qiskit.compiler.transpiler for the second quantum circuit."], [35, 3, 2, 0, "shots", "Shots of the job."], [35, 3, 2, 0, "tags", "The tags of the experiment."], [35, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [35, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [35, 3, 2, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range. Defaults to False."], [35, 3, 2, 0, "wave1", "The key or the circuit to execute."], [35, 3, 2, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.measure_to_output": [[35, 3, 2, 0, "backend", "The quantum backend."], [35, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [35, 3, 2, 0, "export", "Whether to export the experiment."], [35, 3, 2, 0, "measure_1", "The selected qubits for the measurement for the first quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "measure_2", "The selected qubits for the measurement for the second quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "passmanager", "The passmanager."], [35, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [35, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [35, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [35, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [35, 3, 2, 0, "save_location", "The location to save the experiment."], [35, 3, 2, 0, "second_backend", "The extra backend for the second quantum circuit. If None, then use the same backend as the first quantum circuit. Defaults to None."], [35, 3, 2, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.measure_to_output", "second_passmanager", "Trasnform measure() arguments form into output() form."], [35, 3, 2, 0, "second_transpile_args", "Arguments of transpile() from qiskit.compiler.transpiler for the second quantum circuit."], [35, 3, 2, 0, "shots", "Shots of the job."], [35, 3, 2, 0, "tags", "The tags of the experiment."], [35, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [35, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [35, 3, 2, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range. Defaults to False."], [35, 3, 2, 0, "wave1", "The key or the circuit to execute."], [35, 3, 2, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.multiAnalysis": [[35, 3, 2, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.multiAnalysis", "analysis_args", "Run the analysis for multiple experiments."], [35, 3, 2, 0, "analysis_name", "The name of analysis."], [35, 3, 2, 0, "backend", "The backend for the process."], [35, 3, 2, 0, "counts_used", "The index of the counts used."], [35, 3, 2, 0, "multiprocess_write", "Whether use multiprocess for writing."], [35, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [35, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers. It's not the qubit index of first or second quantum circuit, but their corresponding classical registers. Defaults to None."], [35, 3, 2, 0, "skip_write", "Whether to skip the file writing during the analysis."], [35, 3, 2, "qurry.qurrech.randomized_measure.qurry.EchoListenRandomized.multiAnalysis", "specific_analysis_args", "Run the analysis for multiple experiments."], [35, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."]], "qurry.qurrech.randomized_measure.utils": [[35, 8, 1, 0, "MSG_FULL_COVER", "Message for checking whether the unitary operator covers the measurement. This message is used in the function unitary_full_cover_check() to raise an exception if the unitary operator does not cover the measurement and unitary_loc_not_cover_measure is False."], [35, 8, 1, 0, "NSG_OVERLAPPING_SIZE", "Message for checking the size of qubits measured and unitary located mapping. This message is used in the function overlapping_size_check() to raise an exception if the size of the qubits measured or unitary located mapping in the two circuits are different"], [35, 1, 1, 0, "create_config", "Create the configuration for the randomized measure."], [35, 1, 1, 0, "overlapping_given_check", "Check whether the two circuits have overlapping qubits."], [35, 1, 1, 0, "overlapping_size_check", "Check whether the size of the qubits measured and unitary located mapping are the same."], [35, 1, 1, 0, "unitary_full_cover_check", "Check whether the unitary operator covers the measurement."]], "qurry.qurrech.randomized_measure.utils.create_config": [[35, 3, 2, 0, "actual_qubits", "The number of qubits in the circuit."], [35, 3, 2, 0, "measure", "The selected qubits for the measurement. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits."], [35, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [35, 3, 2, 0, "which_circuit", "Which circuit this configuration belongs to."]], "qurry.qurrech.randomized_measure.utils.overlapping_given_check": [[35, 3, 2, 0, "actual_qubits_1", "The number of qubits in the first circuit."], [35, 3, 2, 0, "actual_qubits_2", "The number of qubits in the second circuit."], [35, 3, 2, 0, "measure_1", "The selected qubits for the measurement for the first quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "measure_2", "The selected qubits for the measurement for the second quantum circuit. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [35, 3, 2, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit. Defaults to None."]], "qurry.qurrech.randomized_measure.utils.overlapping_size_check": [[35, 3, 2, 0, "qubits_measured_1", "The qubits measured in the first circuit."], [35, 3, 2, 0, "qubits_measured_2", "The qubits measured in the second circuit."], [35, 3, 2, 0, "unitary_located_mapping_1", "The unitary located mapping in the first circuit."], [35, 3, 2, 0, "unitary_located_mapping_2", "The unitary located mapping in the second circuit."]], "qurry.qurrech.randomized_measure.utils.unitary_full_cover_check": [[35, 3, 2, 0, "measure_1", "The selected qubits for the measurement for the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "measure_2", "The selected qubits for the measurement for the second quantum circuit. Defaults to None."], [35, 3, 2, 0, "measured_but_not_unitary_located_1", "The qubits that are measured but not located in the first circuit."], [35, 3, 2, 0, "measured_but_not_unitary_located_2", "The qubits that are measured but not located in the second circuit."], [35, 3, 2, 0, "unitary_loc_1", "The range of the unitary operator for the first quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_2", "The range of the unitary operator for the second quantum circuit. Defaults to None."], [35, 3, 2, 0, "unitary_loc_not_cover_measure", "If True, the unitary operator does not cover the measurement."]], "qurry.qurrech.randomized_measure_v1": [[36, 0, 0, 1, "analysis", ""], [36, 0, 0, 1, "arguments", ""], [36, 0, 0, 1, "experiment", ""], [36, 0, 0, 1, "qurry", ""]], "qurry.qurrech.randomized_measure_v1.analysis": [[36, 4, 1, 0, "ELRV1AnalysisContent", "The content of the analysis."], [36, 4, 1, 0, "ELRV1AnalysisInput", "To set the analysis."], [36, 4, 1, 0, "EchoListenRandomizedV1Analysis", "The analysis of loschmidt echo."]], "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent": [[36, 6, 1, 0, "bitStringRange", "The qubit range of the subsystem."], [36, 6, 1, 0, "countsNum", "The number of counts of the experiment."], [36, 6, 1, 0, "counts_used", "The index of the counts used. If not specified, then use all counts."], [36, 6, 1, 0, "echo", "The purity of the system."], [36, 6, 1, 0, "echoCells", "The echo of each cell of the system."], [36, 6, 1, 0, "echoSD", "The standard deviation of the purity of the system."], [36, 6, 1, 0, "measureActually", "The qubit range of the measurement actually used."], [36, 6, 1, 0, "takingTime", "The taking time of the selected system."]], "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent.__init__": [[36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "bitStringRange", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "countsNum", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "counts_used", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "echo", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "echoCells", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "echoSD", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "measureActually", "The content of the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisContent", "takingTime", "The content of the analysis."]], "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput": [[36, 6, 1, 0, "degree", "The range of partition."], [36, 6, 1, 0, "shots", "The number of shots."], [36, 6, 1, 0, "unitary_loc", "The location of the random unitary operator."]], "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput.__init__": [[36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput", "degree", "To set the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput", "shots", "To set the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.ELRV1AnalysisInput", "unitary_loc", "To set the analysis."]], "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis": [[36, 7, 1, 0, "content_type", "The content instance type."], [36, 7, 1, 0, "input_type", "The input instance type."], [36, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis.__init__": [[36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis", "datatime", "The analysis of loschmidt echo."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis", "log", "The analysis of loschmidt echo."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis", "other_kwargs", "The analysis of loschmidt echo."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.analysis.EchoListenRandomizedV1Analysis", "serial", "The analysis of loschmidt echo."]], "qurry.qurrech.randomized_measure_v1.arguments": [[36, 4, 1, 0, "EchoListenRandomizedV1AnalyzeArgs", "The input of multiAnalysis() and analyze()."], [36, 4, 1, 0, "EchoListenRandomizedV1Arguments", "Arguments for EchoListenRandomizedV1Experiment."], [36, 4, 1, 0, "EchoListenRandomizedV1MeasureArgs", "Input fields for measure() and multiOutput()."], [36, 4, 1, 0, "EchoListenRandomizedV1OutputArgs", "Output arguments for output()."], [36, 8, 1, 0, "SHORT_NAME", "The short name of EchoListenRandomizedV1Experiment."]], "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1AnalyzeArgs": [[36, 6, 1, 0, "backend", "The backend for the process."], [36, 6, 1, 0, "counts_used", "The index of the counts used."], [36, 6, 1, 0, "degree", "The degree range."], [36, 6, 1, 0, "independent_all_system", "If True, then calculate the all system independently."], [36, 6, 1, 0, "workers_num", "The number of workers for multiprocessing."]], "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments": [[36, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [36, 6, 1, 0, "measure", "The measure range."], [36, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [36, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [36, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [36, 6, 1, 0, "workers_num", "The number of workers for multiprocessing."]], "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments.__init__": [[36, 3, 2, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", "exp_name", "Arguments for EchoListenRandomizedV1Experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", "measure", "Arguments for EchoListenRandomizedV1Experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", "random_unitary_seeds", "Arguments for EchoListenRandomizedV1Experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", "times", "Arguments for EchoListenRandomizedV1Experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", "unitary_loc", "Arguments for EchoListenRandomizedV1Experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1Arguments", "workers_num", "Arguments for EchoListenRandomizedV1Experiment."]], "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1MeasureArgs": [[36, 6, 1, 0, "measure", "The measure range."], [36, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [36, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [36, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [36, 6, 1, 0, "wave1", "The key or the circuit to execute."], [36, 6, 1, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure_v1.arguments.EchoListenRandomizedV1OutputArgs": [[36, 6, 1, 0, "measure", "The measure range."], [36, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [36, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [36, 6, 1, 0, "unitary_loc", "The range of the unitary operator."]], "qurry.qurrech.randomized_measure_v1.experiment": [[36, 4, 1, 0, "EchoListenRandomizedV1Experiment", "The instance of experiment."]], "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment": [[36, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [36, 7, 1, 0, "analyze", "Calculate entangled entropy with more information combined."], [36, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [36, 7, 1, 0, "method", "The method to construct circuit."], [36, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [36, 7, 1, 0, "quantities", "Calculate entangled entropy with more information combined."]], "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.__init__": [[36, 3, 2, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", "afterwards", "The instance of experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", "arguments", "The instance of experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", "beforewards", "The instance of experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", "commonparams", "The instance of experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", "outfields", "The instance of experiment."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment", "reports", "The instance of experiment."]], "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.analyze": [[36, 3, 2, 0, "backend", "Backend for the process."], [36, 3, 2, 0, "counts_used", "The index of the counts used. If not specified, then use all counts. Defaults to None."], [36, 3, 2, 0, "degree", "Degree of the subsystem."], [36, 3, 2, 0, "pbar", "Progress bar."], [36, 3, 2, 0, "workers_num", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts - 2 by cpu_count() - 2. Defaults to None."]], "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.method": [[36, 3, 2, 0, "arguments", "The arguments of the experiment."], [36, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [36, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [36, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.params_control": [[36, 3, 2, 0, "custom_kwargs", "The custom parameters."], [36, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [36, 3, 2, 0, "measure", "The measure range."], [36, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [36, 3, 2, 0, "targets", "The circuits of the experiment."], [36, 3, 2, 0, "times", "The number of random unitary operator."], [36, 3, 2, 0, "unitary_loc", "The range of the unitary operator."]], "qurry.qurrech.randomized_measure_v1.experiment.EchoListenRandomizedV1Experiment.quantities": [[36, 3, 2, 0, "backend", "Backend for the process."], [36, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [36, 3, 2, 0, "degree", "Degree of the subsystem."], [36, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [36, 3, 2, 0, "pbar", "Progress bar."], [36, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."], [36, 3, 2, 0, "workers_num", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts - 2 by cpu_count() - 2. Defaults to None."]], "qurry.qurrech.randomized_measure_v1.qurry": [[36, 4, 1, 0, "EchoListenRandomizedV1", "Randomized Measure for wave function overlap. a.k.a. loschmidt echo when processes time evolution system."]], "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1": [[36, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [36, 7, 1, 0, "measure", "Execute the experiment."], [36, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [36, 7, 1, 0, "multiAnalysis", "Run the analysis for multiple experiments."], [36, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.measure": [[36, 3, 2, 0, "backend", "The quantum backend."], [36, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [36, 3, 2, 0, "export", "Whether to export the experiment."], [36, 3, 2, 0, "measure", "The measure range."], [36, 3, 2, 0, "passmanager", "The passmanager."], [36, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [36, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [36, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [36, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [36, 3, 2, 0, "save_location", "The location to save the experiment."], [36, 3, 2, 0, "shots", "Shots of the job."], [36, 3, 2, 0, "tags", "The tags of the experiment."], [36, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [36, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [36, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [36, 3, 2, 0, "wave1", "The key or the circuit to execute."], [36, 3, 2, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.measure_to_output": [[36, 3, 2, 0, "backend", "The quantum backend."], [36, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [36, 3, 2, 0, "export", "Whether to export the experiment."], [36, 3, 2, 0, "measure", "The measure range."], [36, 3, 2, 0, "passmanager", "The passmanager."], [36, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [36, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [36, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [36, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [36, 3, 2, 0, "save_location", "The location to save the experiment."], [36, 3, 2, 0, "shots", "Shots of the job."], [36, 3, 2, 0, "tags", "The tags of the experiment."], [36, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [36, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [36, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [36, 3, 2, 0, "wave1", "The key or the circuit to execute."], [36, 3, 2, 0, "wave2", "The key or the circuit to execute."]], "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.multiAnalysis": [[36, 3, 2, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.multiAnalysis", "analysis_args", "Run the analysis for multiple experiments."], [36, 3, 2, 0, "analysis_name", "The name of analysis."], [36, 3, 2, 0, "backend", "Backend for the process."], [36, 3, 2, 0, "counts_used", "The index of the counts used. If not specified, then use all counts. Defaults to None."], [36, 3, 2, 0, "degree", "Degree of the subsystem."], [36, 3, 2, 0, "multiprocess_write", "Whether use multiprocess for writing."], [36, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [36, 3, 2, 0, "skip_write", "Whether to skip the file writing during the analysis."], [36, 3, 2, "qurry.qurrech.randomized_measure_v1.qurry.EchoListenRandomizedV1.multiAnalysis", "specific_analysis_args", "Run the analysis for multiple experiments."], [36, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."], [36, 3, 2, 0, "workers_num", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts - 2 by cpu_count() - 2. Defaults to None."]], "qurry.qurrent": [[11, 1, 1, 0, "EntropyMeasure", "Call EntropyMeasure() methods."], [37, 0, 0, 1, "classical_shadow", ""], [38, 0, 0, 1, "hadamard_test", ""], [39, 0, 0, 1, "randomized_measure", ""], [40, 0, 0, 1, "randomized_measure_v1", ""]], "qurry.qurrent.EntropyMeasure": [[11, 3, 2, "qurry.qurrent.EntropyMeasure", "args", "Call EntropyMeasure() methods."], [11, 3, 2, "qurry.qurrent.EntropyMeasure", "kwargs", "Call EntropyMeasure() methods."], [11, 3, 2, 0, "method", "The method to use for entropy measurement."]], "qurry.qurrent.classical_shadow": [[37, 0, 0, 1, "analysis", ""], [37, 0, 0, 1, "arguments", ""], [37, 0, 0, 1, "experiment", ""], [37, 0, 0, 1, "qurry", ""], [37, 0, 0, 1, "utils", ""]], "qurry.qurrent.classical_shadow.analysis": [[37, 8, 1, 0, "FIELDS_REMAPPING", "Remapping of fields from old in 0.12 to new names since 0.13. The keys are the old field names and the values are the new field names."], [37, 8, 1, 0, "NEW_FIELDS_DEFAULTS", "Default values for new fields introduced in 0.13."], [37, 4, 1, 0, "SUAnalysisContent", "The content of the analysis."], [37, 4, 1, 0, "SUAnalysisInput", "To set the analysis."], [37, 4, 1, 0, "ShadowUnveilAnalysis", "The container for the analysis of ShadowUnveilExperiment."]], "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent": [[37, 6, 1, 0, "accuracy_predict_epsilon", "The prediction of accuracy, which used the notation \\epsilon and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."], [37, 6, 1, 0, "accuracy_prob_comp_delta", "The probabiltiy complement of accuracy, which used the notation \\delta and mentioned in Theorem S1 in the supplementary material, the equation (S13) in the supplementary material. The probabiltiy of accuracy is 1 - \\delta."], [37, 6, 1, 0, "average_classical_snapshots_rho", "The dictionary of Rho M."], [37, 6, 1, 0, "classical_registers_actually", "The list of the selected_classical_registers."], [37, 6, 1, 0, "corresponding_rhos", "The corresponding rho of measurement primitive \\mathcal{U}."], [37, 6, 1, 0, "entropy", "The entropy calculated by classical shadow."], [37, 6, 1, 0, "estimate_of_given_operators", "The result of measurement primitive \\mathcal{U}."], [37, 6, 1, 0, "maximum_shadow_norm", "The maximum shadow norm, which is defined in the supplementary material with value between 0 and 1. The maximum shadow norm is used to calculate the prediction of accuracy \\epsilon from the equation (S13) in the supplementary material."], [37, 6, 1, 0, "mean_of_rho", "The expectation value of Rho."], [37, 6, 1, 0, "num_of_estimators_k", "The number of esitmators, which used the notation K and mentioned in Algorithm 1 in the paper, Theorem S1 in the supplementary material, the equation (S13) in the supplementary material."], [37, 6, 1, 0, "purity", "The purity calculated by classical shadow."], [37, 6, 1, 0, "taking_time", "The time taken for the calculation."]], "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent.__init__": [[37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "accuracy_predict_epsilon", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "accuracy_prob_comp_delta", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "average_classical_snapshots_rho", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "classical_registers_actually", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "corresponding_rhos", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "entropy", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "estimate_of_given_operators", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "maximum_shadow_norm", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "mean_of_rho", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "num_of_estimators_k", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "purity", "The content of the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisContent", "taking_time", "The content of the analysis."]], "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput": [[37, 6, 1, 0, "bitstring_mapping", "The mapping of the bitstring with the classical registers. When there are mulitple classical registers, the bitstring is the concatenation of the classical registers with space on bitstring. For example, there are three registers with the size of 4, 4, and 6, which the first six bits are for the randomized measurement."], [37, 6, 1, 0, "num_qubits", "The number of qubits."], [37, 6, 1, 0, "registers_mapping", "The mapping of the classical registers with quantum registers."], [37, 6, 1, 0, "selected_qubits", "The selected qubits."], [37, 6, 1, 0, "shots", "The number of shots."], [37, 6, 1, 0, "unitary_located", "The range of the unitary operator."]], "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput.__init__": [[37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", "bitstring_mapping", "To set the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", "num_qubits", "To set the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", "registers_mapping", "To set the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", "selected_qubits", "To set the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", "shots", "To set the analysis."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.SUAnalysisInput", "unitary_located", "To set the analysis."]], "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis": [[37, 7, 1, 0, "content_type", "The type of the content for the analysis."], [37, 7, 1, 0, "deprecated_fields_converts", "Convert deprecated fields to new fields."], [37, 7, 1, 0, "input_type", "The type of the input for the analysis."], [37, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis.__init__": [[37, 3, 2, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis", "datatime", "The container for the analysis of ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis", "log", "The container for the analysis of ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis", "other_kwargs", "The container for the analysis of ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis", "serial", "The container for the analysis of ShadowUnveilExperiment."]], "qurry.qurrent.classical_shadow.analysis.ShadowUnveilAnalysis.deprecated_fields_converts": [[37, 3, 2, 0, "main", "The main product dict."], [37, 3, 2, 0, "side", "The side product dict."]], "qurry.qurrent.classical_shadow.arguments": [[37, 8, 1, 0, "SHORT_NAME", "The short name of ShadowUnveilExperiment."], [37, 4, 1, 0, "ShadowUnveilAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [37, 4, 1, 0, "ShadowUnveilArguments", "Arguments for ShadowUnveilExperiment."], [37, 4, 1, 0, "ShadowUnveilMeasureArgs", "Input fields for measure() and multiOutput()."], [37, 4, 1, 0, "ShadowUnveilOutputArgs", "Output arguments for output()."]], "qurry.qurrent.classical_shadow.arguments.ShadowUnveilAnalyzeArgs": [[37, 6, 1, 0, "backend", "The backend for the process."], [37, 6, 1, 0, "counts_used", "The index of the counts used."], [37, 6, 1, 0, "selected_qubits", "The selected qubits."]], "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments": [[37, 6, 1, 0, "actual_num_qubits", "The actual number of qubits."], [37, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [37, 6, 1, 0, "qubits_measured", "The measure range."], [37, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [37, 6, 1, 0, "registers_mapping", "The mapping of the classical registers with quantum registers."], [37, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [37, 6, 1, 0, "unitary_located", "The range of the unitary operator."]], "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments.__init__": [[37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "actual_num_qubits", "Arguments for ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "exp_name", "Arguments for ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "qubits_measured", "Arguments for ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "random_unitary_seeds", "Arguments for ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "registers_mapping", "Arguments for ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "times", "Arguments for ShadowUnveilExperiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.arguments.ShadowUnveilArguments", "unitary_located", "Arguments for ShadowUnveilExperiment."]], "qurry.qurrent.classical_shadow.arguments.ShadowUnveilMeasureArgs": [[37, 6, 1, 0, "measure", "The measure range."], [37, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [37, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [37, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [37, 6, 1, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range."], [37, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.classical_shadow.arguments.ShadowUnveilOutputArgs": [[37, 6, 1, 0, "measure", "The measure range."], [37, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [37, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [37, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [37, 6, 1, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range."]], "qurry.qurrent.classical_shadow.experiment": [[37, 4, 1, 0, "OutsideAnalyzeInput", "The input for the outside analyze."], [37, 4, 1, 0, "ShadowUnveilExperiment", "The instance of experiment."], [37, 1, 1, 0, "outside_analyze", "Randomized entangled entropy with complex."], [37, 1, 1, 0, "outside_analyze_wrapper", "Wrapper for the outside analyze."], [37, 1, 1, 0, "quantities_input_collecter", "Collect the inputs for the quantities."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment": [[37, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [37, 7, 1, 0, "analyze", "Calculate entangled entropy with more information combined."], [37, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [37, 7, 1, 0, "method", "The method to construct circuit."], [37, 7, 1, 0, "outside_analysis_recover", "Recover the analysis from the outside."], [37, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [37, 7, 1, 0, "quantities", "Randomized entangled entropy with complex."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.__init__": [[37, 3, 2, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", "afterwards", "The instance of experiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", "arguments", "The instance of experiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", "beforewards", "The instance of experiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", "commonparams", "The instance of experiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", "outfields", "The instance of experiment."], [37, 3, 2, "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment", "reports", "The instance of experiment."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.analyze": [[37, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [37, 3, 2, 0, "counts_used", "The index of the counts used."], [37, 3, 2, 0, "estimate_trace_method", "The method to calculate the trace for searching esitmator."], [37, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [37, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [37, 3, 2, 0, "pbar", "The progress bar."], [37, 3, 2, 0, "rho_method", "The method to use for the calculation."], [37, 3, 2, 0, "selected_qubits", "The selected qubits."], [37, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.method": [[37, 3, 2, 0, "arguments", "The arguments of the experiment."], [37, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [37, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [37, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.outside_analysis_recover": [[37, 3, 2, 0, "analysis", "The analysis to recover."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.params_control": [[37, 3, 2, 0, "custom_kwargs", "The custom parameters."], [37, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [37, 3, 2, 0, "measure", "The measure range."], [37, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [37, 3, 2, 0, "targets", "The circuits of the experiment."], [37, 3, 2, 0, "times", "The number of random unitary operator."], [37, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [37, 3, 2, 0, "unitary_loc_not_cover_measure", "Confirm that not all unitary operator are covered by the measure. If True, then close the warning. Defaults to False."]], "qurry.qurrent.classical_shadow.experiment.ShadowUnveilExperiment.quantities": [[37, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [37, 3, 2, 0, "counts", "The list of the counts."], [37, 3, 2, 0, "estimate_trace_method", "The method to calculate the trace for searching esitmator."], [37, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [37, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [37, 3, 2, 0, "pbar", "The progress bar."], [37, 3, 2, 0, "random_unitary_ids", "The shadow direction of the unitary operators."], [37, 3, 2, 0, "rho_method", "The method to use for the calculation."], [37, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [37, 3, 2, 0, "shots", "The number of shots."], [37, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.qurrent.classical_shadow.experiment.outside_analyze": [[37, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [37, 3, 2, 0, "bitstring_mapping", "The mapping of the bitstring to the index of the classical register."], [37, 3, 2, 0, "counts", "The list of the counts."], [37, 3, 2, 0, "counts_used", "The index of the counts used."], [37, 3, 2, 0, "estimate_trace_method", "The method to calculate the trace for searching esitmator."], [37, 3, 2, 0, "exp_id", "The ID of the experiment."], [37, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [37, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [37, 3, 2, 0, "num_qubits", "The number of qubits."], [37, 3, 2, 0, "random_unitary_ids", "The shadow direction of the unitary operators."], [37, 3, 2, 0, "registers_mapping", "The mapping of the index of selected qubits to the index of the classical register."], [37, 3, 2, 0, "rho_method", "The method to use for the calculation."], [37, 3, 2, 0, "selected_classical_registers", "The list of the index of the selected_classical_registers."], [37, 3, 2, 0, "selected_qubits", "The selected qubits."], [37, 3, 2, 0, "serial", "The serial number of the experiment."], [37, 3, 2, 0, "shots", "The number of shots."], [37, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."], [37, 3, 2, 0, "unitary_located", "The range of the unitary operator."]], "qurry.qurrent.classical_shadow.experiment.outside_analyze_wrapper": [[37, 3, 2, 0, "all_arguments", "The arguments for the outside analyze."]], "qurry.qurrent.classical_shadow.experiment.quantities_input_collecter": [[37, 3, 2, 0, "accuracy_prob_comp_delta", "The accuracy probability component delta."], [37, 3, 2, 0, "counts_used", "The index of the counts used."], [37, 3, 2, 0, "current_exps", "The current experiment instance."], [37, 3, 2, 0, "estimate_trace_method", "The method to calculate the trace for searching esitmator."], [37, 3, 2, 0, "given_operators", "The list of the operators to estimate."], [37, 3, 2, 0, "max_shadow_norm", "The maximum shadow norm."], [37, 3, 2, 0, "rho_method", "The method to use for the calculation."], [37, 3, 2, 0, "selected_qubits", "The selected qubits."], [37, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.qurrent.classical_shadow.qurry": [[37, 4, 1, 0, "ShadowUnveil", "Classical Shadow with The Results of Second Order Renyi Entropy."]], "qurry.qurrent.classical_shadow.qurry.ShadowUnveil": [[37, 5, 1, 0, "experiment_instance", "The container class responding to this QurryV5 class."], [37, 7, 1, 0, "measure", "Execute the experiment."], [37, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [37, 7, 1, 0, "multiAnalysis", "Run the analysis for multiple experiments."], [37, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.measure": [[37, 3, 2, 0, "backend", "The quantum backend."], [37, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [37, 3, 2, 0, "export", "Whether to export the experiment."], [37, 3, 2, 0, "measure", "The measure range."], [37, 3, 2, 0, "passmanager", "The passmanager."], [37, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [37, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [37, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [37, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [37, 3, 2, 0, "save_location", "The location to save the experiment."], [37, 3, 2, 0, "shots", "Shots of the job."], [37, 3, 2, 0, "tags", "The tags of the experiment."], [37, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [37, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [37, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [37, 3, 2, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range. Defaults to False."], [37, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.measure_to_output": [[37, 3, 2, 0, "backend", "The quantum backend."], [37, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [37, 3, 2, 0, "export", "Whether to export the experiment."], [37, 3, 2, 0, "measure", "The measure range."], [37, 3, 2, 0, "passmanager", "The passmanager."], [37, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [37, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [37, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [37, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [37, 3, 2, 0, "save_location", "The location to save the experiment."], [37, 3, 2, 0, "shots", "Shots of the job."], [37, 3, 2, 0, "tags", "The tags of the experiment."], [37, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [37, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [37, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [37, 3, 2, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range. Defaults to False."], [37, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.multiAnalysis": [[37, 3, 2, "qurry.qurrent.classical_shadow.qurry.ShadowUnveil.multiAnalysis", "analysis_args", "Run the analysis for multiple experiments."], [37, 3, 2, 0, "analysis_name", "The name of analysis."], [37, 3, 2, 0, "counts_used", "The counts used for the analysis."], [37, 3, 2, 0, "multiprocess_analysis", "Whether use multiprocess for analysis."], [37, 3, 2, 0, "multiprocess_write", "Whether use multiprocess for writing."], [37, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [37, 3, 2, 0, "rho_method", "The method to use for the calculation."], [37, 3, 2, 0, "selected_qubits", "The selected qubits."], [37, 3, 2, 0, "skip_write", "Whether to skip the file writing during the analysis."], [37, 3, 2, 0, "specific_analysis_args", "The specific arguments for analysis."], [37, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."], [37, 3, 2, 0, "trace_method", "The method to calculate the trace of Rho square."]], "qurry.qurrent.classical_shadow.utils": [[37, 1, 1, 0, "circuit_method_core", "Build the circuit for the experiment."]], "qurry.qurrent.classical_shadow.utils.circuit_method_core": [[37, 3, 2, 0, "exp_name", "Experiment name."], [37, 3, 2, 0, "idx", "Index of the quantum circuit."], [37, 3, 2, 0, "registers_mapping", "The mapping of the index of selected qubits to the index of the classical register."], [37, 3, 2, "qurry.qurrent.classical_shadow.utils.circuit_method_core", "single_unitary_um", "Build the circuit for the experiment."], [37, 3, 2, 0, "target_circuit", "Target circuit."], [37, 3, 2, 0, "target_key", "Target key."]], "qurry.qurrent.hadamard_test": [[38, 0, 0, 1, "analysis", ""], [38, 0, 0, 1, "arguments", ""], [38, 0, 0, 1, "experiment", ""], [38, 0, 0, 1, "qurry", ""]], "qurry.qurrent.hadamard_test.analysis": [[38, 4, 1, 0, "EMHAnalysisContent", "The content of the analysis."], [38, 4, 1, 0, "EMHAnalysisInput", "To set the analysis."], [38, 4, 1, 0, "EntropyMeasureHadamardAnalysis", "The instance for the analysis of EntropyMeasureHadamardExperiment."]], "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent": [[38, 6, 1, 0, "entropy", "The entanglement entropy of the system."], [38, 6, 1, 0, "purity", "The purity of the system."]], "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent.__init__": [[38, 3, 2, "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent", "entropy", "The content of the analysis."], [38, 3, 2, "qurry.qurrent.hadamard_test.analysis.EMHAnalysisContent", "purity", "The content of the analysis."]], "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis": [[38, 7, 1, 0, "content_type", "The content instance type."], [38, 7, 1, 0, "input_type", "The input instance type."], [38, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis.__init__": [[38, 3, 2, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis", "datatime", "The instance for the analysis of EntropyMeasureHadamardExperiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis", "log", "The instance for the analysis of EntropyMeasureHadamardExperiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis", "other_kwargs", "The instance for the analysis of EntropyMeasureHadamardExperiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.analysis.EntropyMeasureHadamardAnalysis", "serial", "The instance for the analysis of EntropyMeasureHadamardExperiment."]], "qurry.qurrent.hadamard_test.arguments": [[38, 4, 1, 0, "EntropyMeasureHadamardAnalyzeArgs", "The input of multiAnalysis(). and analyze()."], [38, 4, 1, 0, "EntropyMeasureHadamardArguments", "Arguments for EntropyMeasureHadamard."], [38, 4, 1, 0, "EntropyMeasureHadamardMeasureArgs", "Input fields for measure() and multiOutput()."], [38, 4, 1, 0, "EntropyMeasureHadamardOutputArgs", "Output arguments for output()."], [38, 8, 1, 0, "SHORT_NAME", "The short name of EntropyMeasureHadamard."]], "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments": [[38, 6, 1, 0, "degree", "The degree range."], [38, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."]], "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments.__init__": [[38, 3, 2, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments", "degree", "Arguments for EntropyMeasureHadamard."], [38, 3, 2, "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardArguments", "exp_name", "Arguments for EntropyMeasureHadamard."]], "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardMeasureArgs": [[38, 6, 1, 0, "degree", "The degree range."], [38, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.hadamard_test.arguments.EntropyMeasureHadamardOutputArgs": [[38, 6, 1, 0, "degree", "The degree range."]], "qurry.qurrent.hadamard_test.experiment": [[38, 4, 1, 0, "EntropyMeasureHadamardExperiment", "The instance of experiment."]], "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment": [[38, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [38, 7, 1, 0, "analyze", "Calculate entangled entropy with more information combined."], [38, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [38, 7, 1, 0, "method", "The method to construct circuit."], [38, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [38, 7, 1, 0, "quantities", "Calculate entangled entropy with more information combined."]], "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.__init__": [[38, 3, 2, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", "afterwards", "The instance of experiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", "arguments", "The instance of experiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", "beforewards", "The instance of experiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", "commonparams", "The instance of experiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", "outfields", "The instance of experiment."], [38, 3, 2, "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment", "reports", "The instance of experiment."]], "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.analyze": [[38, 3, 2, 0, "pbar", "The progress bar."]], "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.method": [[38, 3, 2, 0, "arguments", "The arguments of the experiment."], [38, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [38, 3, 2, 0, "pbar", "The progress bar."], [38, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.params_control": [[38, 3, 2, 0, "custom_kwargs", "The custom parameters."], [38, 3, 2, 0, "degree", "The degree range. Defaults to None."], [38, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [38, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrent.hadamard_test.experiment.EntropyMeasureHadamardExperiment.quantities": [[38, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [38, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."]], "qurry.qurrent.hadamard_test.qurry": [[38, 4, 1, 0, "EntropyMeasureHadamard", "Hadamard test for entanglement entropy."]], "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard": [[38, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [38, 7, 1, 0, "measure", "Execute the experiment."], [38, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [38, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard.measure": [[38, 3, 2, 0, "backend", "The quantum backend."], [38, 3, 2, 0, "degree", "The degree of the experiment. Defaults to None."], [38, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [38, 3, 2, 0, "export", "Whether to export the experiment."], [38, 3, 2, 0, "passmanager", "The passmanager."], [38, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [38, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [38, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [38, 3, 2, 0, "save_location", "The location to save the experiment."], [38, 3, 2, 0, "shots", "Shots of the job."], [38, 3, 2, 0, "tags", "The tags of the experiment."], [38, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [38, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.hadamard_test.qurry.EntropyMeasureHadamard.measure_to_output": [[38, 3, 2, 0, "backend", "The quantum backend."], [38, 3, 2, 0, "degree", "The degree of the experiment. Defaults to None."], [38, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [38, 3, 2, 0, "export", "Whether to export the experiment."], [38, 3, 2, 0, "passmanager", "The passmanager."], [38, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [38, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [38, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [38, 3, 2, 0, "save_location", "The location to save the experiment."], [38, 3, 2, 0, "shots", "Shots of the job."], [38, 3, 2, 0, "tags", "The tags of the experiment."], [38, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [38, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure": [[39, 0, 0, 1, "analysis", ""], [39, 0, 0, 1, "arguments", ""], [39, 0, 0, 1, "experiment", ""], [39, 0, 0, 1, "qurry", ""], [39, 0, 0, 1, "utils", ""]], "qurry.qurrent.randomized_measure.analysis": [[39, 4, 1, 0, "EMRAnalysisContent", "The content of the analysis."], [39, 4, 1, 0, "EMRAnalysisInput", "To set the analysis."], [39, 4, 1, 0, "EntropyMeasureRandomizedAnalysis", "The container for the analysis of EntropyRandomizedExperiment."]], "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent": [[39, 6, 1, 0, "all_system_source", "The name of source of all system."], [39, 6, 1, 0, "classical_registers", "The list of the index of the selected classical registers."], [39, 6, 1, 0, "classical_registers_actually", "The list of the index of the selected classical registers which is actually used."], [39, 6, 1, 0, "classical_registers_actually_all_sys", "The list of the index of the selected classical registers which is actually used."], [39, 6, 1, 0, "classical_registers_all_sys", "The list of the index of the selected classical registers."], [39, 6, 1, 0, "counts_num", "The number of counts."], [39, 6, 1, 0, "counts_used", "The index of the counts used. If not specified, then use all counts."], [39, 6, 1, 0, "entropy", "The entanglement entropy of the subsystem."], [39, 6, 1, 0, "entropyAllSys", "The entanglement entropy of the system."], [39, 6, 1, 0, "entropySD", "The standard deviation of the entanglement entropy of the subsystem."], [39, 6, 1, 0, "entropySDAllSys", "The standard deviation of the entanglement entropy of the system."], [39, 6, 1, 0, "errorRate", "The error rate of the measurement from depolarizing error migigation calculated."], [39, 6, 1, 0, "mitigatedEntropy", "The mitigated entanglement entropy of the subsystem."], [39, 6, 1, 0, "mitigatedPurity", "The mitigated purity of the subsystem."], [39, 6, 1, 0, "num_classical_registers", "The number of classical registers."], [39, 6, 1, 0, "num_classical_registers_all_sys", "The number of classical registers of all system."], [39, 6, 1, 0, "purity", "The purity of the subsystem."], [39, 6, 1, 0, "purityAllSys", "The purity of the system."], [39, 6, 1, 0, "purityCells", "The purity of each cell of the subsystem."], [39, 6, 1, 0, "purityCellsAllSys", "The purity of each cell of the system."], [39, 6, 1, 0, "puritySD", "The standard deviation of the purity of the subsystem."], [39, 6, 1, 0, "puritySDAllSys", "The standard deviation of the purity of the system."], [39, 6, 1, 0, "taking_time", "The calculation time."], [39, 6, 1, 0, "taking_time_all_sys", "The calculation time of the all system."]], "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent.__init__": [[39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "all_system_source", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "classical_registers", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "classical_registers_actually", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "classical_registers_actually_all_sys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "classical_registers_all_sys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "counts_num", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "counts_used", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "entropy", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "entropyAllSys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "entropySD", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "entropySDAllSys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "errorRate", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "mitigatedEntropy", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "mitigatedPurity", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "num_classical_registers", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "num_classical_registers_all_sys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "purity", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "purityAllSys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "purityCells", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "purityCellsAllSys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "puritySD", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "puritySDAllSys", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "taking_time", "The content of the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisContent", "taking_time_all_sys", "The content of the analysis."]], "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput": [[39, 6, 1, 0, "bitstring_mapping", "The mapping of the bitstring with the classical registers. When there are mulitple classical registers, the bitstring is the concatenation of the classical registers with space on bitstring. For example, there are three registers with the size of 4, 4, and 6, which the first six bits are for the randomized measurement."], [39, 6, 1, 0, "num_qubits", "The number of qubits."], [39, 6, 1, 0, "registers_mapping", "The mapping of the classical registers with quantum registers."], [39, 6, 1, 0, "selected_qubits", "The selected qubits."], [39, 6, 1, 0, "shots", "The number of shots."], [39, 6, 1, 0, "unitary_located", "The range of the unitary operator."]], "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput.__init__": [[39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", "bitstring_mapping", "To set the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", "num_qubits", "To set the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", "registers_mapping", "To set the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", "selected_qubits", "To set the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", "shots", "To set the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EMRAnalysisInput", "unitary_located", "To set the analysis."]], "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis": [[39, 7, 1, 0, "content_type", "The content instance type."], [39, 7, 1, 0, "input_type", "The input instance type."], [39, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis.__init__": [[39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis", "datatime", "The container for the analysis of EntropyRandomizedExperiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis", "log", "The container for the analysis of EntropyRandomizedExperiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis", "other_kwargs", "The container for the analysis of EntropyRandomizedExperiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.analysis.EntropyMeasureRandomizedAnalysis", "serial", "The container for the analysis of EntropyRandomizedExperiment."]], "qurry.qurrent.randomized_measure.arguments": [[39, 4, 1, 0, "EntropyMeasureRandomizedAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [39, 4, 1, 0, "EntropyMeasureRandomizedArguments", "Input fields for measure() and multiOutput()."], [39, 4, 1, 0, "EntropyMeasureRandomizedMeasureArgs", "Input fields for measure() and multiOutput()."], [39, 4, 1, 0, "EntropyMeasureRandomizedOutputArgs", "Output arguments for output()."], [39, 8, 1, 0, "SHORT_NAME", "The short name of EntropyMeasureRandomizedExperiment."]], "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedAnalyzeArgs": [[39, 6, 1, 0, "backend", "The backend for the process."], [39, 6, 1, 0, "counts_used", "The index of the counts used."], [39, 6, 1, 0, "independent_all_system", "If True, then calculate the all system independently."], [39, 6, 1, 0, "selected_qubits", "The selected qubits."]], "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments": [[39, 6, 1, 0, "actual_num_qubits", "The actual number of qubits."], [39, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [39, 6, 1, 0, "qubits_measured", "The measure range."], [39, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [39, 6, 1, 0, "registers_mapping", "The mapping of the classical registers of measurement with quantum registers."], [39, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [39, 6, 1, 0, "unitary_located", "The range of the unitary operator."]], "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments.__init__": [[39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "actual_num_qubits", "Input fields for measure() and multiOutput()."], [39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "exp_name", "Input fields for measure() and multiOutput()."], [39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "qubits_measured", "Input fields for measure() and multiOutput()."], [39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "random_unitary_seeds", "Input fields for measure() and multiOutput()."], [39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "registers_mapping", "Input fields for measure() and multiOutput()."], [39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "times", "Input fields for measure() and multiOutput()."], [39, 3, 2, "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedArguments", "unitary_located", "Input fields for measure() and multiOutput()."]], "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedMeasureArgs": [[39, 6, 1, 0, "measure", "The measure range."], [39, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [39, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [39, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [39, 6, 1, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range."], [39, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure.arguments.EntropyMeasureRandomizedOutputArgs": [[39, 6, 1, 0, "measure", "The measure range."], [39, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [39, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [39, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [39, 6, 1, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range."]], "qurry.qurrent.randomized_measure.experiment": [[39, 4, 1, 0, "EntropyMeasureRandomizedExperiment", "The instance of experiment."]], "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment": [[39, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [39, 7, 1, 0, "analyze", "Calculate entangled entropy with more information combined."], [39, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [39, 7, 1, 0, "method", "The method to construct circuit."], [39, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [39, 7, 1, 0, "quantities", "Randomized entangled entropy with complex."]], "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.__init__": [[39, 3, 2, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", "afterwards", "The instance of experiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", "arguments", "The instance of experiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", "beforewards", "The instance of experiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", "commonparams", "The instance of experiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", "outfields", "The instance of experiment."], [39, 3, 2, "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment", "reports", "The instance of experiment."]], "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.analyze": [[39, 3, 2, 0, "backend", "The backend for the process."], [39, 3, 2, 0, "counts_used", "The index of the counts used."], [39, 3, 2, 0, "independent_all_system", "If True, then calculate the all system independently."], [39, 3, 2, 0, "pbar", "The progress bar."], [39, 3, 2, 0, "selected_qubits", "The selected qubits."]], "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.method": [[39, 3, 2, 0, "arguments", "The arguments of the experiment."], [39, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [39, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [39, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.params_control": [[39, 3, 2, 0, "custom_kwargs", "The custom parameters."], [39, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [39, 3, 2, 0, "measure", "The selected qubits for the measurement. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [39, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [39, 3, 2, 0, "targets", "The circuits of the experiment."], [39, 3, 2, 0, "times", "The number of random unitary operator."], [39, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [39, 3, 2, 0, "unitary_loc_not_cover_measure", "Confirm that not all unitary operator are covered by the measure. If True, then close the warning. Defaults to False."]], "qurry.qurrent.randomized_measure.experiment.EntropyMeasureRandomizedExperiment.quantities": [[39, 3, 2, 0, "all_system_source", "The source of all system."], [39, 3, 2, 0, "backend", "The backend label."], [39, 3, 2, 0, "counts", "The counts of the experiment."], [39, 3, 2, 0, "pbar", "The progress bar."], [39, 3, 2, 0, "selected_classical_registers", "The selected classical registers."], [39, 3, 2, 0, "shots", "The number of shots."]], "qurry.qurrent.randomized_measure.qurry": [[39, 4, 1, 0, "EntropyMeasureRandomized", "Randomized Measure for entangled entropy. The entropy we compute is the Second Order R\u00e9nyi Entropy."]], "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized": [[39, 5, 1, 0, "experiment_instance", "The container class responding to this QurryV5 class."], [39, 7, 1, 0, "measure", "Execute the experiment."], [39, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [39, 7, 1, 0, "multiAnalysis", "Run the analysis for multiple experiments."], [39, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.measure": [[39, 3, 2, 0, "backend", "The quantum backend."], [39, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [39, 3, 2, 0, "export", "Whether to export the experiment."], [39, 3, 2, 0, "measure", "The selected qubits for the measurement. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [39, 3, 2, 0, "passmanager", "The passmanager."], [39, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [39, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [39, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [39, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [39, 3, 2, 0, "save_location", "The location to save the experiment."], [39, 3, 2, 0, "shots", "Shots of the job."], [39, 3, 2, 0, "tags", "The tags of the experiment."], [39, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [39, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [39, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [39, 3, 2, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range. Defaults to False."], [39, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.measure_to_output": [[39, 3, 2, 0, "backend", "The quantum backend."], [39, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [39, 3, 2, 0, "export", "Whether to export the experiment."], [39, 3, 2, 0, "measure", "The selected qubits for the measurement. If it is None, then it will return the mapping of all qubits. If it is int, then it will return the mapping of the last n qubits. If it is tuple, then it will return the mapping of the qubits in the range. If it is list, then it will return the mapping of the selected qubits. Defaults to None."], [39, 3, 2, 0, "passmanager", "The passmanager."], [39, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [39, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [39, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [39, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [39, 3, 2, 0, "save_location", "The location to save the experiment."], [39, 3, 2, 0, "shots", "Shots of the job."], [39, 3, 2, 0, "tags", "The tags of the experiment."], [39, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [39, 3, 2, 0, "transpile_args", "Arguments of transpile() Defaults to None."], [39, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [39, 3, 2, 0, "unitary_loc_not_cover_measure", "Whether the range of the unitary operator is not cover the measure range. Defaults to False."], [39, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.multiAnalysis": [[39, 3, 2, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.multiAnalysis", "analysis_args", "Run the analysis for multiple experiments."], [39, 3, 2, 0, "analysis_name", "The name of analysis."], [39, 3, 2, 0, "backend", "The backend for the postprocessing."], [39, 3, 2, 0, "counts_used", "The counts used for the analysis."], [39, 3, 2, 0, "independent_all_system", "Whether to treat all system as independent."], [39, 3, 2, 0, "multiprocess_write", "Whether use multiprocess for writing."], [39, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [39, 3, 2, 0, "selected_qubits", "The selected qubits."], [39, 3, 2, 0, "skip_write", "Whether to skip the file writing during the analysis."], [39, 3, 2, "qurry.qurrent.randomized_measure.qurry.EntropyMeasureRandomized.multiAnalysis", "specific_analysis_args", "Run the analysis for multiple experiments."], [39, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."]], "qurry.qurrent.randomized_measure.utils": [[39, 1, 1, 0, "bitstring_mapping_getter", "Get the bitstring mapping and the final mapping."], [39, 1, 1, 0, "circuit_method_compose", "Build the circuit for the experiment."], [39, 1, 1, 0, "randomized_circuit_method", "Build the circuit for the experiment."], [39, 1, 1, 0, "randomized_entangled_entropy_complex", "Randomized entangled entropy with complex."]], "qurry.qurrent.randomized_measure.utils.bitstring_mapping_getter": [[39, 3, 2, 0, "counts", "The counts of the experiment."], [39, 3, 2, 0, "registers_mapping", "The mapping of the index of selected qubits to the index of the classical register."]], "qurry.qurrent.randomized_measure.utils.circuit_method_compose": [[39, 3, 2, 0, "exp_name", "Experiment name."], [39, 3, 2, 0, "idx", "Index of the quantum circuit."], [39, 3, 2, 0, "registers_mapping", "The mapping of the index of selected qubits to the index of the classical register."], [39, 3, 2, 0, "single_unitary_dict", "The dictionary of the unitary operator."], [39, 3, 2, 0, "target_circuit", "Target circuit."], [39, 3, 2, 0, "target_key", "Target key."]], "qurry.qurrent.randomized_measure.utils.randomized_circuit_method": [[39, 3, 2, 0, "exp_name", "Experiment name."], [39, 3, 2, 0, "idx", "Index of the quantum circuit."], [39, 3, 2, 0, "registers_mapping", "The mapping of the index of selected qubits to the index of the classical register."], [39, 3, 2, 0, "single_unitary_dict", "The dictionary of the unitary operator."], [39, 3, 2, 0, "target_circuit", "Target circuit."], [39, 3, 2, 0, "target_key", "Target key."]], "qurry.qurrent.randomized_measure.utils.randomized_entangled_entropy_complex": [[39, 3, 2, 0, "all_system_source", "The source of all system."], [39, 3, 2, 0, "backend", "The backend label."], [39, 3, 2, 0, "counts", "The counts of the experiment."], [39, 3, 2, 0, "pbar", "The progress bar."], [39, 3, 2, 0, "selected_classical_registers", "The selected classical registers."], [39, 3, 2, 0, "shots", "The number of shots."]], "qurry.qurrent.randomized_measure_v1": [[40, 0, 0, 1, "analysis", ""], [40, 0, 0, 1, "arguments", ""], [40, 0, 0, 1, "experiment", ""], [40, 0, 0, 1, "qurry", ""], [40, 0, 0, 1, "utils", ""]], "qurry.qurrent.randomized_measure_v1.analysis": [[40, 4, 1, 0, "EMRV1AnalysisContent", "The content of the analysis."], [40, 4, 1, 0, "EMRV1AnalysisInput", "To set the analysis."], [40, 4, 1, 0, "EntropyMeasureRandomizedV1Analysis", "The container for the analysis of EntropyRandomizedExperiment."]], "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent": [[40, 6, 1, 0, "allSystemSource", "The source of the all system."], [40, 6, 1, 0, "bitStringRange", "The qubit range of the subsystem."], [40, 6, 1, 0, "bitsStringRangeAllSys", "The qubit range of the all system."], [40, 6, 1, 0, "countsNum", "The number of counts of the experiment."], [40, 6, 1, 0, "counts_used", "The index of the counts used. If not specified, then use all counts."], [40, 6, 1, 0, "entropy", "The entanglement entropy of the subsystem."], [40, 6, 1, 0, "entropyAllSys", "The entanglement entropy of the system."], [40, 6, 1, 0, "entropySD", "The standard deviation of the entanglement entropy of the subsystem."], [40, 6, 1, 0, "entropySDAllSys", "The standard deviation of the entanglement entropy of the system."], [40, 6, 1, 0, "errorRate", "The error rate of the measurement from depolarizing error migigation calculated."], [40, 6, 1, 0, "measure", "The qubit range of the measurement and text description."], [40, 6, 1, 0, "measureActually", "The qubit range of the measurement actually used."], [40, 6, 1, 0, "measureActuallyAllSys", "The qubit range of the measurement actually used in the all system."], [40, 6, 1, 0, "mitigatedEntropy", "The mitigated entanglement entropy of the subsystem."], [40, 6, 1, 0, "mitigatedPurity", "The mitigated purity of the subsystem."], [40, 6, 1, 0, "num_qubits", "The number of qubits of the system."], [40, 6, 1, 0, "purity", "The purity of the subsystem."], [40, 6, 1, 0, "purityAllSys", "The purity of the system."], [40, 6, 1, 0, "purityCells", "The purity of each cell of the subsystem."], [40, 6, 1, 0, "purityCellsAllSys", "The purity of each cell of the system."], [40, 6, 1, 0, "puritySD", "The standard deviation of the purity of the subsystem."], [40, 6, 1, 0, "puritySDAllSys", "The standard deviation of the purity of the system."], [40, 6, 1, 0, "takingTime", "The taking time of the selected system."], [40, 6, 1, 0, "takingTimeAllSys", "The taking time of the all system if it is calculated, it will be 0 when use the all system from other analysis."]], "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent.__init__": [[40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "allSystemSource", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "bitStringRange", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "bitsStringRangeAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "countsNum", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "counts_used", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "entropy", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "entropyAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "entropySD", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "entropySDAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "errorRate", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "measure", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "measureActually", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "measureActuallyAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "mitigatedEntropy", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "mitigatedPurity", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "num_qubits", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "purity", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "purityAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "purityCells", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "purityCellsAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "puritySD", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "puritySDAllSys", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "takingTime", "The content of the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisContent", "takingTimeAllSys", "The content of the analysis."]], "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput": [[40, 6, 1, 0, "degree", "The range of partition."], [40, 6, 1, 0, "shots", "The number of shots."], [40, 6, 1, 0, "unitary_loc", "The location of the random unitary operator."]], "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput.__init__": [[40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput", "degree", "To set the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput", "shots", "To set the analysis."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EMRV1AnalysisInput", "unitary_loc", "To set the analysis."]], "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis": [[40, 7, 1, 0, "content_type", "The content instance type."], [40, 7, 1, 0, "input_type", "The input instance type."], [40, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis.__init__": [[40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis", "datatime", "The container for the analysis of EntropyRandomizedExperiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis", "log", "The container for the analysis of EntropyRandomizedExperiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis", "other_kwargs", "The container for the analysis of EntropyRandomizedExperiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.analysis.EntropyMeasureRandomizedV1Analysis", "serial", "The container for the analysis of EntropyRandomizedExperiment."]], "qurry.qurrent.randomized_measure_v1.arguments": [[40, 4, 1, 0, "EntropyMeasureRandomizedV1AnalyzeArgs", "The input of multiAnalysis() and analyze()."], [40, 4, 1, 0, "EntropyMeasureRandomizedV1Arguments", "Arguments for EntropyMeasureRandomizedV1Experiment."], [40, 4, 1, 0, "EntropyMeasureRandomizedV1MeasureArgs", "Input fields for measure() and multiOutput()."], [40, 4, 1, 0, "EntropyMeasureRandomizedV1OutputArgs", "Output arguments for output()."], [40, 8, 1, 0, "SHORT_NAME", "The short name of EntropyMeasureRandomizedV1Experiment."]], "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1AnalyzeArgs": [[40, 6, 1, 0, "backend", "The backend for the process."], [40, 6, 1, 0, "counts_used", "The index of the counts used."], [40, 6, 1, 0, "degree", "The degree range."], [40, 6, 1, 0, "independent_all_system", "If True, then calculate the all system independently."], [40, 6, 1, 0, "workers_num", "The number of workers for multiprocessing."]], "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments": [[40, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [40, 6, 1, 0, "measure", "The measure range."], [40, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [40, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [40, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [40, 6, 1, 0, "workers_num", "The number of workers for multiprocessing."]], "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments.__init__": [[40, 3, 2, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", "exp_name", "Arguments for EntropyMeasureRandomizedV1Experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", "measure", "Arguments for EntropyMeasureRandomizedV1Experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", "random_unitary_seeds", "Arguments for EntropyMeasureRandomizedV1Experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", "times", "Arguments for EntropyMeasureRandomizedV1Experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", "unitary_loc", "Arguments for EntropyMeasureRandomizedV1Experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1Arguments", "workers_num", "Arguments for EntropyMeasureRandomizedV1Experiment."]], "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1MeasureArgs": [[40, 6, 1, 0, "measure", "The measure range."], [40, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [40, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [40, 6, 1, 0, "unitary_loc", "The range of the unitary operator."], [40, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure_v1.arguments.EntropyMeasureRandomizedV1OutputArgs": [[40, 6, 1, 0, "measure", "The measure range."], [40, 6, 1, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [40, 6, 1, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name."], [40, 6, 1, 0, "unitary_loc", "The range of the unitary operator."]], "qurry.qurrent.randomized_measure_v1.experiment": [[40, 4, 1, 0, "EntropyMeasureRandomizedV1Experiment", "The instance of experiment."]], "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment": [[40, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [40, 7, 1, 0, "analyze", "Calculate entangled entropy with more information combined."], [40, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [40, 7, 1, 0, "method", "The method to construct circuit."], [40, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [40, 7, 1, 0, "quantities", "Calculate entangled entropy."]], "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.__init__": [[40, 3, 2, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", "afterwards", "The instance of experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", "arguments", "The instance of experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", "beforewards", "The instance of experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", "commonparams", "The instance of experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", "outfields", "The instance of experiment."], [40, 3, 2, "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment", "reports", "The instance of experiment."]], "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.analyze": [[40, 3, 2, 0, "backend", "Backend for the process."], [40, 3, 2, 0, "counts_used", "The index of the counts used. If not specified, then use all counts. Defaults to None."], [40, 3, 2, 0, "degree", "Degree of the subsystem."], [40, 3, 2, 0, "independent_all_system", "If True, then calculate the all system independently. Otherwise, use the existed all system source with same count_used."], [40, 3, 2, 0, "pbar", "Progress bar."], [40, 3, 2, 0, "workers_num", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts - 2 by cpu_count() - 2. Defaults to None."]], "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.method": [[40, 3, 2, 0, "arguments", "The arguments of the experiment."], [40, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [40, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [40, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.params_control": [[40, 3, 2, 0, "custom_kwargs", "The custom parameters."], [40, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [40, 3, 2, 0, "measure", "The measure range."], [40, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [40, 3, 2, 0, "targets", "The circuits of the experiment."], [40, 3, 2, 0, "times", "The number of random unitary operator."], [40, 3, 2, 0, "unitary_loc", "The range of the unitary operator."]], "qurry.qurrent.randomized_measure_v1.experiment.EntropyMeasureRandomizedV1Experiment.quantities": [[40, 3, 2, 0, "all_system_source", "The source of the all system."], [40, 3, 2, 0, "backend", "Backend for the process."], [40, 3, 2, 0, "counts", "Counts of the experiment on quantum machine."], [40, 3, 2, 0, "degree", "Degree of the subsystem."], [40, 3, 2, 0, "measure", "Measuring range on quantum circuits."], [40, 3, 2, 0, "pbar", "Progress bar."], [40, 3, 2, 0, "shots", "Shots of the experiment on quantum machine."], [40, 3, 2, 0, "workers_num", "Number of multi-processing workers, it will be ignored if backend is Rust. if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts by os.cpu_count(). Defaults to None."]], "qurry.qurrent.randomized_measure_v1.qurry": [[40, 4, 1, 0, "EntropyMeasureRandomizedV1", "Randomized Measure for entangled entropy. The entropy we compute is the Second Order R\u00e9nyi Entropy."]], "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1": [[40, 5, 1, 0, "experiment_instance", "The container class responding to this QurryV5 class."], [40, 7, 1, 0, "measure", "Execute the experiment."], [40, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [40, 7, 1, 0, "multiAnalysis", "Run the analysis for multiple experiments."], [40, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.measure": [[40, 3, 2, 0, "backend", "The quantum backend."], [40, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [40, 3, 2, 0, "export", "Whether to export the experiment."], [40, 3, 2, 0, "measure", "The measure range."], [40, 3, 2, 0, "passmanager", "The passmanager."], [40, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [40, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [40, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [40, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [40, 3, 2, 0, "save_location", "The location to save the experiment."], [40, 3, 2, 0, "shots", "Shots of the job."], [40, 3, 2, 0, "tags", "The tags of the experiment."], [40, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [40, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [40, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [40, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.measure_to_output": [[40, 3, 2, 0, "backend", "The quantum backend."], [40, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [40, 3, 2, 0, "export", "Whether to export the experiment."], [40, 3, 2, 0, "measure", "The measure range."], [40, 3, 2, 0, "passmanager", "The passmanager."], [40, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [40, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [40, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [40, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [40, 3, 2, 0, "save_location", "The location to save the experiment."], [40, 3, 2, 0, "shots", "Shots of the job."], [40, 3, 2, 0, "tags", "The tags of the experiment."], [40, 3, 2, 0, "times", "The number of random unitary operator. It will denote as N_U in the experiment name. Defaults to 100."], [40, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [40, 3, 2, 0, "unitary_loc", "The range of the unitary operator."], [40, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.multiAnalysis": [[40, 3, 2, "qurry.qurrent.randomized_measure_v1.qurry.EntropyMeasureRandomizedV1.multiAnalysis", "analysis_args", "Run the analysis for multiple experiments."], [40, 3, 2, 0, "analysis_name", "The name of analysis."], [40, 3, 2, 0, "backend", "Backend for the process."], [40, 3, 2, 0, "counts_used", "The index of the counts used. If not specified, then use all counts. Defaults to None."], [40, 3, 2, 0, "degree", "Degree of the subsystem."], [40, 3, 2, 0, "independent_all_system", "If True, then calculate the all system independently. Otherwise, use the existed all system source with same count_used."], [40, 3, 2, 0, "multiprocess_write", "Whether use multiprocess for writing."], [40, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [40, 3, 2, 0, "skip_write", "Whether to skip the file writing during the analysis."], [40, 3, 2, 0, "specific_analysis_args", "SpecificAnalsisArgs[EntropyMeasureRandomizedV1AnalyzeArgs], optional"], [40, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."], [40, 3, 2, 0, "workers_num", "Number of multi-processing workers, if sets to 1, then disable to using multi-processing; if not specified, then use the number of all cpu counts - 2 by cpu_count() - 2. Defaults to None."]], "qurry.qurrent.randomized_measure_v1.utils": [[40, 1, 1, 0, "circuit_method_core_v1", "Build the circuit for the experiment."], [40, 1, 1, 0, "randomized_entangled_entropy_complex_v1", "Randomized entangled entropy with complex."]], "qurry.qurrent.randomized_measure_v1.utils.circuit_method_core_v1": [[40, 3, 2, 0, "exp_name", "Experiment name."], [40, 3, 2, 0, "idx", "Index of the randomized unitary."], [40, 3, 2, 0, "measure", "Measure range."], [40, 3, 2, 0, "target_circuit", "Target circuit."], [40, 3, 2, 0, "target_key", "Target key."], [40, 3, 2, 0, "unitary_loc", "Unitary operator location."], [40, 3, 2, 0, "unitary_sublist", "Unitary operator list."]], "qurry.qurrent.randomized_measure_v1.utils.randomized_entangled_entropy_complex_v1": [[40, 3, 2, 0, "all_system_source", "The source of all system."], [40, 3, 2, 0, "backend", "The backend label."], [40, 3, 2, 0, "counts", "The counts of the experiment."], [40, 3, 2, 0, "degree", "The degree of the experiment."], [40, 3, 2, 0, "measure", "The measure range."], [40, 3, 2, 0, "pbar", "The progress bar."], [40, 3, 2, 0, "shots", "The number of shots."], [40, 3, 2, 0, "workers_num", "The number of workers."]], "qurry.qurries": [[41, 0, 0, 1, "magnet_square", ""], [42, 0, 0, 1, "magnet_square_z", ""], [43, 0, 0, 1, "position_distribution", ""], [44, 0, 0, 1, "samplingqurry", ""], [45, 0, 0, 1, "string_operator", ""], [46, 0, 0, 1, "twisted_operator", ""], [47, 0, 0, 1, "wavesqurry", ""]], "qurry.qurries.magnet_square": [[41, 0, 0, 1, "analysis", ""], [41, 0, 0, 1, "arguments", ""], [41, 0, 0, 1, "experiment", ""], [41, 0, 0, 1, "qurry", ""], [41, 0, 0, 1, "utils", ""]], "qurry.qurries.magnet_square.analysis": [[41, 4, 1, 0, "MSAnalysisContent", "The content of the analysis."], [41, 4, 1, 0, "MSAnalysisInput", "To set the analysis."], [41, 4, 1, 0, "MagnetSquareAnalysis", "The container for the analysis of MagnetSquareExperiment."]], "qurry.qurries.magnet_square.analysis.MSAnalysisContent": [[41, 6, 1, 0, "magnet_square", "Magnetic Square."], [41, 6, 1, 0, "magnet_square_cells", "Magnetic Square cells."], [41, 6, 1, 0, "num_qubits", "The number of qubits."], [41, 6, 1, 0, "shots", "The number of shots."], [41, 6, 1, 0, "taking_time", "Taking time."], [41, 6, 1, 0, "unitary_operator", "The numpy array of the unitary operator or a string representing the axis of rotation."]], "qurry.qurries.magnet_square.analysis.MSAnalysisContent.__init__": [[41, 3, 2, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", "magnet_square", "The content of the analysis."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", "magnet_square_cells", "The content of the analysis."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", "num_qubits", "The content of the analysis."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", "shots", "The content of the analysis."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", "taking_time", "The content of the analysis."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MSAnalysisContent", "unitary_operator", "The content of the analysis."]], "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis": [[41, 7, 1, 0, "content_type", "The content instance type."], [41, 7, 1, 0, "input_type", "The input instance type."], [41, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis.__init__": [[41, 3, 2, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis", "datatime", "The container for the analysis of MagnetSquareExperiment."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis", "log", "The container for the analysis of MagnetSquareExperiment."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis", "other_kwargs", "The container for the analysis of MagnetSquareExperiment."], [41, 3, 2, "qurry.qurries.magnet_square.analysis.MagnetSquareAnalysis", "serial", "The container for the analysis of MagnetSquareExperiment."]], "qurry.qurries.magnet_square.arguments": [[41, 4, 1, 0, "MagnetSquareAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [41, 4, 1, 0, "MagnetSquareArguments", "Arguments for MagnetSquareExperiment."], [41, 4, 1, 0, "MagnetSquareMeasureArgs", "Input fields for measure() and multiOutput()."], [41, 4, 1, 0, "MagnetSquareOutputArgs", "Output arguments for output()."], [41, 8, 1, 0, "SHORT_NAME", "The short name of MagnetSquareExperiment."]], "qurry.qurries.magnet_square.arguments.MagnetSquareArguments": [[41, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [41, 6, 1, 0, "num_qubits", "The number of qubits."], [41, 6, 1, 0, "unitary_operator", "The unitary operator to apply. It can be a Operator, a Gate, or a string representing the axis of rotation ('x', 'y', or 'z'). Defaults to 'z'."]], "qurry.qurries.magnet_square.arguments.MagnetSquareArguments.__init__": [[41, 3, 2, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments", "exp_name", "Arguments for MagnetSquareExperiment."], [41, 3, 2, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments", "num_qubits", "Arguments for MagnetSquareExperiment."], [41, 3, 2, "qurry.qurries.magnet_square.arguments.MagnetSquareArguments", "unitary_operator", "Arguments for MagnetSquareExperiment."]], "qurry.qurries.magnet_square.arguments.MagnetSquareMeasureArgs": [[41, 6, 1, 0, "unitary_operator", "The unitary operator to apply. It can be a Operator, a Gate, or a string representing the axis of rotation ('x', 'y', or 'z'). Defaults to 'z'."], [41, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.magnet_square.arguments.MagnetSquareOutputArgs": [[41, 6, 1, 0, "unitary_operator", "The unitary operator to apply. It can be a Operator, a Gate, or a string representing the axis of rotation ('x', 'y', or 'z'). Defaults to 'z'."]], "qurry.qurries.magnet_square.experiment": [[41, 4, 1, 0, "MagnetSquareExperiment", "The instance of experiment."]], "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment": [[41, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [41, 7, 1, 0, "analyze", "Calculate magnet square with more information combined."], [41, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [41, 7, 1, 0, "method", "The method to construct circuit."], [41, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [41, 7, 1, 0, "quantities", "Calculate magnet square with more information combined."]], "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.__init__": [[41, 3, 2, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", "afterwards", "The instance of experiment."], [41, 3, 2, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", "arguments", "The instance of experiment."], [41, 3, 2, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", "beforewards", "The instance of experiment."], [41, 3, 2, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", "commonparams", "The instance of experiment."], [41, 3, 2, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", "outfields", "The instance of experiment."], [41, 3, 2, "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment", "reports", "The instance of experiment."]], "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.analyze": [[41, 3, 2, 0, "pbar", "The progress bar."]], "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.method": [[41, 3, 2, 0, "arguments", "The arguments of the experiment."], [41, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [41, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [41, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.params_control": [[41, 3, 2, 0, "custom_kwargs", "The custom parameters."], [41, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [41, 3, 2, 0, "targets", "The circuits of the experiment."], [41, 3, 2, 0, "unitary_operator", "The unitary operator to apply. It can be a qiskit.quantum_info.Operator, a qiskit.circuit.Gate, or a string representing the axis of rotation ('x', 'y', or 'z')."]], "qurry.qurries.magnet_square.experiment.MagnetSquareExperiment.quantities": [[41, 3, 2, 0, "backend", "The backend label."], [41, 3, 2, 0, "counts", "The counts of the experiment."], [41, 3, 2, 0, "num_qubits", "The number of qubits."], [41, 3, 2, 0, "pbar", "The progress bar."], [41, 3, 2, 0, "shots", "The number of shots."], [41, 3, 2, 0, "unitary_operator", "The numpy array of the unitary operator or a string representing the axis of rotation."]], "qurry.qurries.magnet_square.qurry": [[41, 4, 1, 0, "MagnetSquare", "Magnetization Square Qurry."]], "qurry.qurries.magnet_square.qurry.MagnetSquare": [[41, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [41, 7, 1, 0, "measure", "Execute the experiment."], [41, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [41, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurries.magnet_square.qurry.MagnetSquare.measure": [[41, 3, 2, 0, "backend", "The quantum backend."], [41, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [41, 3, 2, 0, "export", "Whether to export the experiment."], [41, 3, 2, 0, "passmanager", "The passmanager."], [41, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [41, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [41, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [41, 3, 2, 0, "save_location", "The location to save the experiment."], [41, 3, 2, 0, "shots", "Shots of the job."], [41, 3, 2, 0, "tags", "The tags of the experiment."], [41, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [41, 3, 2, 0, "unitary_operator", "The unitary operator to apply. It can be a qiskit.quantum_info.Operator, a qiskit.circuit.Gate, or a string representing the axis of rotation ('x', 'y', or 'z')."], [41, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.magnet_square.qurry.MagnetSquare.measure_to_output": [[41, 3, 2, 0, "backend", "The quantum backend."], [41, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [41, 3, 2, 0, "export", "Whether to export the experiment."], [41, 3, 2, 0, "passmanager", "The passmanager."], [41, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [41, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [41, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [41, 3, 2, 0, "save_location", "The location to save the experiment."], [41, 3, 2, 0, "shots", "Shots of the job."], [41, 3, 2, 0, "tags", "The tags of the experiment."], [41, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [41, 3, 2, 0, "unitary_operator", "The unitary operator to apply. It can be a qiskit.quantum_info.Operator, a qiskit.circuit.Gate, or a string representing the axis of rotation ('x', 'y', or 'z')."], [41, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.magnet_square.utils": [[41, 1, 1, 0, "circuit_method", "Build the circuit for the experiment."]], "qurry.qurries.magnet_square.utils.circuit_method": [[41, 3, 2, 0, "exp_name", "Experiment name."], [41, 3, 2, 0, "i", "The index of the target qubit."], [41, 3, 2, 0, "idx", "Index of the quantum circuit."], [41, 3, 2, 0, "j", "The index of the target qubit."], [41, 3, 2, 0, "target_circuit", "Target circuit."], [41, 3, 2, 0, "target_key", "Target key."], [41, 3, 2, 0, "unitary_operator", "The unitary operator to apply. It can be a qiskit.quantum_info.Operator, a qiskit.circuit.Gate, or a string representing the axis of rotation ('x', 'y', or 'z')."]], "qurry.qurries.magnet_square_z": [[42, 0, 0, 1, "analysis", ""], [42, 0, 0, 1, "arguments", ""], [42, 0, 0, 1, "experiment", ""], [42, 0, 0, 1, "qurry", ""], [42, 0, 0, 1, "utils", ""]], "qurry.qurries.magnet_square_z.analysis": [[42, 4, 1, 0, "ZDirMSAnalysisContent", "The content of the analysis."], [42, 4, 1, 0, "ZDirMSAnalysisInput", "To set the analysis."], [42, 4, 1, 0, "ZDirMagnetSquareAnalysis", "The container for the analysis of ZDirMagnetSquareExperiment."]], "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent": [[42, 6, 1, 0, "magnet_square", "Magnetic Square."], [42, 6, 1, 0, "magnet_square_cells", "Magnetic Square cells."], [42, 6, 1, 0, "num_qubits", "The number of qubits."], [42, 6, 1, 0, "shots", "The number of shots."], [42, 6, 1, 0, "taking_time", "Taking time."]], "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent.__init__": [[42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent", "magnet_square", "The content of the analysis."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent", "magnet_square_cells", "The content of the analysis."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent", "num_qubits", "The content of the analysis."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent", "shots", "The content of the analysis."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMSAnalysisContent", "taking_time", "The content of the analysis."]], "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis": [[42, 7, 1, 0, "content_type", "The content instance type."], [42, 7, 1, 0, "input_type", "The input instance type."], [42, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis.__init__": [[42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis", "datatime", "The container for the analysis of ZDirMagnetSquareExperiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis", "log", "The container for the analysis of ZDirMagnetSquareExperiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis", "other_kwargs", "The container for the analysis of ZDirMagnetSquareExperiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.analysis.ZDirMagnetSquareAnalysis", "serial", "The container for the analysis of ZDirMagnetSquareExperiment."]], "qurry.qurries.magnet_square_z.arguments": [[42, 8, 1, 0, "SHORT_NAME", "The short name of ZDirMagnetSquareExperiment."], [42, 4, 1, 0, "ZDirMagnetSquareAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [42, 4, 1, 0, "ZDirMagnetSquareArguments", "Arguments for ZDirMagnetSquareExperiment."], [42, 4, 1, 0, "ZDirMagnetSquareMeasureArgs", "Input fields for measure() and multiOutput()."], [42, 4, 1, 0, "ZDirMagnetSquareOutputArgs", "Output arguments for output()."]], "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments": [[42, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports."], [42, 6, 1, 0, "num_qubits", "The number of qubits."]], "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments.__init__": [[42, 3, 2, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments", "exp_name", "Arguments for ZDirMagnetSquareExperiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareArguments", "num_qubits", "Arguments for ZDirMagnetSquareExperiment."]], "qurry.qurries.magnet_square_z.arguments.ZDirMagnetSquareMeasureArgs": [[42, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.magnet_square_z.experiment": [[42, 4, 1, 0, "ZDirMagnetSquareExperiment", "The instance of experiment."]], "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment": [[42, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [42, 7, 1, 0, "analyze", "Calculate magnet square with more information combined."], [42, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [42, 7, 1, 0, "method", "The method to construct circuit."], [42, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [42, 7, 1, 0, "quantities", "Calculate magnet square with more information combined."]], "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.__init__": [[42, 3, 2, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", "afterwards", "The instance of experiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", "arguments", "The instance of experiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", "beforewards", "The instance of experiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", "commonparams", "The instance of experiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", "outfields", "The instance of experiment."], [42, 3, 2, "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment", "reports", "The instance of experiment."]], "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.analyze": [[42, 3, 2, 0, "pbar", "The progress bar."]], "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.method": [[42, 3, 2, 0, "arguments", "The arguments of the experiment."], [42, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [42, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment."], [42, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.params_control": [[42, 3, 2, 0, "custom_kwargs", "The custom parameters."], [42, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [42, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.magnet_square_z.experiment.ZDirMagnetSquareExperiment.quantities": [[42, 3, 2, 0, "backend", "The backend label."], [42, 3, 2, 0, "num_qubits", "The number of qubits."], [42, 3, 2, 0, "pbar", "The progress bar."], [42, 3, 2, 0, "shots", "The number of shots."], [42, 3, 2, 0, "single_counts", "Single count."]], "qurry.qurries.magnet_square_z.qurry": [[42, 4, 1, 0, "ZDirMagnetSquare", "Z Direction Magnetization Square Qurry."]], "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare": [[42, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [42, 7, 1, 0, "measure", "Execute the experiment."], [42, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [42, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare.measure": [[42, 3, 2, 0, "backend", "The quantum backend."], [42, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [42, 3, 2, 0, "export", "Whether to export the experiment."], [42, 3, 2, 0, "passmanager", "The passmanager."], [42, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [42, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [42, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [42, 3, 2, 0, "save_location", "The location to save the experiment."], [42, 3, 2, 0, "shots", "Shots of the job."], [42, 3, 2, 0, "tags", "The tags of the experiment."], [42, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [42, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.magnet_square_z.qurry.ZDirMagnetSquare.measure_to_output": [[42, 3, 2, 0, "backend", "The quantum backend."], [42, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [42, 3, 2, 0, "export", "Whether to export the experiment."], [42, 3, 2, 0, "passmanager", "The passmanager."], [42, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [42, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [42, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [42, 3, 2, 0, "save_location", "The location to save the experiment."], [42, 3, 2, 0, "shots", "Shots of the job."], [42, 3, 2, 0, "tags", "The tags of the experiment."], [42, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [42, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.magnet_square_z.utils": [[42, 1, 1, 0, "circuit_method", "Build the circuit for the experiment."]], "qurry.qurries.magnet_square_z.utils.circuit_method": [[42, 3, 2, 0, "exp_name", "Experiment name."], [42, 3, 2, 0, "target_circuit", "Target circuit."], [42, 3, 2, 0, "target_key", "Target key."]], "qurry.qurries.samplingqurry": [[44, 0, 0, 1, "analysis", ""], [44, 0, 0, 1, "arguments", ""], [44, 0, 0, 1, "experiment", ""], [44, 0, 0, 1, "qurry", ""]], "qurry.qurries.samplingqurry.analysis": [[44, 4, 1, 0, "QurryAnalysis", "Example of QurryAnalysis."], [44, 4, 1, 0, "QurryAnalysisContent", "Analysis content."], [44, 4, 1, 0, "QurryAnalysisInput", "To set the analysis."]], "qurry.qurries.samplingqurry.analysis.QurryAnalysis": [[44, 7, 1, 0, "content_type", "The content instance type."], [44, 7, 1, 0, "input_type", "The input instance type."], [44, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurries.samplingqurry.analysis.QurryAnalysis.__init__": [[44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysis", "datatime", "Example of QurryAnalysis."], [44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysis", "log", "Example of QurryAnalysis."], [44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysis", "other_kwargs", "Example of QurryAnalysis."], [44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysis", "serial", "Example of QurryAnalysis."]], "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent": [[44, 6, 1, 0, "dummy", "Just a dummy field."], [44, 6, 1, 0, "ultimate_answer", "~The Answer to the Ultimate Question of Life, The Universe, and Everything.~"]], "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent.__init__": [[44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent", "dummy", "Analysis content."], [44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysisContent", "ultimate_answer", "Analysis content."]], "qurry.qurries.samplingqurry.analysis.QurryAnalysisInput": [[44, 6, 1, 0, "ultimate_question", "ULtImAte QueStIoN."]], "qurry.qurries.samplingqurry.analysis.QurryAnalysisInput.__init__": [[44, 3, 2, "qurry.qurries.samplingqurry.analysis.QurryAnalysisInput", "ultimate_question", "To set the analysis."]], "qurry.qurries.samplingqurry.arguments": [[44, 4, 1, 0, "QurryAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [44, 4, 1, 0, "QurryArguments", "Arguments for QurryExperiment."], [44, 4, 1, 0, "QurryMeasureArgs", "Input fields for measure() and multiOutput()."], [44, 4, 1, 0, "QurryOutputArgs", "Output arguments for output()."], [44, 8, 1, 0, "SHORT_NAME", "The short name of QurryExperiment"]], "qurry.qurries.samplingqurry.arguments.QurryArguments": [[44, 6, 1, 0, "sampling", "The number of sampling."]], "qurry.qurries.samplingqurry.arguments.QurryArguments.__init__": [[44, 3, 2, "qurry.qurries.samplingqurry.arguments.QurryArguments", "exp_name", "Arguments for QurryExperiment."], [44, 3, 2, "qurry.qurries.samplingqurry.arguments.QurryArguments", "sampling", "Arguments for QurryExperiment."]], "qurry.qurries.samplingqurry.arguments.QurryMeasureArgs": [[44, 6, 1, 0, "sampling", "The number of sampling."], [44, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.samplingqurry.arguments.QurryOutputArgs": [[44, 6, 1, 0, "sampling", "The number of sampling."]], "qurry.qurries.samplingqurry.experiment": [[44, 4, 1, 0, "QurryExperiment", "Experiment instance for QurryV9."]], "qurry.qurries.samplingqurry.experiment.QurryExperiment": [[44, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [44, 7, 1, 0, "analyze", "Analysis of the experiment."], [44, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [44, 7, 1, 0, "method", "The method to construct circuit."], [44, 7, 1, 0, "params_control", "Control the experiment's parameters."], [44, 7, 1, 0, "quantities", "Computing specific squantity."]], "qurry.qurries.samplingqurry.experiment.QurryExperiment.__init__": [[44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment", "afterwards", "Experiment instance for QurryV9."], [44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment", "arguments", "Experiment instance for QurryV9."], [44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment", "beforewards", "Experiment instance for QurryV9."], [44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment", "commonparams", "Experiment instance for QurryV9."], [44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment", "outfields", "Experiment instance for QurryV9."], [44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment", "reports", "Experiment instance for QurryV9."]], "qurry.qurries.samplingqurry.experiment.QurryExperiment.analyze": [[44, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [44, 3, 2, 0, "shots", "The number of shots."], [44, 3, 2, 0, "ultimate_question", "The ultimate question of the universe."]], "qurry.qurries.samplingqurry.experiment.QurryExperiment.method": [[44, 3, 2, "qurry.qurries.samplingqurry.experiment.QurryExperiment.method", "arguments", "The method to construct circuit."], [44, 3, 2, 0, "multiprocess", "Whether to use multiprocess."], [44, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [44, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.samplingqurry.experiment.QurryExperiment.params_control": [[44, 3, 2, 0, "custom_kwargs", "The custom parameters."], [44, 3, 2, 0, "exp_name", "The name of the experiment."], [44, 3, 2, 0, "sampling", "The number of sampling."], [44, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.samplingqurry.experiment.QurryExperiment.quantities": [[44, 3, 2, 0, "counts", "The counts of the experiment."], [44, 3, 2, 0, "shots", "The number of shots."]], "qurry.qurries.samplingqurry.qurry": [[44, 4, 1, 0, "QurryV9", "Executing one quantum circuit in multiple times."]], "qurry.qurries.samplingqurry.qurry.QurryV9": [[44, 5, 1, 0, "experiment_instance", "The container class responding to this QurryV9 class."], [44, 7, 1, 0, "measure", "Execute the experiment."], [44, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [44, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurries.samplingqurry.qurry.QurryV9.measure": [[44, 3, 2, 0, "backend", "Arguments for Backend.run()."], [44, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [44, 3, 2, 0, "export", "Whether to export the experiment."], [44, 3, 2, 0, "passmanager", "The passmanager."], [44, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [44, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [44, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [44, 3, 2, 0, "sampling", "The number of sampling."], [44, 3, 2, 0, "save_location", "The location to save the experiment."], [44, 3, 2, 0, "shots", "Shots of the job."], [44, 3, 2, 0, "tags", "The tags of the experiment."], [44, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [44, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.samplingqurry.qurry.QurryV9.measure_to_output": [[44, 3, 2, 0, "backend", "Arguments for Backend.run()."], [44, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [44, 3, 2, 0, "export", "Whether to export the experiment."], [44, 3, 2, 0, "passmanager", "The passmanager."], [44, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [44, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [44, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [44, 3, 2, 0, "sampling", "The number of sampling."], [44, 3, 2, 0, "save_location", "The location to save the experiment."], [44, 3, 2, 0, "shots", "Shots of the job."], [44, 3, 2, 0, "tags", "The tags of the experiment."], [44, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [44, 3, 2, 0, "wave", "The key or The key or the circuit to execute."]], "qurry.qurries.string_operator": [[45, 0, 0, 1, "analysis", ""], [45, 0, 0, 1, "arguments", ""], [45, 0, 0, 1, "experiment", ""], [45, 0, 0, 1, "qurry", ""], [45, 0, 0, 1, "utils", ""]], "qurry.qurries.string_operator.analysis": [[45, 4, 1, 0, "SOAnalysisContent", "The content of the analysis."], [45, 4, 1, 0, "SOAnalysisInput", "To set the analysis."], [45, 4, 1, 0, "StringOperatorAnalysis", "The container for the analysis of StringOperatorExperiment."]], "qurry.qurries.string_operator.analysis.SOAnalysisContent": [[45, 6, 1, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 6, 1, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 6, 1, 0, "length", "The length of the string operator, which is k - i + 1."], [45, 6, 1, 0, "num_qubits", "The number of qubits."], [45, 6, 1, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 6, 1, 0, "order", "The order of the string operator."], [45, 6, 1, 0, "shots", "The number of shots."], [45, 6, 1, 0, "str_op", "The string operator."]], "qurry.qurries.string_operator.analysis.SOAnalysisContent.__init__": [[45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "i", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "k", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "length", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "num_qubits", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "on_dir", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "order", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "shots", "The content of the analysis."], [45, 3, 2, "qurry.qurries.string_operator.analysis.SOAnalysisContent", "str_op", "The content of the analysis."]], "qurry.qurries.string_operator.analysis.StringOperatorAnalysis": [[45, 7, 1, 0, "content_type", "The content instance type."], [45, 7, 1, 0, "input_type", "The input instance type."], [45, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurries.string_operator.analysis.StringOperatorAnalysis.__init__": [[45, 3, 2, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis", "datatime", "The container for the analysis of StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis", "log", "The container for the analysis of StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis", "other_kwargs", "The container for the analysis of StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.analysis.StringOperatorAnalysis", "serial", "The container for the analysis of StringOperatorExperiment."]], "qurry.qurries.string_operator.arguments": [[45, 8, 1, 0, "SHORT_NAME", "The short name of StringOperatorExperiment."], [45, 4, 1, 0, "StringOperatorAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [45, 4, 1, 0, "StringOperatorArguments", "Arguments for StringOperatorExperiment."], [45, 4, 1, 0, "StringOperatorMeasureArgs", "Input fields for measure() and multiOutput()."], [45, 4, 1, 0, "StringOperatorOutputArgs", "Output arguments for output()."]], "qurry.qurries.string_operator.arguments.StringOperatorArguments": [[45, 6, 1, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [45, 6, 1, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 6, 1, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 6, 1, 0, "num_qubits", "The number of qubits."], [45, 6, 1, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 6, 1, 0, "str_op", "The string operator."]], "qurry.qurries.string_operator.arguments.StringOperatorArguments.__init__": [[45, 3, 2, "qurry.qurries.string_operator.arguments.StringOperatorArguments", "exp_name", "Arguments for StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.arguments.StringOperatorArguments", "i", "Arguments for StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.arguments.StringOperatorArguments", "k", "Arguments for StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.arguments.StringOperatorArguments", "num_qubits", "Arguments for StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.arguments.StringOperatorArguments", "on_dir", "Arguments for StringOperatorExperiment."], [45, 3, 2, "qurry.qurries.string_operator.arguments.StringOperatorArguments", "str_op", "Arguments for StringOperatorExperiment."]], "qurry.qurries.string_operator.arguments.StringOperatorMeasureArgs": [[45, 6, 1, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 6, 1, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 6, 1, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 6, 1, 0, "str_op", "The string operator."], [45, 6, 1, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.string_operator.arguments.StringOperatorOutputArgs": [[45, 6, 1, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 6, 1, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 6, 1, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 6, 1, 0, "str_op", "The string operator."]], "qurry.qurries.string_operator.experiment": [[45, 4, 1, 0, "StringOperatorExperiment", "The instance of experiment."]], "qurry.qurries.string_operator.experiment.StringOperatorExperiment": [[45, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [45, 7, 1, 0, "analyze", "Calculate magnet square with more information combined."], [45, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [45, 7, 1, 0, "method", "The method to construct circuit."], [45, 7, 1, 0, "params_control", "Handling all arguments and initializing a single experiment."], [45, 7, 1, 0, "quantities", "Calculate the string operator."]], "qurry.qurries.string_operator.experiment.StringOperatorExperiment.__init__": [[45, 3, 2, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", "afterwards", "The instance of experiment."], [45, 3, 2, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", "arguments", "The instance of experiment."], [45, 3, 2, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", "beforewards", "The instance of experiment."], [45, 3, 2, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", "commonparams", "The instance of experiment."], [45, 3, 2, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", "outfields", "The instance of experiment."], [45, 3, 2, "qurry.qurries.string_operator.experiment.StringOperatorExperiment", "reports", "The instance of experiment."]], "qurry.qurries.string_operator.experiment.StringOperatorExperiment.analyze": [[45, 3, 2, 0, "pbar", "The progress bar."]], "qurry.qurries.string_operator.experiment.StringOperatorExperiment.method": [[45, 3, 2, 0, "arguments", "The arguments of the experiment."], [45, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [45, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment."], [45, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.string_operator.experiment.StringOperatorExperiment.params_control": [[45, 3, 2, 0, "custom_kwargs", "The custom parameters."], [45, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [45, 3, 2, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 3, 2, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 3, 2, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 3, 2, 0, "str_op", "The string operator."], [45, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.string_operator.experiment.StringOperatorExperiment.quantities": [[45, 3, 2, 0, "backend", "The backend label."], [45, 3, 2, 0, "counts", "The counts of the experiment."], [45, 3, 2, 0, "pbar", "The progress bar."], [45, 3, 2, 0, "shots", "The number of shots."]], "qurry.qurries.string_operator.qurry": [[45, 4, 1, 0, "StringOperator", "String Operator Order"]], "qurry.qurries.string_operator.qurry.StringOperator": [[45, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [45, 7, 1, 0, "measure", "Execute the experiment."], [45, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [45, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurries.string_operator.qurry.StringOperator.measure": [[45, 3, 2, 0, "backend", "The quantum backend."], [45, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [45, 3, 2, 0, "export", "Whether to export the experiment."], [45, 3, 2, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 3, 2, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 3, 2, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 3, 2, 0, "passmanager", "The passmanager."], [45, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [45, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [45, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [45, 3, 2, 0, "save_location", "The location to save the experiment."], [45, 3, 2, 0, "shots", "Shots of the job."], [45, 3, 2, 0, "str_op", "The string operator."], [45, 3, 2, 0, "tags", "The tags of the experiment."], [45, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [45, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.string_operator.qurry.StringOperator.measure_to_output": [[45, 3, 2, 0, "backend", "The quantum backend."], [45, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [45, 3, 2, 0, "export", "Whether to export the experiment."], [45, 3, 2, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 3, 2, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 3, 2, 0, "on_dir", "The direction of the string operator, either 'x' or 'y'."], [45, 3, 2, 0, "passmanager", "The passmanager."], [45, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [45, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [45, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [45, 3, 2, 0, "save_location", "The location to save the experiment."], [45, 3, 2, 0, "shots", "Shots of the job."], [45, 3, 2, 0, "str_op", "The string operator."], [45, 3, 2, 0, "tags", "The tags of the experiment."], [45, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [45, 3, 2, 0, "wave", "The key or the circuit to execute."]], "qurry.qurries.string_operator.utils": [[45, 8, 1, 0, "STRING_OPERATOR", "Available string operator library."], [45, 8, 1, 0, "StringOperatorDirection", "Available string operator directions."], [45, 4, 1, 0, "StringOperatorLib", "String Operator Library."], [45, 8, 1, 0, "StringOperatorLibType", "Available string operator types."], [45, 8, 1, 0, "StringOperatorUnits", "Available string operator units."], [45, 1, 1, 0, "circuit_method", "Build the circuit for the experiment."]], "qurry.qurries.string_operator.utils.StringOperatorLib": [[45, 6, 1, 0, "i", "Identity string operator."], [45, 6, 1, 0, "zy", "ZY string operator."]], "qurry.qurries.string_operator.utils.circuit_method": [[45, 3, 2, 0, "i", "The index of beginning qubits in the quantum circuit."], [45, 3, 2, 0, "k", "The index of ending qubits in the quantum circuit."], [45, 3, 2, 0, "on_dir", "The direction of the string operator, either \"x\" or \"y\"."], [45, 3, 2, 0, "str_op", "The string operator."], [45, 3, 2, 0, "target_circuit", "Target circuit."], [45, 3, 2, 0, "target_key", "Target key."]], "qurry.qurries.wavesqurry": [[47, 0, 0, 1, "analysis", ""], [47, 0, 0, 1, "arguments", ""], [47, 0, 0, 1, "experiment", ""], [47, 0, 0, 1, "qurry", ""]], "qurry.qurries.wavesqurry.analysis": [[47, 4, 1, 0, "WEAnalysisContent", "Analysis content."], [47, 4, 1, 0, "WEAnalysisInput", "To set the analysis."], [47, 4, 1, 0, "WavesExecuterAnalysis", "The analysis of the experiment."]], "qurry.qurries.wavesqurry.analysis.WEAnalysisContent": [[47, 6, 1, 0, "dummy", "Just a dummy field."], [47, 6, 1, 0, "ultimate_answer", "~The Answer to the Ultimate Question of Life, The Universe, and Everything.~"]], "qurry.qurries.wavesqurry.analysis.WEAnalysisContent.__init__": [[47, 3, 2, "qurry.qurries.wavesqurry.analysis.WEAnalysisContent", "dummy", "Analysis content."], [47, 3, 2, "qurry.qurries.wavesqurry.analysis.WEAnalysisContent", "ultimate_answer", "Analysis content."]], "qurry.qurries.wavesqurry.analysis.WEAnalysisInput": [[47, 6, 1, 0, "ultimate_question", "ULtImAte QueStIoN."]], "qurry.qurries.wavesqurry.analysis.WEAnalysisInput.__init__": [[47, 3, 2, "qurry.qurries.wavesqurry.analysis.WEAnalysisInput", "ultimate_question", "To set the analysis."]], "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis": [[47, 7, 1, 0, "content_type", "The content instance type."], [47, 7, 1, 0, "input_type", "The input instance type."], [47, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."]], "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis.__init__": [[47, 3, 2, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis", "datatime", "The analysis of the experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis", "log", "The analysis of the experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis", "other_kwargs", "The analysis of the experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.analysis.WavesExecuterAnalysis", "serial", "The analysis of the experiment."]], "qurry.qurries.wavesqurry.arguments": [[47, 8, 1, 0, "SHORT_NAME", "The short name of the experiment."], [47, 4, 1, 0, "WavesExecuterAnalyzeArgs", "The input of multiAnalysis() and analyze()."], [47, 4, 1, 0, "WavesExecuterArguments", "Arguments for WavesExecuterExperiment."], [47, 4, 1, 0, "WavesExecuterMeasureArgs", "Input fields for measure() and multiOutput()."], [47, 4, 1, 0, "WavesExecuterOutputArgs", "Output arguments for qurry.qurries.wavesqurry.qurry.WavesExecuter.output()."]], "qurry.qurries.wavesqurry.arguments.WavesExecuterArguments.__init__": [[47, 3, 2, "qurry.qurries.wavesqurry.arguments.WavesExecuterArguments", "exp_name", "Arguments for WavesExecuterExperiment."]], "qurry.qurries.wavesqurry.experiment": [[47, 4, 1, 0, "WavesExecuterExperiment", "The instance of experiment."]], "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment": [[47, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [47, 7, 1, 0, "analyze", "Analysis of the experiment."], [47, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [47, 7, 1, 0, "method", "The method to construct circuit."], [47, 7, 1, 0, "params_control", "Control the experiment's parameters."], [47, 7, 1, 0, "quantities", "Computing specific squantity. Where should be overwritten by each construction of new measurement."]], "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.__init__": [[47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", "afterwards", "The instance of experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", "arguments", "The instance of experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", "beforewards", "The instance of experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", "commonparams", "The instance of experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", "outfields", "The instance of experiment."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment", "reports", "The instance of experiment."]], "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.analyze": [[47, 3, 2, 0, "pbar", "The progress bar."], [47, 3, 2, 0, "shots", "The number of shots. Defaults to None."], [47, 3, 2, 0, "ultimate_question", "The ultimate question of the universe. Defaults to ''."]], "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.method": [[47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.method", "arguments", "The method to construct circuit."], [47, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [47, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [47, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.params_control": [[47, 3, 2, 0, "custom_kwargs", "The custom parameters."], [47, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [47, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.quantities": [[47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.quantities", "counts", "Computing specific squantity. Where should be overwritten by each construction of new measurement."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.quantities", "shots", "Computing specific squantity. Where should be overwritten by each construction of new measurement."], [47, 3, 2, "qurry.qurries.wavesqurry.experiment.WavesExecuterExperiment.quantities", "ultimate_question", "Computing specific squantity. Where should be overwritten by each construction of new measurement."]], "qurry.qurries.wavesqurry.qurry": [[47, 4, 1, 0, "WavesExecuter", "The pending and retrieve executer for waves."]], "qurry.qurries.wavesqurry.qurry.WavesExecuter": [[47, 5, 1, 0, "experiment_instance", "The container class responding to this Qurrium class."], [47, 7, 1, 0, "measure", "Execute the experiment."], [47, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [47, 6, 1, 0, "short_name", "The short name of Qurrium."]], "qurry.qurries.wavesqurry.qurry.WavesExecuter.measure": [[47, 3, 2, 0, "backend", "The quantum backend."], [47, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [47, 3, 2, 0, "export", "Whether to export the experiment."], [47, 3, 2, 0, "passmanager", "The passmanager."], [47, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [47, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [47, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [47, 3, 2, 0, "save_location", "The location to save the experiment."], [47, 3, 2, 0, "shots", "Shots of the job."], [47, 3, 2, 0, "tags", "The tags of the experiment."], [47, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [47, 3, 2, 0, "waves", "The key or the circuit to execute."]], "qurry.qurries.wavesqurry.qurry.WavesExecuter.measure_to_output": [[47, 3, 2, 0, "backend", "The quantum backend."], [47, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [47, 3, 2, 0, "export", "Whether to export the experiment."], [47, 3, 2, 0, "passmanager", "The passmanager."], [47, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [47, 3, 2, 0, "qasm_version", "The version of OpenQASM."], [47, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [47, 3, 2, 0, "save_location", "The location to save the experiment."], [47, 3, 2, 0, "shots", "Shots of the job."], [47, 3, 2, 0, "tags", "The tags of the experiment."], [47, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."], [47, 3, 2, 0, "waves", "The key or the circuit to execute."]], "qurry.qurrium": [[48, 0, 0, 1, "analysis", ""], [51, 0, 0, 1, "container", ""], [63, 0, 0, 1, "experiment", ""], [68, 0, 0, 1, "multimanager", ""], [72, 0, 0, 1, "qurrium", ""], [76, 0, 0, 1, "utils", ""]], "qurry.qurrium.analysis": [[48, 0, 0, 1, "analysis", ""]], "qurry.qurrium.analysis.analysis": [[48, 4, 1, 0, "AnalysisPrototype", "The base instance for the analysis of ExperimentPrototype."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype": [[48, 6, 1, 0, "content", "The content of the analysis."], [48, 5, 1, 0, "content_instance", "The content instance of the analysis."], [48, 7, 1, 0, "content_type", "The content type of the analysis."], [48, 6, 1, 0, "datetime", "Written time of analysis."], [48, 7, 1, 0, "deprecated_fields_converts", "Convert deprecated fields to new fields."], [48, 7, 1, 0, "export", "Export the analysis as main and side product dict."], [48, 6, 1, 0, "input", "The input of the analysis."], [48, 5, 1, 0, "input_instance", "The input instance of the analysis."], [48, 7, 1, 0, "input_type", "The input type of the analysis."], [48, 7, 1, 0, "load", "Read the analysis from main and side product dict."], [48, 6, 1, 0, "log", "Other info will be recorded."], [48, 7, 1, 0, "read", "Read the analysis from file index."], [48, 6, 1, 0, "serial", "Serial Number of analysis."], [48, 5, 1, 0, "side_product_fields", "The fields that will be stored as side product."], [48, 7, 1, 0, "statesheet", "Generate the state sheet of the analysis."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype.__init__": [[48, 3, 2, "qurry.qurrium.analysis.analysis.AnalysisPrototype", "datatime", "The base instance for the analysis of ExperimentPrototype."], [48, 3, 2, "qurry.qurrium.analysis.analysis.AnalysisPrototype", "log", "The base instance for the analysis of ExperimentPrototype."], [48, 3, 2, "qurry.qurrium.analysis.analysis.AnalysisPrototype", "other_kwargs", "The base instance for the analysis of ExperimentPrototype."], [48, 3, 2, "qurry.qurrium.analysis.analysis.AnalysisPrototype", "serial", "The base instance for the analysis of ExperimentPrototype."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype.deprecated_fields_converts": [[48, 3, 2, 0, "main", "The main product dict."], [48, 3, 2, 0, "side", "The side product dict."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype.export": [[48, 3, 2, 0, "jsonable", "If True, export as jsonable dict."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype.load": [[48, 3, 2, 0, "main", "The main product dict."], [48, 3, 2, 0, "side", "The side product dict."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype.read": [[48, 3, 2, 0, "file_index", "The file index."], [48, 3, 2, 0, "save_location", "The save location."]], "qurry.qurrium.analysis.analysis.AnalysisPrototype.statesheet": [[48, 3, 2, 0, "hoshi", "If True, show Hoshi name in statesheet."]], "qurry.qurrium.container": [[49, 0, 0, 1, "experiments", ""], [50, 0, 0, 1, "experiments_wrapper", ""], [52, 0, 0, 1, "multimanagers", ""], [53, 0, 0, 1, "multiquantity", ""], [54, 0, 0, 1, "passmanagers", ""], [55, 0, 0, 1, "waves_dynamic", ""], [56, 0, 0, 1, "waves_static", ""]], "qurry.qurrium.container.experiments": [[49, 4, 1, 0, "ExperimentContainer", "A customized dictionary for storing ExperimentPrototype."]], "qurry.qurrium.container.experiments.ExperimentContainer": [[49, 7, 1, 0, "call", "Call an experiment by its id."]], "qurry.qurrium.container.experiments.ExperimentContainer.__init__": [[49, 3, 2, "qurry.qurrium.container.experiments.ExperimentContainer", "args", "A customized dictionary for storing ExperimentPrototype."], [49, 3, 2, "qurry.qurrium.container.experiments.ExperimentContainer", "kwargs", "A customized dictionary for storing ExperimentPrototype."]], "qurry.qurrium.container.experiments.ExperimentContainer.call": [[49, 3, 2, 0, "exp_id", "The id of the experiment to be called."]], "qurry.qurrium.container.experiments_wrapper": [[50, 4, 1, 0, "ExperimentContainerWrapper", "A wrapper for ExperimentContainer for . and its corresponding MultiManager."]], "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper": [[50, 5, 1, 0, "all_exps_container", "Get all experiment containers."], [50, 7, 1, 0, "items", "Get all experiments from all experiment containers."], [50, 7, 1, 0, "where", "Get the experiment container where the experiment is located."]], "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper.__init__": [[50, 3, 2, "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper", "multimanagers", "A wrapper for ExperimentContainer for . and its corresponding MultiManager."], [50, 3, 2, "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper", "orphan_exps", "A wrapper for ExperimentContainer for . and its corresponding MultiManager."]], "qurry.qurrium.container.experiments_wrapper.ExperimentContainerWrapper.where": [[50, 3, 2, 0, "key", "The key of the experiment to be retrieved."]], "qurry.qurrium.container.multimanagers": [[52, 4, 1, 0, "MultiManagerContainer", "A customized dictionary for storing MultiManager objects."]], "qurry.qurrium.container.multimanagers.MultiManagerContainer": [[52, 7, 1, 0, "items", "The items method with more accurate type hinting."]], "qurry.qurrium.container.multiquantity": [[53, 4, 1, 0, "QuantityContainer", "The container for quantities of analysis for MultiManager."]], "qurry.qurrium.container.multiquantity.QuantityContainer": [[53, 7, 1, 0, "read", "Reads the analysis."], [53, 7, 1, 0, "remove", "Removes the analysis."], [53, 7, 1, 0, "write", "Writes the analysis to files."]], "qurry.qurrium.container.multiquantity.QuantityContainer.read": [[53, 3, 2, 0, "key", "The key of the analysis."], [53, 3, 2, 0, "name", "The name of the analysis."], [53, 3, 2, 0, "save_location", "The save location of the analysis."], [53, 3, 2, 0, "version", "The version of the analysis."]], "qurry.qurrium.container.multiquantity.QuantityContainer.remove": [[53, 3, 2, 0, "name", "The name of the analysis."]], "qurry.qurrium.container.multiquantity.QuantityContainer.write": [[53, 3, 2, 0, "save_location", "The save location of the analysis."]], "qurry.qurrium.container.passmanagers": [[54, 4, 1, 0, "PassManagerContainer", "A customized dictionary for storing PassManager objects."]], "qurry.qurrium.container.waves_dynamic": [[55, 6, 1, 0, "DyanmicWaveContainerByDict", "A Qurrium standard wave function container should be something dict-like structure, basically a MutableMapping."], [55, 1, 1, 0, "add", "Add new wave function to measure."], [55, 1, 1, 0, "call", "Export wave function as QuantumCircuit."], [55, 1, 1, 0, "copy_circuit", "Export a copy of wave function as QuantumCircuit."], [55, 1, 1, 0, "gate", "Export wave function as Gate."], [55, 1, 1, 0, "get_wave", "Parse wave Circuit into Instruction, Gate, or ~qiskit.quantum_info.Operator on QuantumCircuit."], [55, 1, 1, 0, "has", "Is there a wave with specific name."], [55, 1, 1, 0, "instruction", "Export wave function as Instruction."], [55, 1, 1, 0, "operator", "Export wave function as Operator."], [55, 1, 1, 0, "process", "Process the circuits for Qurrium."], [55, 1, 1, 0, "remove", "Remove wave function from measure."], [55, 1, 1, 0, "wave_container_maker", "A customized dictionary for storing waves."]], "qurry.qurrium.container.waves_dynamic.add": [[55, 3, 2, 0, "key", "Given a specific key to add to the wave function or circuit, if key == None, then generate a number as key. Defaults to None."], [55, 3, 2, 0, "replace", "If the key is already in the wave function or circuit, then replace the old wave function or circuit when True, or duplicate the wave function or circuit when 'duplicate'. Defaults to True."], [55, 3, 2, "qurry.qurrium.container.waves_dynamic.add", "self", "Add new wave function to measure."], [55, 3, 2, 0, "wave", "The wave function or circuit to add."]], "qurry.qurrium.container.waves_dynamic.call": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.call", "self", "Export wave function as QuantumCircuit."], [55, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_dynamic.copy_circuit": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.copy_circuit", "self", "Export a copy of wave function as QuantumCircuit."], [55, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_dynamic.gate": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.gate", "self", "Export wave function as Gate."], [55, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_dynamic.get_wave": [[55, 3, 2, 0, "run_by", "Export as Instruction, Gate, or ~qiskit.quantum_info.Operator or a copy when input is None. Defaults to None."], [55, 3, 2, "qurry.qurrium.container.waves_dynamic.get_wave", "self", "Parse wave Circuit into Instruction, Gate, or ~qiskit.quantum_info.Operator on QuantumCircuit."], [55, 3, 2, 0, "wave", "The key of wave in wave. Defaults to None."]], "qurry.qurrium.container.waves_dynamic.has": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.has", "self", "Is there a wave with specific name."], [55, 3, 2, 0, "wavename", "Name of wave which is used in .waves"]], "qurry.qurrium.container.waves_dynamic.instruction": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.instruction", "self", "Export wave function as Instruction."], [55, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_dynamic.operator": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.operator", "self", "Export wave function as Operator."], [55, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_dynamic.process": [[55, 3, 2, 0, "circuits", "The circuits."], [55, 3, 2, "qurry.qurrium.container.waves_dynamic.process", "self", "Process the circuits for Qurrium."]], "qurry.qurrium.container.waves_dynamic.remove": [[55, 3, 2, 0, "key", "The key of wave function or circuit."], [55, 3, 2, "qurry.qurrium.container.waves_dynamic.remove", "self", "Remove wave function from measure."]], "qurry.qurrium.container.waves_dynamic.wave_container_maker": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.wave_container_maker", "typename: str = &#x27;WaveContainer&#x27;", "A customized dictionary for storing waves."]], "qurry.qurrium.container.waves_dynamic.wave_container_maker.base_type: ~typing.Type[~typing.MutableMapping[~collections.abc": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.wave_container_maker", "Hashable", "A customized dictionary for storing waves."]], "qurry.qurrium.container.waves_dynamic.wave_container_maker.~qiskit.circuit.quantumcircuit": [[55, 3, 2, "qurry.qurrium.container.waves_dynamic.wave_container_maker", "QuantumCircuit]] = &lt;class &#x27;dict&#x27;&gt;", "A customized dictionary for storing waves."]], "qurry.qurrium.container.waves_static": [[56, 4, 1, 0, "WaveContainer", "WaveContainer is a customized dictionary for storing QuantumCircuit."]], "qurry.qurrium.container.waves_static.WaveContainer": [[56, 7, 1, 0, "add", "Add wave to container."], [56, 7, 1, 0, "call", "Export wave function as QuantumCircuit."], [56, 7, 1, 0, "copy_circuit", "Export a copy of wave function as QuantumCircuit."], [56, 7, 1, 0, "gate", "Export wave function as Gate."], [56, 7, 1, 0, "get_wave", "Parse wave Circuit into Instruction, Gate, or ~qiskit.quantum_info.Operator on QuantumCircuit."], [56, 7, 1, 0, "has", "Is there a wave with specific name."], [56, 7, 1, 0, "instruction", "Export wave function as Instruction."], [56, 7, 1, 0, "operator", "Export wave function as Operator."], [56, 7, 1, 0, "process", "Process the circuits in container."], [56, 7, 1, 0, "remove", "Remove wave from container."]], "qurry.qurrium.container.waves_static.WaveContainer.__init__": [[56, 3, 2, "qurry.qurrium.container.waves_static.WaveContainer", "args", "WaveContainer is a customized dictionary for storing QuantumCircuit."], [56, 3, 2, "qurry.qurrium.container.waves_static.WaveContainer", "kwargs", "WaveContainer is a customized dictionary for storing QuantumCircuit."]], "qurry.qurrium.container.waves_static.WaveContainer.add": [[56, 3, 2, 0, "key", "The key of wave in 'fict' .waves."], [56, 3, 2, 0, "replace", "Replace the wave with same key or not. Defaults to True."], [56, 3, 2, 0, "wave", "The wave circuit."]], "qurry.qurrium.container.waves_static.WaveContainer.call": [[56, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_static.WaveContainer.copy_circuit": [[56, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_static.WaveContainer.gate": [[56, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_static.WaveContainer.get_wave": [[56, 3, 2, 0, "run_by", "Export as Instruction, Gate, or ~qiskit.quantum_info.Operator or a copy when input is None. Defaults to None."], [56, 3, 2, 0, "wave", "The key of wave in wave. Defaults to None."]], "qurry.qurrium.container.waves_static.WaveContainer.has": [[56, 3, 2, 0, "wavename", "Name of wave which is used in .waves"]], "qurry.qurrium.container.waves_static.WaveContainer.instruction": [[56, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_static.WaveContainer.operator": [[56, 3, 2, 0, "wave", "The key of wave in 'dict' .waves."]], "qurry.qurrium.container.waves_static.WaveContainer.process": [[56, 3, 2, 0, "circuits", "The circuits or keys of circuits in container."]], "qurry.qurrium.container.waves_static.WaveContainer.remove": [[56, 3, 2, 0, "key", "The key of wave in 'dict' .waves."]], "qurry.qurrium.experiment": [[57, 0, 0, 1, "afterwards", ""], [58, 0, 0, 1, "analyses", ""], [59, 0, 0, 1, "arguments", ""], [60, 0, 0, 1, "beforewards", ""], [61, 0, 0, 1, "experiment", ""], [62, 0, 0, 1, "export", ""], [64, 0, 0, 1, "utils", ""]], "qurry.qurrium.experiment.afterwards": [[57, 4, 1, 0, "After", "The data of experiment will be independently exported in the folder 'legacy', which generated after the experiment."], [57, 1, 1, 0, "create_afterwards", "Create an After object."]], "qurry.qurrium.experiment.afterwards.After": [[57, 7, 1, 0, "clear_result", "Clear the result of experiment."], [57, 6, 1, 0, "counts", "Counts of experiment."], [57, 7, 1, 0, "default_value", "The default value of each field."], [57, 7, 1, 0, "export", "Export the experiment's data after executing."], [57, 7, 1, 0, "read", "Read the exported experiment file."], [57, 6, 1, 0, "result", "Results of experiment."]], "qurry.qurrium.experiment.afterwards.After.__init__": [[57, 3, 2, "qurry.qurrium.experiment.afterwards.After", "counts", "The data of experiment will be independently exported in the folder 'legacy', which generated after the experiment."], [57, 3, 2, "qurry.qurrium.experiment.afterwards.After", "result", "The data of experiment will be independently exported in the folder 'legacy', which generated after the experiment."]], "qurry.qurrium.experiment.afterwards.After.clear_result": [[57, 3, 2, "qurry.qurrium.experiment.afterwards.After.clear_result", "args", "Clear the result of experiment."], [57, 3, 2, 0, "mute_warning", "Mute the warning when clearing."], [57, 3, 2, 0, "security", "Security for clearing."]], "qurry.qurrium.experiment.afterwards.After.read": [[57, 3, 2, 0, "file_index", "The index of exported experiment file."], [57, 3, 2, 0, "save_location", "The location of exported experiment file."]], "qurry.qurrium.experiment.afterwards.create_afterwards": [[57, 3, 2, 0, "after", "The After object to create."]], "qurry.qurrium.experiment.analyses": [[58, 4, 1, 0, "AnalysesContainer", "A customized dictionary for storing AnalysisPrototype objects."]], "qurry.qurrium.experiment.analyses.AnalysesContainer": [[58, 7, 1, 0, "export", "Export the analysis container."]], "qurry.qurrium.experiment.analyses.AnalysesContainer.__init__": [[58, 3, 2, "qurry.qurrium.experiment.analyses.AnalysesContainer", "args", "A customized dictionary for storing AnalysisPrototype objects."], [58, 3, 2, "qurry.qurrium.experiment.analyses.AnalysesContainer", "kwargs", "A customized dictionary for storing AnalysisPrototype objects."]], "qurry.qurrium.experiment.arguments": [[59, 4, 1, 0, "ArgumentsPrototype", "Construct the experiment's parameters for specific options, which is overwritable by the inherition class."], [59, 4, 1, 0, "Commonparams", "Construct the experiment's parameters for system running."], [59, 4, 1, 0, "CommonparamsDict", "The export dictionary of Commonparams."], [59, 4, 1, 0, "CommonparamsReadReturn", "The return type of Commonparams.read_with_arguments()."], [59, 8, 1, 0, "REQUIRED_FOLDER", "The required folder for exporting experiment."], [59, 1, 1, 0, "commons_dealing", "Dealing some special commons arguments."], [59, 1, 1, 0, "create_exp_args", "Create experiment arguments from the given arguments."], [59, 1, 1, 0, "create_exp_commons", "Create experiment commons from the given commons."], [59, 1, 1, 0, "create_exp_outfields", "Create experiment outfields from the given outfields."], [59, 1, 1, 0, "filter_deprecated_args", "Filter deprecated arguments from the given arguments or commons."], [59, 1, 1, 0, "v5_to_v7_field_transpose", "The field name of v5 to v7."], [59, 1, 1, 0, "v7_to_v9_field_transpose", "The field name of v7 to v9."], [59, 1, 1, 0, "wave_key_to_target_keys", "Convert the wave key to target keys."]], "qurry.qurrium.experiment.arguments.ArgumentsPrototype": [[59, 6, 1, 0, "exp_name", "Name of experiment."]], "qurry.qurrium.experiment.arguments.ArgumentsPrototype.__init__": [[59, 3, 2, "qurry.qurrium.experiment.arguments.ArgumentsPrototype", "exp_name", "Construct the experiment's parameters for specific options, which is overwritable by the inherition class."]], "qurry.qurrium.experiment.arguments.Commonparams": [[59, 6, 1, 0, "backend", "Backend to execute the circuits on, or the backend used."], [59, 6, 1, 0, "datetimes", "The datetime of experiment."], [59, 7, 1, 0, "default_value", "The default value of each field."], [59, 6, 1, 0, "exp_id", "ID of experiment."], [59, 7, 1, 0, "export", "Export the experiment's common parameters."], [59, 7, 1, 0, "read_with_arguments", "Read the exported experiment file."], [59, 6, 1, 0, "run_args", "Arguments for run()"], [59, 6, 1, 0, "save_location", "Location of saving experiment. If this experiment is called by MultiManager, then adventure, legacy, tales, and reports will be exported to their dedicated folders in this location respectively. This location is the default location for it's not specific where to save when call write(), if does, then will be overwriten and update."], [59, 6, 1, 0, "serial", "Index of experiment in MultiManager."], [59, 6, 1, 0, "shots", "1024)."], [59, 6, 1, 0, "summoner_id", "ID of experiment of MultiManager."], [59, 6, 1, 0, "summoner_name", "Name of experiment of MultiManager."], [59, 6, 1, 0, "tags", "Tags of experiment."], [59, 6, 1, 0, "target_keys", "The target keys of experiment."], [59, 6, 1, 0, "transpile_args", "Arguments of transpile()."]], "qurry.qurrium.experiment.arguments.Commonparams.__init__": [[59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "backend", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "datetimes", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "exp_id", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "run_args", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "save_location", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "serial", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "shots", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "summoner_id", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "summoner_name", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "tags", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "target_keys", "Construct the experiment's parameters for system running."], [59, 3, 2, "qurry.qurrium.experiment.arguments.Commonparams", "transpile_args", "Construct the experiment's parameters for system running."]], "qurry.qurrium.experiment.arguments.Commonparams.read_with_arguments": [[59, 3, 2, 0, "exp_id", "The ID of experiment."], [59, 3, 2, 0, "file_index", "The index of exported experiment file."], [59, 3, 2, 0, "save_location", "The location of exported experiment file."]], "qurry.qurrium.experiment.arguments.commons_dealing": [[59, 3, 2, 0, "commons_dict", "The common parameters of the experiment."]], "qurry.qurrium.experiment.arguments.create_exp_args": [[59, 3, 2, 0, "arguments", "The arguments to be parsed."], [59, 3, 2, 0, "arguments_instance", "The instance of the arguments class."]], "qurry.qurrium.experiment.arguments.create_exp_commons": [[59, 3, 2, 0, "commons", "The commons to be parsed."]], "qurry.qurrium.experiment.arguments.create_exp_outfields": [[59, 3, 2, 0, "outfields", "The outfields to be parsed."]], "qurry.qurrium.experiment.arguments.filter_deprecated_args": [[59, 3, 2, 0, "arguments_or_commons_input", "The arguments or commons to be filtered."], [59, 3, 2, 0, "container_fields", "The fields to be kept."]], "qurry.qurrium.experiment.arguments.v5_to_v7_field_transpose": [[59, 3, 2, 0, "data_args", "The arguments of experiment."]], "qurry.qurrium.experiment.arguments.v7_to_v9_field_transpose": [[59, 3, 2, 0, "data_args", "The arguments of experiment."]], "qurry.qurrium.experiment.arguments.wave_key_to_target_keys": [[59, 3, 2, 0, "wave_key", "The wave key."]], "qurry.qurrium.experiment.beforewards": [[60, 4, 1, 0, "Before", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."], [60, 1, 1, 0, "create_beforewards", "Create a Before object."], [60, 1, 1, 0, "v5_to_v7_field_transpose", "Transpose the v5 field to v7 field."], [60, 1, 1, 0, "v7_to_v11_field_transpose", "Transpose the v7 field to v11 field."]], "qurry.qurrium.experiment.beforewards.Before": [[60, 6, 1, 0, "circuit", "The transpiled circuits of experiment."], [60, 6, 1, 0, "circuit_qasm", "The OpenQASM of transpiled circuits."], [60, 7, 1, 0, "default_value", "These default value are used for autofill the missing value."], [60, 7, 1, 0, "export", "Export the experiment's data before executing."], [60, 6, 1, 0, "job_id", "ID of job for pending on real machine (IBMQBackend)."], [60, 7, 1, 0, "read", "Read the exported experiment file."], [60, 7, 1, 0, "revive_circuit", "Revive the circuit from the qasm, return the revived circuits."], [60, 7, 1, 0, "revive_target", "Revive the target circuits from the qasm, return the revived target."], [60, 6, 1, 0, "side_product", "The data of experiment will be independently exported in the folder 'tales'."], [60, 6, 1, 0, "target", "The target circuits of experiment."], [60, 6, 1, 0, "target_qasm", "The OpenQASM of target circuits."]], "qurry.qurrium.experiment.beforewards.Before.__init__": [[60, 3, 2, "qurry.qurrium.experiment.beforewards.Before", "circuit", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."], [60, 3, 2, "qurry.qurrium.experiment.beforewards.Before", "circuit_qasm", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."], [60, 3, 2, "qurry.qurrium.experiment.beforewards.Before", "job_id", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."], [60, 3, 2, "qurry.qurrium.experiment.beforewards.Before", "side_product", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."], [60, 3, 2, "qurry.qurrium.experiment.beforewards.Before", "target", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."], [60, 3, 2, "qurry.qurrium.experiment.beforewards.Before", "target_qasm", "The data of experiment will be independently exported in the folder 'advent', which generated before the experiment."]], "qurry.qurrium.experiment.beforewards.Before.export": [[60, 3, 2, "qurry.qurrium.experiment.beforewards.Before.export", "export_transpiled_circuit", "Export the experiment's data before executing."]], "qurry.qurrium.experiment.beforewards.Before.read": [[60, 3, 2, 0, "file_index", "The index of exported experiment file."], [60, 3, 2, 0, "save_location", "The location of exported experiment file."]], "qurry.qurrium.experiment.beforewards.Before.revive_circuit": [[60, 3, 2, 0, "replace_circuits", "Whether to replace the circuits."]], "qurry.qurrium.experiment.beforewards.Before.revive_target": [[60, 3, 2, 0, "replace_target", "Whether to replace the target circuits."]], "qurry.qurrium.experiment.beforewards.create_beforewards": [[60, 3, 2, 0, "beforewards", "The Beforewards object to create."]], "qurry.qurrium.experiment.beforewards.v5_to_v7_field_transpose": [[60, 3, 2, "qurry.qurrium.experiment.beforewards.v5_to_v7_field_transpose", "advent", "Transpose the v5 field to v7 field."]], "qurry.qurrium.experiment.beforewards.v7_to_v11_field_transpose": [[60, 3, 2, "qurry.qurrium.experiment.beforewards.v7_to_v11_field_transpose", "advent", "Transpose the v7 field to v11 field."]], "qurry.qurrium.experiment.experiment": [[61, 4, 1, 0, "ExperimentPrototype", "The instance of experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype": [[61, 6, 1, 0, "afterwards", "The afterwards of the experiment."], [61, 5, 1, 0, "analysis_instance", "The analysis instance for this experiment."], [61, 7, 1, 0, "analyze", "Analyzing the example circuit results in specific method. Where should be overwritten by each construction of new measurement."], [61, 6, 1, 0, "args", "The arguments of the experiment."], [61, 5, 1, 0, "arguments_instance", "The arguments instance for this experiment."], [61, 6, 1, 0, "beforewards", "The beforewards of the experiment."], [61, 7, 1, 0, "build", "Construct the experiment."], [61, 7, 1, 0, "build_for_multiprocess", "Build wrapper for multiprocess."], [61, 6, 1, 0, "commons", "The common parameters of the experiment."], [61, 5, 1, 0, "exp_id", "ID of experiment."], [61, 7, 1, 0, "export", "Export the data of experiment into specific namedtuples for exporting."], [61, 5, 1, 0, "is_auto_analysis", "Check if the experiment has auto analysis."], [61, 5, 1, 0, "is_hold_by_multimanager", "Check if the experiment is hold by a multimanager."], [61, 6, 1, 0, "memory_usage_factor", "The factor of the memory usage of the experiment. When the experiment is created, it will be set to -1 for no measurement yet. When the experiment is built, it will be set to the memory usage of the experiment."], [61, 7, 1, 0, "method", "The method to construct circuit. Where should be overwritten by each construction of new measurement."], [61, 6, 1, 0, "outfields", "The outfields of the experiment."], [61, 7, 1, 0, "params_control", "Control the experiment's parameters."], [61, 7, 1, 0, "quantities", "Computing specific squantity. Where should be overwritten by each construction of new measurement."], [61, 7, 1, 0, "read", "Read the experiment from file."], [61, 7, 1, 0, "replace_backend", "Replace the backend of the experiment."], [61, 6, 1, 0, "reports", "The reports of the experiment."], [61, 7, 1, 0, "result", "Export the result of the experiment."], [61, 7, 1, 0, "run", "Export the result after running the job."], [61, 7, 1, 0, "statesheet", "Show the state of experiment."], [61, 7, 1, 0, "write", "Export the experiment data, if there is a previous export, then will overwrite."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.__init__": [[61, 3, 2, "qurry.qurrium.experiment.experiment.ExperimentPrototype", "afterwards", "The instance of experiment."], [61, 3, 2, "qurry.qurrium.experiment.experiment.ExperimentPrototype", "arguments", "The instance of experiment."], [61, 3, 2, "qurry.qurrium.experiment.experiment.ExperimentPrototype", "beforewards", "The instance of experiment."], [61, 3, 2, "qurry.qurrium.experiment.experiment.ExperimentPrototype", "commonparams", "The instance of experiment."], [61, 3, 2, "qurry.qurrium.experiment.experiment.ExperimentPrototype", "outfields", "The instance of experiment."], [61, 3, 2, "qurry.qurrium.experiment.experiment.ExperimentPrototype", "reports", "The instance of experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.build": [[61, 3, 2, 0, "backend", "The quantum backend."], [61, 3, 2, 0, "custom_and_main_kwargs", "Other custom arguments."], [61, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [61, 3, 2, 0, "export", "Whether to export the experiment."], [61, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [61, 3, 2, 0, "passmanager_pair", "The passmanager pair for transpile."], [61, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [61, 3, 2, 0, "qasm_version", "The export version of OpenQASM."], [61, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [61, 3, 2, 0, "save_location", "The location to save the experiment."], [61, 3, 2, 0, "serial", "Index of experiment in MultiManager. !!ATTENTION, this should only be used by :class:`~qurry.qurrium.multimanager.multimanager.MultiManager`!! Defaults to None."], [61, 3, 2, 0, "shots", "Shots of the job."], [61, 3, 2, 0, "summoner_id", "ID of experiment of MultiManager. !!ATTENTION, this should only be used by :class:`~qurry.qurrium.multimanager.multimanager.MultiManager`!! Defaults to None."], [61, 3, 2, 0, "summoner_name", "Name of experiment of MultiManager. !!ATTENTION, this should only be used by :class:`~qurry.qurrium.multimanager.multimanager.MultiManager`!! Defaults to None."], [61, 3, 2, 0, "tags", "Given the experiment multiple tags to make a dictionary for recongnizing it. Defaults to None."], [61, 3, 2, 0, "targets", "The circuits of the experiment."], [61, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.build_for_multiprocess": [[61, 3, 2, 0, "config", "The arguments of the experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.export": [[61, 3, 2, 0, "export_transpiled_circuit", "Whether to export the transpiled circuit as txt."], [61, 3, 2, 0, "save_location", "The location to save the experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.method": [[61, 3, 2, 0, "arguments", "The arguments of the experiment."], [61, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [61, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment."], [61, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.params_control": [[61, 3, 2, 0, "custom_kwargs", "Other custom arguments."], [61, 3, 2, 0, "exp_name", "Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports."], [61, 3, 2, 0, "targets", "The circuits of the experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.read": [[61, 3, 2, 0, "name_or_id", "The name or id of the experiment to be read."], [61, 3, 2, 0, "save_location", "The location of the experiment to be read."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.replace_backend": [[61, 3, 2, 0, "backend", "The new backend."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.result": [[61, 3, 2, 0, "export", "Whether to export the experiment."], [61, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment."], [61, 3, 2, 0, "save_location", "The location to save the experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.run": [[61, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.statesheet": [[61, 3, 2, 0, "hoshi", "Showing name of Hoshi."], [61, 3, 2, 0, "report_expanded", "Show more infomation."]], "qurry.qurrium.experiment.experiment.ExperimentPrototype.write": [[61, 3, 2, 0, "export_transpiled_circuit", "Whether to export the transpiled circuit as txt."], [61, 3, 2, 0, "multiprocess", "Whether to use multiprocessing."], [61, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment."], [61, 3, 2, 0, "qurryinfo_hold_access", "Whether to hold the I/O of qurryinfo, then export by MultiManager. It should be ONLY control by MultiManager."], [61, 3, 2, 0, "save_location", "Where to save the export content as json file. If save_location == None, then use the value in self.commons to be exported, if it's None too, then raise error."]], "qurry.qurrium.experiment.export": [[62, 4, 1, 0, "Export", "Data-stored namedtuple with all experiments data which is jsonable."]], "qurry.qurrium.experiment.export.Export": [[62, 6, 1, 0, "adventures", "Recording the data of 'beforeward', which will be packed into .advent.json. ~ A Great Adventure begins ~"], [62, 6, 1, 0, "args", "Construct the experiment's parameters, which will be packed into .args.json."], [62, 6, 1, 0, "commons", "Construct the experiment's common parameters, which will be packed into .args.json."], [62, 6, 1, 0, "exp_id", "ID of experiment, which will be packed into .args.json."], [62, 6, 1, 0, "exp_name", "Name of the experiment, which will be packed into .args.json. If this experiment is called by multimanager, then this name will never apply as filename."], [62, 6, 1, 0, "filename", "The name of file to be exported, it will be decided by export() when it's called."], [62, 6, 1, 0, "files", "The list of file to be exported."], [62, 6, 1, 0, "legacy", "Recording the data of 'afterward', which will be packed into .legacy.json. ~ The Legacy remains from the achievement of ancestors ~"], [62, 6, 1, 0, "outfields", "Recording the data of other unused arguments, which will be packed into .args.json."], [62, 6, 1, 0, "reports", "Recording the data of 'reports', which will be packed into .reports.json."], [62, 6, 1, 0, "serial", "Index of experiment in MultiManager, which will be packed into .args.json."], [62, 6, 1, 0, "summoner_id", "ID of experiment of the MultiManager, which will be packed into .args.json."], [62, 6, 1, 0, "summoner_name", "Name of experiment of the MultiManager, which will be packed into .args.json."], [62, 6, 1, 0, "tales", "Recording the data of 'side_product' in 'afterward' and 'beforewards' for API, which will be packed into .*.tales.json. ~ Tales of braves circulate ~"], [62, 6, 1, 0, "tales_reports", "Recording the data of 'side_product' in 'reports' for API, which will be packed into .*.reprts.json."], [62, 7, 1, 0, "write", "Export the experiment data, if there is a previous export, then will overwrite."]], "qurry.qurrium.experiment.export.Export.__init__": [[62, 3, 2, "qurry.qurrium.experiment.export.Export", "adventures", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "args", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "commons", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "exp_id", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "exp_name", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "filename", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "files", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "legacy", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "outfields", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "reports", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "serial", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "summoner_id", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "summoner_name", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "tales", "Data-stored namedtuple with all experiments data which is jsonable."], [62, 3, 2, "qurry.qurrium.experiment.export.Export", "tales_reports", "Data-stored namedtuple with all experiments data which is jsonable."]], "qurry.qurrium.experiment.export.Export.write": [[62, 3, 2, 0, "multiprocess", "Whether to use multiprocess to export, Defaults to False. It's dangerous to use multiprocess to export."], [62, 3, 2, 0, "pbar", "The progress bar for exporting."]], "qurry.qurrium.experiment.utils": [[64, 1, 1, 0, "create_save_location", "Create a save location for the experiment."], [64, 1, 1, 0, "decide_folder_and_filename", "Decide the folder and filename for the experiment."], [64, 1, 1, 0, "exp_id_process", "Check the exp_id is valid or not, if not, then generate a new one."], [64, 1, 1, 0, "folder_with_repeat_times", "Create a folder with repeat times."], [64, 1, 1, 0, "implementation_check", "Check whether the experiment is implemented correctly."], [64, 1, 1, 0, "make_statesheet", "Show the state of experiment."], [64, 1, 1, 0, "memory_usage_factor_expect", "Estimate the memory usage of ExperimentPrototype by the circuits."], [64, 1, 1, 0, "summonner_check", "Check the summoner information taken from the experiment."]], "qurry.qurrium.experiment.utils.create_save_location": [[64, 3, 2, 0, "commons", "The common parameters of the experiment. It is used to get the default save location if save_location is None."], [64, 3, 2, 0, "save_location", "The save location of the experiment."]], "qurry.qurrium.experiment.utils.decide_folder_and_filename": [[64, 3, 2, 0, "args", "The arguments of the experiment."], [64, 3, 2, 0, "commons", "The common parameters of the experiment."]], "qurry.qurrium.experiment.utils.exp_id_process": [[64, 3, 2, 0, "exp_id", "The id of the experiment to be checked."]], "qurry.qurrium.experiment.utils.folder_with_repeat_times": [[64, 3, 2, 0, "exp_name", "The name of the experiment."], [64, 3, 2, 0, "repeat_times", "The repeat times of the experiment."]], "qurry.qurrium.experiment.utils.implementation_check": [[64, 3, 2, "qurry.qurrium.experiment.utils.implementation_check", "args", "Check whether the experiment is implemented correctly."], [64, 3, 2, "qurry.qurrium.experiment.utils.implementation_check", "commons", "Check whether the experiment is implemented correctly."], [64, 3, 2, "qurry.qurrium.experiment.utils.implementation_check", "name_exps", "Check whether the experiment is implemented correctly."]], "qurry.qurrium.experiment.utils.make_statesheet": [[64, 3, 2, 0, "afterwards", "Afterwards of the experiment."], [64, 3, 2, 0, "args", "Arguments of the experiment."], [64, 3, 2, 0, "beforewards", "Beforewards of the experiment."], [64, 3, 2, 0, "commons", "Common parameters of the experiment."], [64, 3, 2, 0, "exp_name", "Name of the experiment."], [64, 3, 2, 0, "hoshi", "Showing name of Hoshi."], [64, 3, 2, 0, "outfields", "Unused arguments."], [64, 3, 2, 0, "report_expanded", "Show more infomation."], [64, 3, 2, 0, "reports", "Reports of the experiment."]], "qurry.qurrium.experiment.utils.memory_usage_factor_expect": [[64, 3, 2, 0, "circuits", "The circuits to be estimated."], [64, 3, 2, 0, "commonparams", "The common parameters of the experiment."], [64, 3, 2, "qurry.qurrium.experiment.utils.memory_usage_factor_expect", "target", "Estimate the memory usage of ExperimentPrototype by the circuits."]], "qurry.qurrium.experiment.utils.summonner_check": [[64, 3, 2, 0, "serial", "The serial number of the experiment."], [64, 3, 2, 0, "summoner_id", "The ID of the summoner."], [64, 3, 2, 0, "summoner_name", "The name of the summoner."]], "qurry.qurrium.multimanager": [[65, 0, 0, 1, "afterwards", ""], [66, 0, 0, 1, "arguments", ""], [67, 0, 0, 1, "beforewards", ""], [69, 0, 0, 1, "multimanager", ""], [70, 0, 0, 1, "process", ""], [71, 0, 0, 1, "utils", ""]], "qurry.qurrium.multimanager.afterwards": [[65, 4, 1, 0, "After", "dataStateDepending and dataNeccessary in V4 format."]], "qurry.qurrium.multimanager.afterwards.After": [[65, 6, 1, 0, "allCounts", "The dict of all counts of each experiments."], [65, 6, 1, 0, "retrievedResult", "The list of retrieved results, which multiple ExperimentPrototype shared."]], "qurry.qurrium.multimanager.afterwards.After.__init__": [[65, 3, 2, "qurry.qurrium.multimanager.afterwards.After", "allCounts", "dataStateDepending and dataNeccessary in V4 format."], [65, 3, 2, "qurry.qurrium.multimanager.afterwards.After", "retrievedResult", "dataStateDepending and dataNeccessary in V4 format."]], "qurry.qurrium.multimanager.arguments": [[66, 4, 1, 0, "MultiCommonparams", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 4, 1, 0, "MultiCommonparamsDict", "Dictionary format of MultiCommonparams."], [66, 4, 1, 0, "MultiCommonparamsRawdDict", "Rawread dictionary of MultiCommonparams."], [66, 8, 1, 0, "PENDING_STRATEGY", "List of pending strategy."], [66, 8, 1, 0, "PENDING_TARGET_PROVIDER", "List of backend provider."], [66, 8, 1, 0, "PendingStrategyLiteral", "Type of pending strategy."], [66, 8, 1, 0, "PendingTargetProviderLiteral", "Type of backend provider."], [66, 1, 1, 0, "v5_to_v7_field_transpose", "Transpose the field name of V5 format to V7 format."]], "qurry.qurrium.multimanager.arguments.MultiCommonparams": [[66, 6, 1, 0, "backend", "Backend to execute the circuits on, which multiple experiments shared."], [66, 7, 1, 0, "build", "Build MultiCommonparams from rawread file."], [66, 6, 1, 0, "datetimes", "Alias for field number 11"], [66, 7, 1, 0, "default_value", "These default value are used for autofill the missing value."], [66, 6, 1, 0, "export_location", "Location of exporting experiment, export_location is the final result decided by experiment."], [66, 6, 1, 0, "files", "Alias for field number 7"], [66, 6, 1, 0, "jobstype", "Type of jobs to run multiple experiments. - jobstype: \"local\", \"IBMQ\", \"IBM\", \"AWS_Bracket\", \"Azure_Q\""], [66, 6, 1, 0, "manager_run_args", "Other arguments will be passed to IBMQJobManager()"], [66, 6, 1, 0, "pending_strategy", "Type of pending strategy. - pendingStrategy: \"default\", \"onetime\", \"each\", \"tags\""], [66, 7, 1, 0, "rawread", "Build MultiCommonparams from rawread file."], [66, 6, 1, 0, "save_location", "Location of saving experiment."], [66, 6, 1, 0, "shots", "1024), which multiple experiments shared."], [66, 6, 1, 0, "summoner_id", "ID of experiment of the multiManager."], [66, 6, 1, 0, "summoner_name", "Name of experiment of the multiManager."], [66, 6, 1, 0, "tags", "Tags of experiment of the multiManager."]], "qurry.qurrium.multimanager.arguments.MultiCommonparams.__init__": [[66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "backend", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "datetimes", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "export_location", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "files", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "jobstype", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "manager_run_args", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "pending_strategy", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "save_location", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "shots", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "summoner_id", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "summoner_name", "Multiple jobs shared. argsMultiMain in V4 format."], [66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams", "tags", "Multiple jobs shared. argsMultiMain in V4 format."]], "qurry.qurrium.multimanager.arguments.MultiCommonparams.build": [[66, 3, 2, "qurry.qurrium.multimanager.arguments.MultiCommonparams.build", "raw_multiconfig", "Build MultiCommonparams from rawread file."]], "qurry.qurrium.multimanager.arguments.MultiCommonparams.rawread": [[66, 3, 2, 0, "export_location", "The location of exporting experiment."], [66, 3, 2, 0, "mutlticonfig_name", "The path of the rawread file."], [66, 3, 2, 0, "save_location", "The location of saving experiment."]], "qurry.qurrium.multimanager.arguments.v5_to_v7_field_transpose": [[66, 3, 2, 0, "rawread_multiconfig", "The field name of MultiCommonparams in V5 format."]], "qurry.qurrium.multimanager.beforewards": [[67, 4, 1, 0, "Before", "dataNeccessary and expsMultiMain in V4 format."], [67, 8, 1, 0, "EXPORTING_NAME", "The exporting name of Before in V7 format."], [67, 8, 1, 0, "TagListKeyable", "Type of keyable in TagList."]], "qurry.qurrium.multimanager.beforewards.Before": [[67, 6, 1, 0, "circuits_map", "The map of circuits of each experiments in the index of pending, which multiple experiments shared."], [67, 6, 1, 0, "circuits_num", "The map with tags of index of experiments, which multiple experiments shared."], [67, 6, 1, 0, "exps_config", "The dict of config of each experiments."], [67, 6, 1, 0, "index_taglist", "The list of experiments index but grouped by tags, which multiple experiments shared."], [67, 6, 1, 0, "job_id", "The list of job_id in pending, which multiple experiments shared, it works only when executing experiments is remote."], [67, 6, 1, 0, "job_taglist", "The list of job id but grouped by tags, which multiple experiments shared."], [67, 6, 1, 0, "pending_pool", "The pool of pending jobs, which multiple experiments shared, it works only when executing experiments is remote."], [67, 7, 1, 0, "read", "Reads the data of Before from the file."]], "qurry.qurrium.multimanager.beforewards.Before.__init__": [[67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "circuits_map", "dataNeccessary and expsMultiMain in V4 format."], [67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "circuits_num", "dataNeccessary and expsMultiMain in V4 format."], [67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "exps_config", "dataNeccessary and expsMultiMain in V4 format."], [67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "index_taglist", "dataNeccessary and expsMultiMain in V4 format."], [67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "job_id", "dataNeccessary and expsMultiMain in V4 format."], [67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "job_taglist", "dataNeccessary and expsMultiMain in V4 format."], [67, 3, 2, "qurry.qurrium.multimanager.beforewards.Before", "pending_pool", "dataNeccessary and expsMultiMain in V4 format."]], "qurry.qurrium.multimanager.beforewards.Before.read": [[67, 3, 2, 0, "export_location", "The location of exporting."], [67, 3, 2, 0, "file_location", "The location of file."], [67, 3, 2, 0, "version", "The version of file."]], "qurry.qurrium.multimanager.multimanager": [[69, 4, 1, 0, "MultiManager", "The manager of multiple experiments."]], "qurry.qurrium.multimanager.multimanager.MultiManager": [[69, 6, 1, 0, "after_lock", "Protect the afterward content to be overwritten. When setitem is called and completed, it will be setted as False automatically."], [69, 7, 1, 0, "analyze", "Analyze the experiments."], [69, 7, 1, 0, "build", "Build the multi-experiment."], [69, 7, 1, 0, "clear_all_exps_result", "Clear the result of all experiments."], [69, 7, 1, 0, "compress", "Compress the export_location to tar.xz."], [69, 7, 1, 0, "easycompress", "Compress the export_location to tar.xz."], [69, 7, 1, 0, "easydecompress", "Decompress the tar.xz file of experiment."], [69, 6, 1, 0, "exps", "The experiments container."], [69, 5, 1, 0, "id", "ID of experiment of the MultiManager."], [69, 6, 1, 0, "mute_auto_lock", "Whether mute the auto-lock message."], [69, 5, 1, 0, "name", "Name of experiment of the MultiManager."], [69, 6, 1, 0, "quantity_container", "The container of quantity."], [69, 6, 1, 0, "qurryinfo", "The qurryinfo of the multi-experiment."], [69, 7, 1, 0, "read", "Read the multi-experiment."], [69, 7, 1, 0, "register", "Register the experiment to multimanager."], [69, 7, 1, 0, "remove_analysis", "Removes the analysis."], [69, 7, 1, 0, "reset_afterwards", "Reset the measurement and release memory for overwrite."], [69, 5, 1, 0, "summoner_id", "ID of experiment of the MultiManager."], [69, 5, 1, 0, "summoner_name", "Name of experiment of the MultiManager."], [69, 7, 1, 0, "update_save_location", "Update the save location of the multi-experiment."], [69, 7, 1, 0, "write", "Export the multi-experiment."]], "qurry.qurrium.multimanager.multimanager.MultiManager.__init__": [[69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "afterwards", "The manager of multiple experiments."], [69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "beforewards", "The manager of multiple experiments."], [69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "gitignore", "The manager of multiple experiments."], [69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "multicommons", "The manager of multiple experiments."], [69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "naming_complex", "The manager of multiple experiments."], [69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "outfields", "The manager of multiple experiments."], [69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager", "quantity_container", "The manager of multiple experiments."]], "qurry.qurrium.multimanager.multimanager.MultiManager.analyze": [[69, 3, 2, 0, "analysis_args", "The arguments of analysis."], [69, 3, 2, 0, "analysis_name", "The name of analysis."], [69, 3, 2, 0, "no_serialize", "Whether serialize the analysis."], [69, 3, 2, 0, "specific_analysis_args", "The specific analysis arguments."]], "qurry.qurrium.multimanager.multimanager.MultiManager.clear_all_exps_result": [[69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager.clear_all_exps_result", "args", "Clear the result of all experiments."], [69, 3, 2, 0, "mute_warning", "Mute the warning when clearing."], [69, 3, 2, 0, "security", "Security for clearing."]], "qurry.qurrium.multimanager.multimanager.MultiManager.compress": [[69, 3, 2, 0, "compress_overwrite", "Reproduce all the compressed files."], [69, 3, 2, 0, "remain_only_compressed", "Remove uncompressed files."]], "qurry.qurrium.multimanager.multimanager.MultiManager.easycompress": [[69, 3, 2, 0, "overwrite", "Reproduce all the compressed files."]], "qurry.qurrium.multimanager.multimanager.MultiManager.easydecompress": [[69, 3, 2, 0, "naming_complex", "The naming complex of experiment."]], "qurry.qurrium.multimanager.multimanager.MultiManager.read": [[69, 3, 2, 0, "experiment_instance", "The instance of experiment."], [69, 3, 2, 0, "is_read_or_retrieve", "Whether read or retrieve."], [69, 3, 2, 0, "read_from_tarfile", "Whether read from tarfile."], [69, 3, 2, 0, "save_location", "Location of saving experiment."], [69, 3, 2, 0, "summoner_name", "Name of experiment of the MultiManager."]], "qurry.qurrium.multimanager.multimanager.MultiManager.register": [[69, 3, 2, 0, "config", "The config of experiment."], [69, 3, 2, 0, "current_id", "ID of experiment."], [69, 3, 2, 0, "exps_instance", "The instance of experiment."]], "qurry.qurrium.multimanager.multimanager.MultiManager.remove_analysis": [[69, 3, 2, 0, "name", "The name of the analysis."]], "qurry.qurrium.multimanager.multimanager.MultiManager.reset_afterwards": [[69, 3, 2, "qurry.qurrium.multimanager.multimanager.MultiManager.reset_afterwards", "args", "Reset the measurement and release memory for overwrite."], [69, 3, 2, 0, "mute_warning", "Mute warning."], [69, 3, 2, 0, "security", "Security for reset."]], "qurry.qurrium.multimanager.multimanager.MultiManager.update_save_location": [[69, 3, 2, 0, "save_location", "Location of saving experiment."], [69, 3, 2, 0, "without_serial", "Whether without serial number."]], "qurry.qurrium.multimanager.multimanager.MultiManager.write": [[69, 3, 2, 0, "export_transpiled_circuit", "Export the transpiled circuit."], [69, 3, 2, 0, "multiprocess", "Whether to use multiprocess for exporting."], [69, 3, 2, 0, "save_location", "Location of saving experiment. Defaults to None."], [69, 3, 2, 0, "skip_before_and_after", "Skip the beforewards and afterwards."], [69, 3, 2, 0, "skip_exps", "Skip the experiments."], [69, 3, 2, 0, "skip_quantities", "Skip the quantities container."]], "qurry.qurrium.multimanager.process": [[70, 1, 1, 0, "datetimedict_process", "Process the datetime dict of multimanager."], [70, 1, 1, 0, "multiprocess_exporter", "Multiprocess exporter and writer for experiment."], [70, 1, 1, 0, "multiprocess_exporter_wrapper", "Multiprocess wrapper for exporter."], [70, 1, 1, 0, "multiprocess_writer", "Multiprocess exporter and writer for experiment."], [70, 1, 1, 0, "multiprocess_writer_wrapper", "Multiprocess wrapper for exporter."]], "qurry.qurrium.multimanager.process.datetimedict_process": [[70, 3, 2, 0, "is_read_or_retrieve", "Whether read or retrieve."], [70, 3, 2, 0, "multicommons", "The common parameters of multimanager."], [70, 3, 2, 0, "multiconfig_name_v5", "The path of multiConfig in v5."], [70, 3, 2, 0, "multiconfig_name_v7", "The path of multiConfig in v7."], [70, 3, 2, 0, "naming_complex", "The complex of IO."], [70, 3, 2, 0, "old_files", "The old files."], [70, 3, 2, 0, "read_from_tarfile", "Whether read from tarfile."]], "qurry.qurrium.multimanager.process.multiprocess_exporter": [[70, 3, 2, 0, "exps_export", "The export of experiment."], [70, 3, 2, 0, "id_exec", "ID of experiment."]], "qurry.qurrium.multimanager.process.multiprocess_exporter_wrapper": [[70, 3, 2, 0, "all_arguments", "The arguments for exporter."]], "qurry.qurrium.multimanager.process.multiprocess_writer": [[70, 3, 2, 0, "export_transpiled_circuit", "Whether to export transpiled circuit."], [70, 3, 2, 0, "exps", "The export of experiment."], [70, 3, 2, 0, "id_exec", "ID of experiment."], [70, 3, 2, 0, "save_location", "The location of saving."]], "qurry.qurrium.multimanager.process.multiprocess_writer_wrapper": [[70, 3, 2, 0, "all_arguments", "The arguments for exporter."]], "qurry.qurrium.multimanager.utils": [[71, 1, 1, 0, "experiment_writer", "Write the experiment."], [71, 1, 1, 0, "multimanager_report_naming", "Naming the report in the quantity container."]], "qurry.qurrium.multimanager.utils.experiment_writer": [[71, 3, 2, 0, "beforewards", "The beforewards of the experiment."], [71, 3, 2, 0, "experiment_container", "The container of the experiment."], [71, 3, 2, 0, "export_transpiled_circuit", "Whether to export the transpiled circuit."], [71, 3, 2, 0, "multicommons", "The common parameters of the experiment."], [71, 3, 2, 0, "multiprocess", "Whether to use multiprocess."]], "qurry.qurrium.multimanager.utils.multimanager_report_naming": [[71, 3, 2, 0, "analysis_name", "The name of the analysis."], [71, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [71, 3, 2, 0, "quantities_container", "The container of the quantities."]], "qurry.qurrium.qurrium": [[72, 4, 1, 0, "QurriumPrototype", "Qurrium"]], "qurry.qurrium.qurrium.QurriumPrototype": [[72, 6, 1, 0, "accessor", "The accessor of extra backend. It will be None if no extra backend is loaded."], [72, 7, 1, 0, "add", "Add new wave function to measure."], [72, 7, 1, 0, "build", "Build the experiment."], [72, 5, 1, 0, "experiment_instance", "The instance of experiment."], [72, 6, 1, 0, "exps", "The wrapper of experiments container from orphan_exps and multimanagers."], [72, 7, 1, 0, "has", "Is there a wave with specific name."], [72, 7, 1, 0, "measure", "Execute the experiment."], [72, 7, 1, 0, "measure_to_output", "Trasnform measure() arguments form into output() form."], [72, 7, 1, 0, "multiAnalysis", "Run the analysis for multiple experiments."], [72, 7, 1, 0, "multiBuild", "Build the multimanager."], [72, 7, 1, 0, "multiOutput", "Output the multiple experiments."], [72, 7, 1, 0, "multiPending", "Pending the multiple experiments."], [72, 7, 1, 0, "multiRead", "Read the multimanager from the file."], [72, 7, 1, 0, "multiRetrieve", "Retrieve the multiple experiments."], [72, 7, 1, 0, "multiWrite", "Write the multimanager to the file."], [72, 6, 1, 0, "multimanagers", "The last multimanager be called."], [72, 6, 1, 0, "orphan_exps", "The orphan experiments container."], [72, 7, 1, 0, "output", "Output the experiment."], [72, 6, 1, 0, "passmanagers", "The collection of pass managers."], [72, 7, 1, 0, "remove", "Remove wave function from .waves."], [72, 6, 1, 0, "short_name", "The short name of Qurrium."], [72, 6, 1, 0, "waves", "The wave functions container."]], "qurry.qurrium.qurrium.QurriumPrototype.add": [[72, 3, 2, 0, "key", "Given a specific key to add to the wave function or circuit, if key == None, then generate a number as key. Defaults to None."], [72, 3, 2, 0, "replace", "If the key is already in the wave function or circuit, then replace the old wave function or circuit when True, or duplicate the wave function or circuit when 'duplicate'. Defaults to True."], [72, 3, 2, 0, "wave", "The wave functions or circuits want to measure."]], "qurry.qurrium.qurrium.QurriumPrototype.build": [[72, 3, 2, 0, "backend", "The quantum backend."], [72, 3, 2, 0, "circuits", "The circuits or keys of circuits in .waves."], [72, 3, 2, 0, "custom_and_main_kwargs", "Other custom arguments."], [72, 3, 2, 0, "exp_name", "The name of the experiment. Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [72, 3, 2, 0, "export", "Whether to export the experiment."], [72, 3, 2, 0, "passmanager", "The passmanager."], [72, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [72, 3, 2, 0, "qasm_version", "The export version of OpenQASM."], [72, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [72, 3, 2, 0, "save_location", "The location to save the experiment."], [72, 3, 2, 0, "shots", "Shots of the job."], [72, 3, 2, 0, "tags", "Given the experiment multiple tags to make a dictionary for recongnizing it."], [72, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."]], "qurry.qurrium.qurrium.QurriumPrototype.has": [[72, 3, 2, 0, "wavename", "Name of wave which is used in .waves"]], "qurry.qurrium.qurrium.QurriumPrototype.multiAnalysis": [[72, 3, 2, 0, "analysis_args", "Other arguments for analysis."], [72, 3, 2, 0, "analysis_name", "The name of analysis."], [72, 3, 2, 0, "multiprocess_write", "Whether use multiprocess for writing."], [72, 3, 2, 0, "no_serialize", "Whether to serialize the analysis."], [72, 3, 2, 0, "skip_write", "Whether to skip the file writing during the analysis."], [72, 3, 2, 0, "specific_analysis_args", "The specific arguments for analysis."], [72, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."]], "qurry.qurrium.qurrium.QurriumPrototype.multiRead": [[72, 3, 2, 0, "read_from_tarfile", "Whether to read from the tarfile. Defaults to False."], [72, 3, 2, 0, "reload", "Whether to reload the multimanager. Defaults to False."], [72, 3, 2, 0, "save_location", "Where to save the export content as json file. If save_location == None, then cancelled the file to be exported. Defaults to Path('./')."], [72, 3, 2, 0, "summoner_name", "Name for multimanager."]], "qurry.qurrium.qurrium.QurriumPrototype.multiRetrieve": [[72, 3, 2, 0, "backend", "The quantum backend."], [72, 3, 2, 0, "overwrite", "Whether to overwrite the retrieve."], [72, 3, 2, 0, "provider", "The provider."], [72, 3, 2, 0, "read_from_tarfile", "Whether to read from the tarfile."], [72, 3, 2, 0, "refresh", "Whether to refresh the retrieve."], [72, 3, 2, 0, "reload", "Whether to reload the multimanager."], [72, 3, 2, 0, "save_location", "Where to save the export content as json file. If save_location == None, then cancelled the file to be exported. Defaults to Path('./')."], [72, 3, 2, 0, "summoner_id", "Id for multimanager."], [72, 3, 2, 0, "summoner_name", "Name for multimanager."]], "qurry.qurrium.qurrium.QurriumPrototype.multiWrite": [[72, 3, 2, 0, "compress", "Whether to compress the export file. Defaults to False."], [72, 3, 2, 0, "compress_overwrite", "Whether to overwrite the compressed file. Defaults to False."], [72, 3, 2, 0, "export_transpiled_circuit", "Whether to export the transpiled circuit. Defaults to False."], [72, 3, 2, 0, "multiprocess_write", "Whether to use multiprocess to write the file."], [72, 3, 2, 0, "remain_only_compressed", "Whether to remain only compressed file. Defaults to False."], [72, 3, 2, 0, "save_location", "Where to save the export content as json file. If save_location == None, then cancelled the file to be exported. Defaults to Path('./')."], [72, 3, 2, 0, "skip_before_and_after", "Skip the beforewards and afterwards."], [72, 3, 2, 0, "skip_exps", "Skip the experiments."], [72, 3, 2, 0, "skip_quantities", "Skip the quantities container."], [72, 3, 2, 0, "summoner_id", "The summoner_id of multimanager."]], "qurry.qurrium.qurrium.QurriumPrototype.output": [[72, 3, 2, 0, "backend", "The quantum backend."], [72, 3, 2, 0, "circuits", "The circuits or keys of circuits in .waves. Defaults to None."], [72, 3, 2, 0, "custom_and_main_kwargs", "Other custom arguments."], [72, 3, 2, 0, "exp_id", "The ID of experiment."], [72, 3, 2, 0, "exp_name", "Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'experiment'."], [72, 3, 2, 0, "export", "Whether to export the experiment."], [72, 3, 2, 0, "passmanager", "The passmanager."], [72, 3, 2, 0, "pbar", "The progress bar for showing the progress of the experiment. Defaults to None."], [72, 3, 2, 0, "qasm_version", "The export version of OpenQASM."], [72, 3, 2, 0, "run_args", "Arguments for Backend.run()."], [72, 3, 2, 0, "save_location", "The location to save the experiment."], [72, 3, 2, 0, "shots", "Shots of the job."], [72, 3, 2, 0, "tags", "Given the experiment multiple tags to make a dictionary for recongnizing it. Defaults to None."], [72, 3, 2, 0, "transpile_args", "Arguments of transpile(). Defaults to None."]], "qurry.qurrium.qurrium.QurriumPrototype.remove": [[72, 3, 2, "qurry.qurrium.qurrium.QurriumPrototype.remove", "key", "Remove wave function from .waves."]], "qurry.qurrium.utils": [[73, 0, 0, 1, "build", ""], [74, 0, 0, 1, "chunk", ""], [75, 0, 0, 1, "construct", ""], [77, 0, 0, 1, "inputfixer", ""], [78, 0, 0, 1, "iocontrol", ""], [79, 0, 0, 1, "qasm", ""], [80, 0, 0, 1, "random_unitary", ""], [81, 0, 0, 1, "randomized", ""]], "qurry.qurrium.utils.build": [[73, 1, 1, 0, "passmanager_processor", "Process the passmanager for Qurrium."]], "qurry.qurrium.utils.build.passmanager_processor": [[73, 3, 2, 0, "passmanager", "The passmanager."], [73, 3, 2, 0, "passmanager_container", "The container of passmanager."]], "qurry.qurrium.utils.chunk": [[74, 1, 1, 0, "very_easy_chunk_distribution", "Distribute the chunk for multiprocess. The chunk distribution is based on the number of CPU cores."], [74, 1, 1, 0, "very_easy_chunk_size", "Calculate the chunk size for multiprocess."]], "qurry.qurrium.utils.chunk.very_easy_chunk_distribution": [[74, 3, 2, 0, "max_chunk_size", "The maximum chunk size."], [74, 3, 2, 0, "num_process", "The number of processes."], [74, 3, 2, 0, "respect_memory_array", "The array of respect memory. Each element is a tuple of (id, memory). The id is the ID of the experiment, and the memory is the memory usage. The array is sorted by the memory usage."]], "qurry.qurrium.utils.chunk.very_easy_chunk_size": [[74, 3, 2, 0, "max_chunk_size", "The maximum chunk size."], [74, 3, 2, 0, "num_process", "The number of processes."], [74, 3, 2, 0, "tasks_num", "The number of tasks."]], "qurry.qurrium.utils.construct": [[75, 1, 1, 0, "decomposer", "Decompose the circuit with giving times."], [75, 1, 1, 0, "get_counts_and_exceptions", "Get counts and exceptions from result."]], "qurry.qurrium.utils.construct.decomposer": [[75, 3, 2, 0, "qc", "The circuit wanted to be decomposed."], [75, 3, 2, 0, "reps", "Decide the times of decomposing the circuit. Draw quantum circuit with composed circuit."]], "qurry.qurrium.utils.construct.get_counts_and_exceptions": [[75, 3, 2, 0, "num", "The number of counts wanted to be extracted. Defaults to None."], [75, 3, 2, 0, "result", "The result of job."], [75, 3, 2, 0, "result_idx_list", "The index of counts wanted to be extracted. Defaults to None."]], "qurry.qurrium.utils.inputfixer": [[77, 1, 1, 0, "damerau_levenshtein_distance", "Calculate the Damerau-Levenshtein distance between sequences. This distance is the number of additions, deletions, substitutions,"], [77, 1, 1, 0, "damerau_levenshtein_distance_py", "Calculate the Damerau-Levenshtein distance between sequences."], [77, 1, 1, 0, "outfields_check", "Check if the outfields are in the infields but just typing wrong by Damerau-Levenshtein distance."], [77, 1, 1, 0, "outfields_hint", "Print the outfields that may be in the infields but typing wrong."]], "qurry.qurrium.utils.inputfixer.damerau_levenshtein_distance": [[77, 3, 2, 0, "seq1", "Sequence of items to be compared."], [77, 3, 2, 0, "seq2", "Sequence of items to be compared."]], "qurry.qurrium.utils.inputfixer.damerau_levenshtein_distance_py": [[77, 3, 2, 0, "seq1", "Sequence of items to be compared."], [77, 3, 2, 0, "seq2", "Sequence of items to be compared."]], "qurry.qurrium.utils.inputfixer.outfields_check": [[77, 3, 2, 0, "infields", "The infields of the experiment."], [77, 3, 2, 0, "outfields", "The outfields of the experiment."], [77, 3, 2, 0, "simialrity_threshold", "Similarity threshold."]], "qurry.qurrium.utils.inputfixer.outfields_hint": [[77, 3, 2, 0, "mute_outfields_warning", "Mute the warning of unrecognized arguments."], [77, 3, 2, 0, "outfields_maybe", "The outfields that may be in the infields but typing wrong."], [77, 3, 2, 0, "outfields_unknown", "The outfields that are not in the infields."]], "qurry.qurrium.utils.iocontrol": [[78, 4, 1, 0, "IOComplex", "The complex of IO control."], [78, 8, 1, 0, "RJUST_LEN", "The length of the string to be right-justified for serial number."], [78, 1, 1, 0, "naming", "The process of naming."], [78, 1, 1, 0, "serial_naming", "Create a serial name with right-justified index."]], "qurry.qurrium.utils.iocontrol.IOComplex": [[78, 6, 1, 0, "export_location", "Alias for field number 2"], [78, 6, 1, 0, "expsName", "Alias for field number 0"], [78, 6, 1, 0, "save_location", "Alias for field number 1"], [78, 6, 1, 0, "tarLocation", "Alias for field number 4"], [78, 6, 1, 0, "tarName", "Alias for field number 3"]], "qurry.qurrium.utils.iocontrol.IOComplex.__init__": [[78, 3, 2, "qurry.qurrium.utils.iocontrol.IOComplex", "export_location", "The complex of IO control."], [78, 3, 2, "qurry.qurrium.utils.iocontrol.IOComplex", "expsName", "The complex of IO control."], [78, 3, 2, "qurry.qurrium.utils.iocontrol.IOComplex", "save_location", "The complex of IO control."], [78, 3, 2, "qurry.qurrium.utils.iocontrol.IOComplex", "tarLocation", "The complex of IO control."], [78, 3, 2, "qurry.qurrium.utils.iocontrol.IOComplex", "tarName", "The complex of IO control."]], "qurry.qurrium.utils.iocontrol.naming": [[78, 3, 2, 0, "exps_name", "Naming this experiment to recognize it when the jobs are pending to IBMQ Service. This name is also used for creating a folder to store the exports. Defaults to 'exps'."], [78, 3, 2, 0, "index_rename", "The serial number."], [78, 3, 2, 0, "is_read", "Whether to read the experiment data. Defaults to False."], [78, 3, 2, 0, "rjust_len", "The length of the serial number."], [78, 3, 2, 0, "save_location", "Where to save the export data."], [78, 3, 2, 0, "without_serial", "Whether to use the serial number."]], "qurry.qurrium.utils.iocontrol.serial_naming": [[78, 3, 2, 0, "index_rename", "The index to be right-justified."], [78, 3, 2, 0, "name", "The base name."], [78, 3, 2, 0, "rjust_len", "The length of the right-justified string."]], "qurry.qurrium.utils.qasm": [[79, 1, 1, 0, "qasm_dumps", "Draw the circuits in OpenQASM string."], [79, 1, 1, 0, "qasm_loads", "Load the circuits from OpenQASM string."], [79, 1, 1, 0, "qasm_version_detect", "Detect the OpenQASM version from the string."]], "qurry.qurrium.utils.qasm.qasm_dumps": [[79, 3, 2, 0, "qasm_version", "The export version of OpenQASM."], [79, 3, 2, 0, "qc", "The circuit wanted to be drawn."]], "qurry.qurrium.utils.qasm.qasm_loads": [[79, 3, 2, 0, "qasm_str", "The OpenQASM string wanted to be loaded."], [79, 3, 2, 0, "qasm_version", "The export version of OpenQASM."]], "qurry.qurrium.utils.qasm.qasm_version_detect": [[79, 3, 2, 0, "qasm_str", "The OpenQASM string wanted to be detected."]], "qurry.qurrium.utils.random_unitary": [[80, 1, 1, 0, "check_and_generate_for_single_circ", "Check the input of generate_random_unitary_seeds()."], [80, 1, 1, 0, "check_input_for_experiment", "Check the input of the experiment. If you want to generate the seeds for all random unitary operator, you can use the function generate_random_unitary_seeds() in qurry.qurrium.utils.random_unitary."], [80, 1, 1, 0, "generate_random_unitary_seeds", "Generate random unitary seeds."], [80, 1, 1, 0, "generate_seeds_for_single_circ", "Generate the seed for single circuit."]], "qurry.qurrium.utils.random_unitary.check_and_generate_for_single_circ": [[80, 3, 2, 0, "num_qubits", "The number of qubits."], [80, 3, 2, 0, "seed_for_single_circ", "The seed for single circuit."]], "qurry.qurrium.utils.random_unitary.check_input_for_experiment": [[80, 3, 2, 0, "num_qubits", "The number of qubits."], [80, 3, 2, 0, "random_unitary_seeds", "The seeds for all random unitary operator. This argument only takes input as type of dict[int, dict[int, int]]. The first key is the index for the random unitary operator. The second key is the index for the qubit."], [80, 3, 2, 0, "times", "The number of random unitary operator."]], "qurry.qurrium.utils.random_unitary.generate_random_unitary_seeds": [[80, 3, 2, 0, "num_qubits", "The number of qubits."], [80, 3, 2, 0, "seed", "The seed of random generator."], [80, 3, 2, 0, "times", "The number of random unitary operator."]], "qurry.qurrium.utils.random_unitary.generate_seeds_for_single_circ": [[80, 3, 2, 0, "num_qubits", "The number of qubits."], [80, 3, 2, 0, "seed_for_single_circ", "The seed for single circuit."]], "qurry.qurrium.utils.randomized": [[81, 8, 1, 0, "RXmatrix", "Pauli-X matrix"], [81, 8, 1, 0, "RYmatrix", "Pauli-Y matrix"], [81, 8, 1, 0, "RZmatrix", "Pauli-Z matrix"], [81, 1, 1, 0, "density_matrix_to_bloch", "Convert a density matrix to a Bloch vector."], [81, 1, 1, 0, "local_random_unitary_operators", "Transform a list of unitary operators in Operator into a list of unitary operators in list[list[complex]]."], [81, 1, 1, 0, "local_random_unitary_pauli_coeff", "Transform a list of unitary operators in ndarray into a list of pauli coefficients."], [81, 1, 1, 0, "local_unitary_op_to_list", "Transform a dictionary of local unitary operators in Operator with the qubit index as key to a dictionary of unitary operators in list[list[complex]]."], [81, 1, 1, 0, "local_unitary_op_to_pauli_coeff", "Transform a dictionary of local unitary operators in list[list[complex]] with the qubit index as key to a dictionary of pauli coefficients."], [81, 1, 1, 0, "qubit_operator_to_pauli_coeff", "Convert a random unitary operator matrix to a Bloch vector."]], "qurry.qurrium.utils.randomized.density_matrix_to_bloch": [[81, 3, 2, "qurry.qurrium.utils.randomized.density_matrix_to_bloch", "rho", "Convert a density matrix to a Bloch vector."]], "qurry.qurrium.utils.randomized.local_random_unitary_operators": [[81, 3, 2, 0, "unitary_loc", "The location of unitary operator."], [81, 3, 2, 0, "unitary_op_list", "The list of unitary operators."]], "qurry.qurrium.utils.randomized.local_random_unitary_pauli_coeff": [[81, 3, 2, 0, "unitary_loc", "The location of unitary operator."], [81, 3, 2, 0, "unitary_op_dict", "The list of unitary operators or dictionary of unitary operators."]], "qurry.qurrium.utils.randomized.local_unitary_op_to_list": [[81, 3, 2, 0, "single_unitary_op_dict", "The dictionary of unitary operators."]], "qurry.qurrium.utils.randomized.local_unitary_op_to_pauli_coeff": [[81, 3, 2, "qurry.qurrium.utils.randomized.local_unitary_op_to_pauli_coeff", "single_unitary_op_list_dict", "Transform a dictionary of local unitary operators in list[list[complex]] with the qubit index as key to a dictionary of pauli coefficients."]], "qurry.qurrium.utils.randomized.qubit_operator_to_pauli_coeff": [[81, 3, 2, "qurry.qurrium.utils.randomized.qubit_operator_to_pauli_coeff", "rho", "Convert a random unitary operator matrix to a Bloch vector."]], "qurry.recipe": [[82, 0, 0, 1, "n_body", ""], [83, 0, 0, 1, "simple", ""]], "qurry.recipe.n_body": [[82, 4, 1, 0, "OneBody", "The product state circuit one_body. This is an abstract class."], [82, 4, 1, 0, "TwoBody", "The entangled circuit two_body. This is an abstract class."]], "qurry.recipe.n_body.OneBody": [[82, 5, 1, 0, "num_qubits", "The number of qubits."]], "qurry.recipe.n_body.OneBody.__init__": [[82, 3, 2, "qurry.recipe.n_body.OneBody", "name", "The product state circuit one_body. This is an abstract class."], [82, 3, 2, "qurry.recipe.n_body.OneBody", "regs", "The product state circuit one_body. This is an abstract class."]], "qurry.recipe.n_body.TwoBody": [[82, 5, 1, 0, "num_qubits", "The number of qubits."]], "qurry.recipe.n_body.TwoBody.__init__": [[82, 3, 2, "qurry.recipe.n_body.TwoBody", "name", "The entangled circuit two_body. This is an abstract class."], [82, 3, 2, "qurry.recipe.n_body.TwoBody", "regs", "The entangled circuit two_body. This is an abstract class."]], "qurry.recipe.simple": [[83, 0, 0, 1, "cat", ""], [83, 0, 0, 1, "intracell", ""], [83, 0, 0, 1, "paramagnet", ""]], "qurry.recipe.simple.cat": [[83, 4, 1, 0, "Cat", "Cat, the anthor name of entangled circuit GHZ."], [83, 4, 1, 0, "GHZ", "The entangled circuit GHZ."]], "qurry.recipe.simple.cat.Cat.__init__": [[83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "The number of qubits for constructing the example circuit."]], "qurry.recipe.simple.cat.GHZ.__init__": [[83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "The number of qubits for constructing the example circuit."]], "qurry.recipe.simple.intracell": [[83, 4, 1, 0, "Intracell", "The entangled circuit Intracell."], [83, 4, 1, 0, "Singlet", "Singlet, the entangled circuit Intracell with singlet state."]], "qurry.recipe.simple.intracell.Intracell": [[83, 5, 1, 0, "state", "The state of the circuit."]], "qurry.recipe.simple.intracell.Intracell.__init__": [[83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "Number of qubits."], [83, 3, 2, 0, "state", "Choosing the state."]], "qurry.recipe.simple.intracell.Singlet.__init__": [[83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "Number of qubits."]], "qurry.recipe.simple.paramagnet": [[83, 4, 1, 0, "Cluster", "Cluster, another name of the entangled circuit TopologicalParamagnet."], [83, 4, 1, 0, "TopologicalParamagnet", "The entangled circuit TopologicalParamagnet."], [83, 4, 1, 0, "TrivialParamagnet", "The product state circuit TrivialParamagnet."]], "qurry.recipe.simple.paramagnet.Cluster.__init__": [[83, 3, 2, 0, "border_cond", "Boundary condition is open or period. Defaults to \"period\"."], [83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "Number of qubits."]], "qurry.recipe.simple.paramagnet.TopologicalParamagnet": [[83, 5, 1, 0, "border_cond", "The border condition."]], "qurry.recipe.simple.paramagnet.TopologicalParamagnet.__init__": [[83, 3, 2, 0, "border_cond", "Boundary condition is open or period. Defaults to \"period\"."], [83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "Number of qubits."]], "qurry.recipe.simple.paramagnet.TrivialParamagnet.__init__": [[83, 3, 2, 0, "name", "Name of case."], [83, 3, 2, 0, "num_qubits", "Number of qubits."]], "qurry.tools": [[85, 0, 0, 1, "backend", ""], [86, 0, 0, 1, "command", ""], [87, 0, 0, 1, "datetime", ""], [88, 0, 0, 1, "except_decorator", ""], [89, 0, 0, 1, "parallelmanager", ""], [90, 0, 0, 1, "progressbar", ""], [91, 0, 0, 1, "qiskit_version", ""]], "qurry.tools.backend": [[85, 0, 0, 1, "backend_manager", ""], [85, 0, 0, 1, "env_check", ""], [85, 0, 0, 1, "import_fake", ""], [85, 0, 0, 1, "import_simulator", ""], [85, 0, 0, 1, "utils", ""]], "qurry.tools.backend.backend_manager": [[85, 8, 1, 0, "BackendCallSignDict", "The dictionary of backend callsign."], [85, 8, 1, 0, "BackendDict", "The dictionary of backends."], [85, 4, 1, 0, "BackendWrapper", "A wrapper for Backend to provide more convenient way to use."], [85, 1, 1, 0, "random", ""]], "qurry.tools.backend.backend_manager.BackendWrapper": [[85, 7, 1, 0, "add_backend", "Add a backend to backend wrapper."], [85, 5, 1, 0, "available_aer", "The available aer backends."], [85, 5, 1, 0, "available_aer_callsign", "The available aer backends callsign."], [85, 5, 1, 0, "available_backends", "The available backends."], [85, 5, 1, 0, "available_backends_callsign", "The available backends callsign."], [85, 5, 1, 0, "available_fake", "The available fake backends."], [85, 5, 1, 0, "available_fake_callsign", "The available fake backends callsign."], [85, 5, 1, 0, "available_ibmq", "The available ibmq/ibm backends."], [85, 5, 1, 0, "available_ibmq_callsign", "The available ibmq/ibm backends callsign."], [85, 7, 1, 0, "make_callsign", "Make a callsign for backend."], [85, 7, 1, 0, "statesheet", "The statesheet of backend wrapper."]], "qurry.tools.backend.backend_manager.BackendWrapper.add_backend": [[85, 3, 2, 0, "backend", "The backend."], [85, 3, 2, 0, "callsign", "The callsign of backend."], [85, 3, 2, 0, "name", "The name of backend."]], "qurry.tools.backend.backend_manager.BackendWrapper.make_callsign": [[85, 3, 2, 0, "sign", "The callsign."], [85, 3, 2, 0, "who", "The backend."]], "qurry.tools.backend.env_check": [[85, 1, 1, 0, "version_check", "Version check to remind user to update qiskit if needed."]], "qurry.tools.backend.import_fake": [[85, 8, 1, 0, "LUCKY_MSG", "A warning message for the fake backend not available."], [85, 8, 1, 0, "QISKIT_IBM_RUNTIME_ISSUE_1318", "Qiskit IBM Runtime Issue 1318"], [85, 1, 1, 0, "fack_backend_loader", "Load the fake backend."], [85, 1, 1, 0, "get_default_fake_provider", "Get the default fake provider."]], "qurry.tools.backend.import_simulator": [[85, 4, 1, 0, "GeneralBackend", "The abstract class of default simulator."], [85, 4, 1, 0, "GeneralSimulator", "Default simulator."], [85, 1, 1, 0, "get_default_sim_source", "Get the default source for the simulator."]], "qurry.tools.backend.import_simulator.GeneralBackend.__init__": [[85, 3, 2, "qurry.tools.backend.import_simulator.GeneralBackend", "backend_options", "The abstract class of default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralBackend", "configuration", "The abstract class of default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralBackend", "properties", "The abstract class of default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralBackend", "provider", "The abstract class of default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralBackend", "target", "The abstract class of default simulator."]], "qurry.tools.backend.import_simulator.GeneralSimulator.__init__": [[85, 3, 2, "qurry.tools.backend.import_simulator.GeneralSimulator", "backend_options", "Default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralSimulator", "configuration", "Default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralSimulator", "properties", "Default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralSimulator", "provider", "Default simulator."], [85, 3, 2, "qurry.tools.backend.import_simulator.GeneralSimulator", "target", "Default simulator."]], "qurry.tools.backend.utils": [[85, 1, 1, 0, "backendName", "Get the name of backend."], [85, 1, 1, 0, "backend_name_getter", "Get the name of backend."], [85, 1, 1, 0, "shorten_name", "Shorten the name of backend."]], "qurry.tools.backend.utils.backendName": [[85, 3, 2, 0, "back", "The backend instance."]], "qurry.tools.backend.utils.backend_name_getter": [[85, 3, 2, 0, "back", "The backend instance."]], "qurry.tools.backend.utils.shorten_name": [[85, 3, 2, 0, "drop", "The strings to drop from the name."], [85, 3, 2, 0, "exclude", "The strings to exclude from the name."], [85, 3, 2, 0, "name", "The name of backend."]], "qurry.tools.command": [[86, 1, 1, 0, "cmd_wrapper", "Use command in anywhere, no matter it's in .ipynb or '.py'."], [86, 1, 1, 0, "fun_platform_check", "Check platform information."], [86, 1, 1, 0, "pytorch_cuda_check", "Via pytorch to check the availability of Nvidia CUDA."]], "qurry.tools.command.cmd_wrapper": [[86, 3, 2, 0, "cmd", "Which execute command in any python or jupyter environment."]], "qurry.tools.datetime": [[87, 4, 1, 0, "DatetimeDict", "A dictionary that records the time when a key is added."], [87, 1, 1, 0, "current_time", "Returns the current time in the format of YYYY-MM-DD HH:MM:SS."]], "qurry.tools.datetime.DatetimeDict": [[87, 7, 1, 0, "add_only", "Adds a key with the current time no matter the key does not exist."], [87, 7, 1, 0, "add_serial", "Adds a key with the current time and a serial number if the key exists."], [87, 7, 1, 0, "last_events", "Returns the last event and its time."], [87, 7, 1, 0, "loads", "Loads a dictionary of datetimes."]], "qurry.tools.datetime.DatetimeDict.add_only": [[87, 3, 2, 0, "eventname", "The name of the event."]], "qurry.tools.datetime.DatetimeDict.add_serial": [[87, 3, 2, 0, "eventname", "The name of the event."]], "qurry.tools.datetime.DatetimeDict.last_events": [[87, 3, 2, 0, "number", "The number of the last event."]], "qurry.tools.datetime.DatetimeDict.loads": [[87, 3, 2, 0, "datetimes", "A dictionary of datetimes."]], "qurry.tools.except_decorator": [[88, 1, 1, 0, "unproven_feature", "The decorator to mark a function or class as an unproven feature."]], "qurry.tools.except_decorator.unproven_feature": [[88, 3, 2, 0, "message", "The warning message to be displayed. If not provided, a default message will be used. The default message is:"]], "qurry.tools.parallelmanager": [[89, 8, 1, 0, "CPU_COUNT", "The number of CPUs available for multiprocessing. This number is guaranteed to be at least 1."], [89, 8, 1, 0, "CPU_COUNT_UNSAFE", "The number of CPUs available for multiprocessing. But this number may be None in some cases."], [89, 8, 1, 0, "DEFAULT_POOL_SIZE", "The default number of workers for multiprocessing. This number is guaranteed to be at least 1."], [89, 4, 1, 0, "ParallelManager", "Process manager for multiprocessing."], [89, 1, 1, 0, "workers_distribution", "Distribute the workers number."]], "qurry.tools.parallelmanager.ParallelManager": [[89, 7, 1, 0, "map", "This function is a wrapper for map from multiprocessing."], [89, 7, 1, 0, "process_map", "Call process_map from tqdm. This function is a wrapper for process_map from tqdm. But, it won't use pool_kwargs for they are different implementations with multiprocessing.Pool in this class."], [89, 7, 1, 0, "starmap", "This function is a wrapper for starmap from multiprocessing."]], "qurry.tools.parallelmanager.ParallelManager.__init__": [[89, 3, 2, "qurry.tools.parallelmanager.ParallelManager", "bar_ascii", "Process manager for multiprocessing."], [89, 3, 2, "qurry.tools.parallelmanager.ParallelManager", "bar_format", "Process manager for multiprocessing."], [89, 3, 2, "qurry.tools.parallelmanager.ParallelManager", "pool_kwargs", "Process manager for multiprocessing."], [89, 3, 2, "qurry.tools.parallelmanager.ParallelManager", "workers_num", "Process manager for multiprocessing."]], "qurry.tools.parallelmanager.ParallelManager.map": [[89, 3, 2, 0, "arg_list", "Arguments to be mapped."], [89, 3, 2, 0, "func", "Function to be mapped."], [89, 3, 2, 0, "start_method", "Start method for multiprocessing."]], "qurry.tools.parallelmanager.ParallelManager.process_map": [[89, 3, 2, "qurry.tools.parallelmanager.ParallelManager.process_map", "args_list", "Call process_map from tqdm. This function is a wrapper for process_map from tqdm. But, it won't use pool_kwargs for they are different implementations with multiprocessing.Pool in this class."], [89, 3, 2, 0, "bar_ascii", "Progress bar ascii."], [89, 3, 2, 0, "bar_format", "Progress bar format."], [89, 3, 2, 0, "func", "Function to be mapped."], [89, 3, 2, 0, "kwargs", "Other arguments."]], "qurry.tools.parallelmanager.ParallelManager.starmap": [[89, 3, 2, 0, "args_list", "Arguments to be mapped."], [89, 3, 2, 0, "func", "Function to be mapped."], [89, 3, 2, 0, "start_method", "Start method for multiprocessing."]], "qurry.tools.parallelmanager.workers_distribution": [[89, 3, 2, 0, "default", "Default workers number."], [89, 3, 2, 0, "workers_num", "Desired workers number."]], "qurry.tools.progressbar": [[90, 8, 1, 0, "DEFAULT_BAR_FORMAT", "Default bar format for progress bar."], [90, 8, 1, 0, "PROGRESSBAR_ASCII", "Default ASCII characters for progress bar."], [90, 1, 1, 0, "default_setup", "Get the default setup for progress bar."], [90, 1, 1, 0, "qurry_progressbar", "A progress bar for Qurry."], [90, 1, 1, 0, "set_pbar_description", "Set the description of the progress bar."], [90, 4, 1, 0, "tqdm", "A fake tqdm class for type hint."]], "qurry.tools.progressbar.default_setup": [[90, 3, 2, "qurry.tools.progressbar.default_setup", "bar_ascii", "Get the default setup for progress bar."], [90, 3, 2, 0, "bar_format", "The format of the bar."]], "qurry.tools.progressbar.qurry_progressbar": [[90, 3, 2, "qurry.tools.progressbar.qurry_progressbar", "args", "A progress bar for Qurry."], [90, 3, 2, 0, "bar_ascii", "The ascii of the bar."], [90, 3, 2, 0, "bar_format", "The format of the bar."], [90, 3, 2, 0, "iterable", "The iterable object."], [90, 3, 2, "qurry.tools.progressbar.qurry_progressbar", "kwargs", "A progress bar for Qurry."]], "qurry.tools.progressbar.set_pbar_description": [[90, 3, 2, 0, "description", "The description."], [90, 3, 2, 0, "pbar", "The progress bar."]], "qurry.tools.progressbar.tqdm.__init__": [[90, 3, 2, "qurry.tools.progressbar.tqdm", "_", "A fake tqdm class for type hint."], [90, 3, 2, "qurry.tools.progressbar.tqdm", "__", "A fake tqdm class for type hint."]], "qurry.tools.qiskit_version": [[91, 8, 1, 0, "KNOWN_CORE_PACKAGE", "A dictionary of known core packages in Qiskit."], [91, 8, 1, 0, "QISKIT_VERSION", "A mapping of package names to their versions in Qiskit. This is an instance of QiskitVersion. It contains the versions of the main, deprecated, and into-community packages of Qiskit."], [91, 4, 1, 0, "QiskitVersion", "Get the version of qiskit and its packages."], [91, 1, 1, 0, "qiskit_version_statesheet", "Get the version of qiskit and its packages as a statesheet."], [91, 1, 1, 0, "qiskit_version_v0_check", "Check the version of qiskit and its packages."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "exception", "Python exception"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "class", "Python class"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "method", "Python method"], "8": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:exception", "3": "py:parameter", "4": "py:class", "5": "py:property", "6": "py:attribute", "7": "py:method", "8": "py:data"}, "terms": {"": [1, 2, 4, 8, 11, 13, 16, 22, 26, 27, 28, 33, 35, 37, 44, 45, 47, 57, 59, 60, 61, 62, 77, 86, 90, 94, 99, 101, 103, 104, 105, 108, 109, 110, 111, 112, 113], "0": [1, 2, 8, 9, 13, 14, 15, 18, 19, 20, 22, 24, 27, 31, 33, 35, 36, 37, 39, 40, 41, 42, 45, 65, 78, 80, 81, 85, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122], "00": [13, 16, 37, 103, 113, 114, 115, 116, 117, 118, 119, 120, 121], "0000": 113, "000000": 113, "00000000": 113, "0000000000": 113, "000000000000": 113, "000000000001": 113, "000000000010": 113, "000000000011": 113, "0000000001": 113, "000000000100": 113, "000000000101": 113, "000000000110": 113, "000000000111": 113, "0000000010": 113, "000000001000": 113, "000000001001": 113, "000000001010": 113, "0000000011": 113, "000000001100": 113, "000000001101": 113, "000000001111": 113, "00000001": 113, "0000000100": 113, "000000010000": 113, "000000010001": 113, "000000010010": 113, "000000010011": 113, "0000000101": 113, "000000010100": 113, "000000010101": 113, "000000010110": 113, "000000010111": 113, "0000000110": 113, "000000011000": 113, "000000011001": 113, "000000011010": 113, "000000011011": 113, "0000000111": 113, "000000011100": 113, "000000011101": 113, "000000011111": 113, "00000010": 113, "0000001000": 113, "000000100000": 113, "000000100001": 113, "000000100010": 113, "000000100011": 113, "0000001001": 113, "000000100100": 113, "000000100101": 113, "000000100110": 113, "000000100111": 113, "0000001010": 113, "000000101000": 113, "000000101001": 113, "000000101010": 113, "000000101011": 113, "0000001011": 113, "000000101100": 113, "000000101101": 113, "000000101110": 113, "000000101111": 113, "00000011": 113, "0000001100": 113, "000000110000": 113, "000000110001": 113, "000000110010": 113, "000000110011": 113, "0000001101": 113, "000000110100": 113, "000000110101": 113, "000000110110": 113, "000000110111": 113, "0000001110": 113, "000000111000": 113, "000000111001": 113, "000000111010": 113, "000000111011": 113, "0000001111": 113, "000000111100": 113, "000000111101": 113, "000000111110": 113, "000000111111": 113, "000001": 113, "00000100": 113, "0000010000": 113, "000001000000": 113, "000001000001": 113, "000001000010": 113, "000001000011": 113, "0000010001": 113, "000001000100": 113, "000001000101": 113, "000001000110": 113, "000001000111": 113, "0000010010": 113, "000001001000": 113, "000001001001": 113, "000001001010": 113, "0000010011": 113, "000001001100": 113, "000001001101": 113, "000001001110": 113, "000001001111": 113, "00000101": 113, "0000010100": 113, "000001010000": 113, "000001010001": 113, "000001010010": 113, "000001010011": 113, "0000010101": 113, "000001010100": 113, "000001010101": 113, "000001010110": 113, "000001010111": 113, "0000010110": 113, "000001011000": 113, "000001011001": 113, "000001011010": 113, "000001011011": 113, "0000010111": 113, "000001011100": 113, "000001011101": 113, "000001011110": 113, "000001011111": 113, "00000110": 113, "0000011000": 113, "000001100000": 113, "000001100001": 113, "000001100010": 113, "000001100011": 113, "0000011001": 113, "000001100100": 113, "000001100101": 113, "000001100110": 113, "000001100111": 113, "0000011010": 113, "000001101001": 113, "000001101010": 113, "000001101011": 113, "0000011011": 113, "000001101100": 113, "000001101101": 113, "00000111": 113, "0000011100": 113, "000001110000": 113, "000001110001": 113, "000001110010": 113, "0000011101": 113, "000001110100": 113, "000001110101": 113, "000001110110": 113, "000001110111": 113, "0000011110": 113, "000001111000": 113, "000001111001": 113, "000001111010": 113, "000001111011": 113, "0000011111": 113, "000001111100": 113, "000001111101": 113, "000001111110": 113, "000001111111": 113, "000010": 113, "00001000": 113, "0000100000": 113, "000010000000": 113, "000010000001": 113, "000010000010": 113, "000010000011": 113, "0000100001": 113, "000010000100": 113, "000010000101": 113, "000010000110": 113, "000010000111": 113, "0000100010": 113, "000010001001": 113, "000010001010": 113, "0000100011": 113, "000010001100": 113, "000010001101": 113, "000010001110": 113, "000010001111": 113, "00001001": 113, "0000100100": 113, "000010010000": 113, "000010010001": 113, "000010010010": 113, "000010010011": 113, "0000100101": 113, "000010010100": 113, "000010010101": 113, "000010010110": 113, "000010010111": 113, "0000100110": 113, "000010011000": 113, "000010011001": 113, "000010011010": 113, "000010011011": 113, "0000100111": 113, "000010011100": 113, "000010011101": 113, "000010011110": 113, "000010011111": 113, "00001010": 113, "0000101000": 113, "000010100000": 113, "000010100001": 113, "000010100010": 113, "000010100011": 113, "0000101001": 113, "000010100101": 113, "000010100110": 113, "000010100111": 113, "0000101010": 113, "000010101001": 113, "000010101010": 113, "000010101011": 113, "0000101011": 113, "000010101100": 113, "000010101101": 113, "000010101110": 113, "00001011": 113, "0000101100": 113, "000010110000": 113, "000010110010": 113, "000010110011": 113, "0000101101": 113, "000010110100": 113, "000010110101": 113, "000010110110": 113, "0000101110": 113, "000010111000": 113, "000010111001": 113, "000010111010": 113, "000010111011": 113, "0000101111": 113, "000010111100": 113, "000010111101": 113, "000010111110": 113, "000010111111": 113, "000011": 113, "00001100": 113, "0000110000": 113, "000011000000": 113, "000011000001": 113, "000011000010": 113, "000011000011": 113, "0000110001": 113, "000011000100": 113, "000011000101": 113, "000011000110": 113, "000011000111": 113, "0000110010": 113, "000011001000": 113, "000011001001": 113, "000011001010": 113, "000011001011": 113, "0000110011": 113, "000011001100": 113, "000011001101": 113, "000011001110": 113, "000011001111": 113, "00001101": 113, "0000110100": 113, "000011010000": 113, "000011010010": 113, "000011010011": 113, "0000110101": 113, "000011010100": 113, "000011010101": 113, "000011010110": 113, "000011010111": 113, "0000110110": 113, "000011011000": 113, "000011011001": 113, "000011011010": 113, "0000110111": 113, "000011011100": 113, "000011011101": 113, "000011011110": 113, "000011011111": 113, "00001110": 113, "0000111000": 113, "000011100001": 113, "000011100010": 113, "000011100011": 113, "0000111001": 113, "000011100100": 113, "000011100110": 113, "000011100111": 113, "0000111010": 113, "000011101000": 113, "000011101001": 113, "000011101010": 113, "000011101011": 113, "0000111011": 113, "000011101100": 113, "000011101101": 113, "000011101110": 113, "000011101111": 113, "00001111": 113, "0000111100": 113, "000011110000": 113, "000011110001": 113, "000011110010": 113, "000011110011": 113, "0000111101": 113, "000011110100": 113, "000011110101": 113, "000011110110": 113, "0000111110": 113, "000011111000": 113, "000011111001": 113, "000011111010": 113, "0000111111": 113, "000011111100": 113, "000011111101": 113, "000011111110": 113, "000011111111": 113, "0001": [35, 37, 39, 113], "000100": 113, "00010000": 113, "0001000000": 113, "000100000000": 113, "000100000001": 113, "000100000010": 113, "000100000011": 113, "0001000001": 113, "000100000100": 113, "000100000101": 113, "000100000110": 113, "000100000111": 113, "0001000010": 113, "000100001000": 113, "000100001001": 113, "000100001010": 113, "000100001011": 113, "0001000011": 113, "000100001100": 113, "000100001101": 113, "000100001110": 113, "00010001": 113, "0001000100": 113, "000100010000": 113, "000100010001": 113, "000100010010": 113, "000100010011": 113, "0001000101": 113, "000100010100": 113, "000100010101": 113, "000100010110": 113, "000100010111": 113, "0001000110": 113, "000100011000": 113, "000100011001": 113, "000100011010": 113, "000100011011": 113, "0001000111": 113, "000100011100": 113, "000100011101": 113, "000100011110": 113, "000100011111": 113, "00010010": 113, "0001001000": 113, "000100100000": 113, "000100100001": 113, "000100100010": 113, "000100100011": 113, "0001001001": 113, "000100100100": 113, "000100100101": 113, "000100100110": 113, "000100100111": 113, "0001001010": 113, "000100101000": 113, "000100101001": 113, "000100101010": 113, "000100101011": 113, "0001001011": 113, "000100101100": 113, "000100101101": 113, "000100101110": 113, "000100101111": 113, "00010011": 113, "0001001100": 113, "000100110000": 113, "000100110001": 113, "000100110010": 113, "000100110011": 113, "0001001101": 113, "000100110100": 113, "000100110101": 113, "000100110110": 113, "000100110111": 113, "0001001110": 113, "000100111000": 113, "000100111001": 113, "000100111011": 113, "0001001111": 113, "000100111100": 113, "000100111101": 113, "000100111110": 113, "000100111111": 113, "000101": 113, "00010100": 113, "0001010000": 113, "000101000000": 113, "000101000001": 113, "000101000010": 113, "000101000011": 113, "0001010001": 113, "000101000100": 113, "000101000101": 113, "000101000110": 113, "000101000111": 113, "0001010010": 113, "000101001000": 113, "000101001001": 113, "000101001010": 113, "000101001011": 113, "0001010011": 113, "000101001101": 113, "000101001111": 113, "00010101": 113, "0001010100": 113, "000101010000": 113, "000101010001": 113, "000101010010": 113, "000101010011": 113, "0001010101": 113, "000101010101": 113, "000101010110": 113, "000101010111": 113, "0001010110": 113, "000101011000": 113, "000101011001": 113, "000101011010": 113, "000101011011": 113, "0001010111": 113, "000101011101": 113, "000101011110": 113, "000101011111": 113, "00010110": 113, "0001011000": 113, "000101100000": 113, "000101100001": 113, "000101100010": 113, "000101100011": 113, "0001011001": 113, "000101100100": 113, "000101100101": 113, "000101100110": 113, "000101100111": 113, "0001011010": 113, "000101101000": 113, "000101101001": 113, "000101101010": 113, "000101101011": 113, "0001011011": 113, "000101101100": 113, "000101101101": 113, "000101101110": 113, "000101101111": 113, "00010111": 113, "0001011100": 113, "000101110001": 113, "000101110010": 113, "000101110011": 113, "0001011101": 113, "000101110100": 113, "000101110101": 113, "000101110110": 113, "0001011110": 113, "000101111000": 113, "000101111001": 113, "000101111010": 113, "000101111011": 113, "0001011111": 113, "000101111100": 113, "000101111101": 113, "000101111110": 113, "000101111111": 113, "000110": 113, "00011000": 113, "0001100000": 113, "000110000000": 113, "000110000001": 113, "000110000010": 113, "000110000011": 113, "0001100001": 113, "000110000100": 113, "000110000101": 113, "000110000110": 113, "000110000111": 113, "0001100010": 113, "000110001000": 113, "000110001001": 113, "000110001010": 113, "000110001011": 113, "0001100011": 113, "000110001100": 113, "000110001101": 113, "000110001110": 113, "000110001111": 113, "00011001": 113, "0001100100": 113, "000110010000": 113, "000110010001": 113, "000110010010": 113, "000110010011": 113, "0001100101": 113, "000110010100": 113, "000110010101": 113, "000110010110": 113, "000110010111": 113, "0001100110": 113, "000110011000": 113, "000110011001": 113, "000110011010": 113, "000110011011": 113, "0001100111": 113, "000110011100": 113, "000110011101": 113, "000110011110": 113, "000110011111": 113, "00011010": 113, "0001101000": 113, "000110100000": 113, "000110100001": 113, "000110100010": 113, "000110100011": 113, "0001101001": 113, "000110100100": 113, "000110100101": 113, "000110100110": 113, "000110100111": 113, "0001101010": 113, "000110101000": 113, "000110101001": 113, "000110101010": 113, "000110101011": 113, "0001101011": 113, "000110101101": 113, "000110101111": 113, "00011011": 113, "0001101100": 113, "000110110000": 113, "000110110001": 113, "000110110010": 113, "000110110011": 113, "0001101101": 113, "000110110100": 113, "000110110101": 113, "000110110110": 113, "000110110111": 113, "0001101110": 113, "000110111000": 113, "000110111001": 113, "000110111010": 113, "000110111011": 113, "0001101111": 113, "000110111100": 113, "000110111101": 113, "000110111110": 113, "000110111111": 113, "000111": 113, "00011100": 113, "0001110000": 113, "000111000000": 113, "000111000001": 113, "000111000010": 113, "0001110001": 113, "000111000100": 113, "000111000101": 113, "000111000110": 113, "000111000111": 113, "0001110010": 113, "000111001000": 113, "000111001001": 113, "000111001011": 113, "0001110011": 113, "000111001100": 113, "000111001101": 113, "000111001110": 113, "000111001111": 113, "00011101": 113, "0001110100": 113, "000111010000": 113, "000111010001": 113, "000111010010": 113, "000111010011": 113, "0001110101": 113, "000111010100": 113, "000111010101": 113, "000111010110": 113, "000111010111": 113, "0001110110": 113, "000111011000": 113, "000111011001": 113, "000111011011": 113, "0001110111": 113, "000111011100": 113, "000111011101": 113, "000111011110": 113, "000111011111": 113, "00011110": 113, "0001111000": 113, "000111100000": 113, "000111100001": 113, "000111100010": 113, "000111100011": 113, "0001111001": 113, "000111100100": 113, "000111100101": 113, "000111100110": 113, "000111100111": 113, "0001111010": 113, "000111101000": 113, "000111101001": 113, "000111101010": 113, "000111101011": 113, "0001111011": 113, "000111101100": 113, "000111101101": 113, "000111101110": 113, "000111101111": 113, "00011111": 113, "0001111100": 113, "000111110000": 113, "000111110001": 113, "000111110010": 113, "000111110011": 113, "0001111101": 113, "000111110100": 113, "000111110101": 113, "000111110110": 113, "000111110111": 113, "0001111110": 113, "000111111000": 113, "000111111001": 113, "000111111011": 113, "0001111111": 113, "000111111100": 113, "000111111101": 113, "000111111110": 113, "000111111111": 113, "000206543": 96, "00024902j": 112, "000317681": 96, "000413781": 95, "000483908": 96, "000551678": 111, "000609406": 111, "000709586": 118, "000878656": 118, "000929299": 116, "00098145j": 112, "001": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "0010": 113, "001000": 113, "00100000": 113, "0010000000": 113, "001000000001": 113, "001000000010": 113, "001000000011": 113, "0010000001": 113, "001000000100": 113, "001000000101": 113, "001000000110": 113, "001000000111": 113, "0010000010": 113, "001000001000": 113, "001000001001": 113, "0010000011": 113, "001000001100": 113, "001000001101": 113, "001000001111": 113, "00100001": 113, "0010000100": 113, "001000010001": 113, "001000010011": 113, "0010000101": 113, "001000010100": 113, "001000010101": 113, "001000010110": 113, "001000010111": 113, "0010000110": 113, "001000011000": 113, "001000011001": 113, "001000011010": 113, "0010000111": 113, "001000011100": 113, "001000011101": 113, "001000011110": 113, "001000011111": 113, "00100010": 113, "0010001000": 113, "001000100000": 113, "001000100001": 113, "001000100010": 113, "0010001001": 113, "001000100100": 113, "001000100101": 113, "001000100110": 113, "001000100111": 113, "0010001010": 113, "001000101000": 113, "001000101001": 113, "001000101010": 113, "001000101011": 113, "0010001011": 113, "001000101100": 113, "001000101101": 113, "001000101110": 113, "001000101111": 113, "00100011": 113, "0010001100": 113, "001000110000": 113, "001000110001": 113, "001000110010": 113, "001000110011": 113, "0010001101": 113, "001000110100": 113, "001000110101": 113, "001000110110": 113, "001000110111": 113, "0010001110": 113, "001000111000": 113, "001000111001": 113, "001000111011": 113, "0010001111": 113, "001000111100": 113, "001000111101": 113, "001000111110": 113, "001000111111": 113, "001001": 113, "00100100": 113, "0010010000": 113, "001001000000": 113, "001001000001": 113, "001001000010": 113, "001001000011": 113, "0010010001": 113, "001001000100": 113, "001001000101": 113, "001001000110": 113, "001001000111": 113, "0010010010": 113, "001001001001": 113, "001001001010": 113, "001001001011": 113, "0010010011": 113, "001001001100": 113, "001001001101": 113, "001001001110": 113, "001001001111": 113, "00100101": 113, "0010010100": 113, "001001010000": 113, "001001010001": 113, "001001010010": 113, "001001010011": 113, "0010010101": 113, "001001010100": 113, "001001010110": 113, "001001010111": 113, "0010010110": 113, "001001011000": 113, "001001011001": 113, "001001011010": 113, "001001011011": 113, "0010010111": 113, "001001011100": 113, "001001011101": 113, "001001011110": 113, "001001011111": 113, "00100110": 113, "0010011000": 113, "001001100000": 113, "001001100001": 113, "001001100010": 113, "001001100011": 113, "0010011001": 113, "001001100100": 113, "001001100101": 113, "001001100110": 113, "001001100111": 113, "0010011010": 113, "001001101000": 113, "001001101001": 113, "001001101010": 113, "001001101011": 113, "0010011011": 113, "001001101100": 113, "001001101101": 113, "001001101110": 113, "001001101111": 113, "00100111": 113, "0010011100": 113, "001001110000": 113, "001001110001": 113, "001001110010": 113, "001001110011": 113, "0010011101": 113, "001001110100": 113, "001001110101": 113, "001001110110": 113, "0010011110": 113, "001001111000": 113, "001001111001": 113, "001001111010": 113, "001001111011": 113, "0010011111": 113, "001001111100": 113, "001001111101": 113, "001001111110": 113, "001001111111": 113, "001010": 113, "00101000": 113, "0010100000": 113, "001010000000": 113, "001010000010": 113, "001010000011": 113, "0010100001": 113, "001010000101": 113, "001010000110": 113, "001010000111": 113, "0010100010": 113, "001010001000": 113, "001010001001": 113, "001010001010": 113, "001010001011": 113, "0010100011": 113, "001010001100": 113, "001010001101": 113, "001010001110": 113, "001010001111": 113, "00101001": 113, "0010100100": 113, "001010010000": 113, "001010010001": 113, "001010010010": 113, "001010010011": 113, "0010100101": 113, "001010010100": 113, "001010010101": 113, "001010010110": 113, "001010010111": 113, "0010100110": 113, "001010011001": 113, "001010011010": 113, "001010011011": 113, "0010100111": 113, "001010011100": 113, "001010011101": 113, "001010011110": 113, "001010011111": 113, "00101010": 113, "0010101000": 113, "001010100000": 113, "001010100001": 113, "001010100010": 113, "001010100011": 113, "0010101001": 113, "001010100100": 113, "001010100101": 113, "001010100111": 113, "0010101010": 113, "001010101000": 113, "001010101001": 113, "001010101010": 113, "001010101011": 113, "0010101011": 113, "001010101100": 113, "001010101110": 113, "001010101111": 113, "00101011": 113, "0010101100": 113, "001010110000": 113, "001010110001": 113, "001010110010": 113, "001010110011": 113, "0010101101": 113, "001010110100": 113, "001010110110": 113, "001010110111": 113, "0010101110": 113, "001010111000": 113, "001010111001": 113, "001010111010": 113, "0010101111": 113, "001010111100": 113, "001010111101": 113, "001010111110": 113, "001010111111": 113, "001011": 113, "00101100": 113, "0010110000": 113, "001011000000": 113, "001011000001": 113, "001011000010": 113, "001011000011": 113, "0010110001": 113, "001011000100": 113, "001011000101": 113, "001011000110": 113, "001011000111": 113, "0010110010": 113, "001011001000": 113, "001011001001": 113, "001011001010": 113, "001011001011": 113, "0010110011": 113, "001011001100": 113, "001011001101": 113, "001011001110": 113, "001011001111": 113, "00101101": 113, "0010110100": 113, "001011010000": 113, "001011010001": 113, "001011010010": 113, "001011010011": 113, "0010110101": 113, "001011010100": 113, "001011010101": 113, "001011010110": 113, "001011010111": 113, "0010110110": 113, "001011011000": 113, "001011011001": 113, "001011011010": 113, "001011011011": 113, "0010110111": 113, "001011011100": 113, "001011011101": 113, "001011011110": 113, "001011011111": 113, "00101110": 113, "0010111000": 113, "001011100000": 113, "001011100001": 113, "001011100010": 113, "001011100011": 113, "0010111001": 113, "001011100100": 113, "001011100101": 113, "001011100111": 113, "0010111010": 113, "001011101000": 113, "001011101010": 113, "001011101011": 113, "0010111011": 113, "001011101100": 113, "001011101110": 113, "001011101111": 113, "00101111": 113, "0010111100": 113, "001011110001": 113, "001011110010": 113, "001011110011": 113, "0010111101": 113, "001011110100": 113, "001011110101": 113, "001011110110": 113, "001011110111": 113, "0010111110": 113, "001011111000": 113, "001011111001": 113, "001011111010": 113, "001011111011": 113, "0010111111": 113, "001011111100": 113, "001011111101": 113, "001011111110": 113, "001011111111": 113, "0011": 113, "001100": 113, "00110000": 113, "0011000000": 113, "001100000000": 113, "001100000001": 113, "001100000010": 113, "001100000011": 113, "0011000001": 113, "001100000100": 113, "001100000101": 113, "001100000110": 113, "001100000111": 113, "0011000010": 113, "001100001000": 113, "001100001001": 113, "001100001010": 113, "001100001011": 113, "0011000011": 113, "001100001100": 113, "001100001101": 113, "001100001110": 113, "001100001111": 113, "00110001": 113, "0011000100": 113, "001100010000": 113, "001100010001": 113, "001100010011": 113, "0011000101": 113, "001100010101": 113, "001100010110": 113, "001100010111": 113, "0011000110": 113, "001100011000": 113, "001100011001": 113, "001100011010": 113, "001100011011": 113, "0011000111": 113, "001100011101": 113, "001100011110": 113, "001100011111": 113, "00110010": 113, "0011001000": 113, "001100100000": 113, "001100100001": 113, "001100100010": 113, "001100100011": 113, "0011001001": 113, "001100100100": 113, "001100100101": 113, "001100100110": 113, "001100100111": 113, "0011001010": 113, "001100101000": 113, "001100101001": 113, "001100101010": 113, "001100101011": 113, "0011001011": 113, "001100101100": 113, "001100101101": 113, "001100101110": 113, "001100101111": 113, "00110011": 113, "0011001100": 113, "001100110000": 113, "001100110001": 113, "001100110010": 113, "001100110011": 113, "0011001101": 113, "001100110100": 113, "001100110101": 113, "001100110110": 113, "001100110111": 113, "0011001110": 113, "001100111000": 113, "001100111001": 113, "001100111010": 113, "0011001111": 113, "001100111100": 113, "001100111101": 113, "001100111110": 113, "001100111111": 113, "001101": 113, "00110100": 113, "0011010000": 113, "001101000000": 113, "001101000001": 113, "001101000010": 113, "001101000011": 113, "0011010001": 113, "001101000100": 113, "001101000110": 113, "001101000111": 113, "0011010010": 113, "001101001000": 113, "001101001001": 113, "001101001010": 113, "001101001011": 113, "0011010011": 113, "001101001100": 113, "001101001101": 113, "001101001110": 113, "001101001111": 113, "00110101": 113, "0011010100": 113, "001101010000": 113, "001101010001": 113, "001101010010": 113, "001101010011": 113, "0011010101": 113, "001101010100": 113, "001101010101": 113, "001101010110": 113, "001101010111": 113, "0011010110": 113, "001101011000": 113, "001101011001": 113, "001101011010": 113, "001101011011": 113, "0011010111": 113, "001101011100": 113, "001101011110": 113, "001101011111": 113, "00110110": 113, "0011011000": 113, "001101100000": 113, "001101100001": 113, "001101100010": 113, "001101100011": 113, "0011011001": 113, "001101100100": 113, "001101100101": 113, "001101100110": 113, "001101100111": 113, "0011011010": 113, "001101101000": 113, "001101101001": 113, "001101101010": 113, "0011011011": 113, "001101101100": 113, "001101101101": 113, "001101101110": 113, "001101101111": 113, "00110111": 113, "0011011100": 113, "001101110000": 113, "001101110001": 113, "001101110010": 113, "001101110011": 113, "0011011101": 113, "001101110100": 113, "001101110101": 113, "001101110110": 113, "001101110111": 113, "0011011110": 113, "001101111000": 113, "001101111001": 113, "001101111011": 113, "0011011111": 113, "001101111100": 113, "001101111101": 113, "001101111110": 113, "001101111111": 113, "001106248": 101, "001110": 113, "00111000": 113, "0011100000": 113, "001110000000": 113, "001110000001": 113, "001110000010": 113, "001110000011": 113, "0011100001": 113, "001110000100": 113, "001110000101": 113, "001110000110": 113, "001110000111": 113, "0011100010": 113, "001110001000": 113, "001110001001": 113, "001110001010": 113, "001110001011": 113, "0011100011": 113, "001110001100": 113, "001110001101": 113, "001110001111": 113, "00111001": 113, "0011100100": 113, "001110010000": 113, "001110010001": 113, "001110010010": 113, "001110010011": 113, "0011100101": 113, "001110010100": 113, "001110010101": 113, "001110010110": 113, "001110010111": 113, "0011100110": 113, "001110011000": 113, "001110011001": 113, "001110011010": 113, "001110011011": 113, "0011100111": 113, "001110011100": 113, "001110011101": 113, "001110011110": 113, "001110011111": 113, "00111010": 113, "0011101000": 113, "001110100000": 113, "001110100001": 113, "001110100010": 113, "001110100011": 113, "0011101001": 113, "001110100101": 113, "001110100110": 113, "001110100111": 113, "0011101010": 113, "001110101000": 113, "001110101001": 113, "001110101010": 113, "001110101011": 113, "0011101011": 113, "001110101100": 113, "001110101101": 113, "001110101110": 113, "001110101111": 113, "00111011": 113, "0011101100": 113, "001110110000": 113, "001110110001": 113, "001110110010": 113, "001110110011": 113, "0011101101": 113, "001110110100": 113, "001110110101": 113, "001110110110": 113, "001110110111": 113, "0011101110": 113, "001110111000": 113, "001110111001": 113, "001110111010": 113, "001110111011": 113, "0011101111": 113, "001110111100": 113, "001110111101": 113, "001110111110": 113, "001110111111": 113, "001111": 113, "00111100": 113, "0011110000": 113, "001111000000": 113, "001111000001": 113, "001111000010": 113, "001111000011": 113, "0011110001": 113, "001111000100": 113, "001111000101": 113, "001111000110": 113, "0011110010": 113, "001111001000": 113, "001111001001": 113, "001111001010": 113, "001111001011": 113, "0011110011": 113, "001111001100": 113, "001111001101": 113, "001111001110": 113, "00111101": 113, "0011110100": 113, "001111010000": 113, "001111010001": 113, "001111010010": 113, "001111010011": 113, "0011110101": 113, "001111010100": 113, "001111010110": 113, "001111010111": 113, "0011110110": 113, "001111011000": 113, "001111011011": 113, "0011110111": 113, "001111011100": 113, "001111011101": 113, "001111011110": 113, "001111011111": 113, "00111110": 113, "0011111000": 113, "001111100001": 113, "001111100010": 113, "001111100011": 113, "0011111001": 113, "001111100100": 113, "001111100101": 113, "001111100110": 113, "001111100111": 113, "0011111010": 113, "001111101000": 113, "001111101001": 113, "001111101010": 113, "001111101011": 113, "0011111011": 113, "001111101100": 113, "001111101101": 113, "001111101110": 113, "001111101111": 113, "00111111": 113, "0011111100": 113, "001111110000": 113, "001111110010": 113, "001111110011": 113, "0011111101": 113, "001111110100": 113, "001111110101": 113, "001111110110": 113, "001111110111": 113, "0011111110": 113, "001111111000": 113, "001111111001": 113, "001111111010": 113, "001111111011": 113, "0011111111": 113, "001111111100": 113, "001111111101": 113, "001111111110": 113, "001111111111": 113, "00112793j": 112, "00140625j": 112, "0015297007957265": 111, "001586602": 116, "001750899": 116, "00180086": 116, "00188965j": 112, "001965863": 118, "001991427": 118, "002000869": 118, "002092806": 115, "00224121j": 112, "002262899": 116, "0023291j": 112, "002484118": 118, "002518593": 117, "002615324": 99, "003039171": 121, "00306152j": 112, "003472861": 118, "003584823": 116, "0036326658725738": 99, "003635819": 116, "00388083": 118, "004047065": 116, "004168032": 118, "0042": 113, "0042041j": 112, "00429441": 120, "00467285j": 112, "00535": [13, 16, 37, 94, 109], "005972623825073242": 112, "0061084j": 112, "0063114772242143": 111, "0069773197174072266": 112, "00720703j": 112, "008051103069660285": 97, "008499118": 118, "008558464": 118, "008599775": 116, "008849126": 116, "01": [13, 15, 16, 37, 83, 93, 103, 113, 115, 117, 120, 121], "0100": [35, 37, 39, 113], "010000": [35, 37, 39, 113], "01000000": 113, "0100000000": 113, "010000000000": 113, "010000000001": 113, "010000000011": 113, "0100000001": 113, "010000000100": 113, "010000000101": 113, "010000000110": 113, "0100000010": 113, "010000001000": 113, "010000001001": 113, "010000001010": 113, "010000001011": 113, "0100000011": 113, "010000001100": 113, "010000001101": 113, "010000001110": 113, "010000001111": 113, "01000001": 113, "0100000100": 113, "010000010000": 113, "010000010001": 113, "010000010010": 113, "0100000101": 113, "010000010100": 113, "010000010101": 113, "010000010110": 113, "010000010111": 113, "0100000110": 113, "010000011000": 113, "010000011001": 113, "010000011010": 113, "010000011011": 113, "0100000111": 113, "010000011100": 113, "010000011101": 113, "010000011110": 113, "010000011111": 113, "01000010": 113, "0100001000": 113, "010000100000": 113, "010000100001": 113, "010000100010": 113, "010000100011": 113, "0100001001": 113, "010000100100": 113, "010000100101": 113, "010000100110": 113, "0100001010": 113, "010000101000": 113, "010000101001": 113, "010000101010": 113, "010000101011": 113, "0100001011": 113, "010000101100": 113, "010000101101": 113, "010000101110": 113, "010000101111": 113, "01000011": 113, "0100001100": 113, "010000110000": 113, "010000110001": 113, "010000110010": 113, "010000110011": 113, "0100001101": 113, "010000110100": 113, "010000110101": 113, "010000110110": 113, "010000110111": 113, "0100001110": 113, "010000111000": 113, "010000111001": 113, "010000111011": 113, "0100001111": 113, "010000111100": 113, "010000111101": 113, "010000111110": 113, "010000111111": 113, "010001": 113, "01000100": 113, "0100010000": 113, "010001000000": 113, "010001000001": 113, "010001000010": 113, "010001000011": 113, "0100010001": 113, "010001000100": 113, "010001000101": 113, "010001000110": 113, "010001000111": 113, "0100010010": 113, "010001001000": 113, "010001001001": 113, "010001001010": 113, "010001001011": 113, "0100010011": 113, "010001001100": 113, "010001001101": 113, "010001001110": 113, "010001001111": 113, "01000101": 113, "0100010100": 113, "010001010000": 113, "010001010001": 113, "010001010010": 113, "010001010011": 113, "0100010101": 113, "010001010100": 113, "010001010101": 113, "010001010110": 113, "010001010111": 113, "0100010110": 113, "010001011000": 113, "010001011001": 113, "010001011010": 113, "010001011011": 113, "0100010111": 113, "010001011100": 113, "010001011101": 113, "010001011110": 113, "010001011111": 113, "01000110": 113, "0100011000": 113, "010001100000": 113, "010001100001": 113, "010001100010": 113, "010001100011": 113, "0100011001": 113, "010001100100": 113, "010001100101": 113, "010001100111": 113, "0100011010": 113, "010001101000": 113, "010001101001": 113, "010001101010": 113, "010001101011": 113, "0100011011": 113, "010001101100": 113, "010001101101": 113, "010001101110": 113, "010001101111": 113, "01000111": 113, "0100011100": 113, "010001110000": 113, "010001110001": 113, "010001110010": 113, "010001110011": 113, "0100011101": 113, "010001110100": 113, "010001110101": 113, "010001110110": 113, "010001110111": 113, "0100011110": 113, "010001111000": 113, "010001111001": 113, "010001111010": 113, "010001111011": 113, "0100011111": 113, "010001111100": 113, "010001111101": 113, "010001111110": 113, "010001111111": 113, "010010": 113, "01001000": 113, "0100100000": 113, "010010000010": 113, "010010000011": 113, "0100100001": 113, "010010000100": 113, "010010000101": 113, "010010000110": 113, "010010000111": 113, "0100100010": 113, "010010001000": 113, "010010001001": 113, "010010001010": 113, "010010001011": 113, "0100100011": 113, "010010001100": 113, "010010001101": 113, "010010001110": 113, "010010001111": 113, "01001001": 113, "0100100100": 113, "010010010000": 113, "010010010001": 113, "010010010010": 113, "0100100101": 113, "010010010100": 113, "010010010101": 113, "010010010110": 113, "0100100110": 113, "010010011000": 113, "010010011001": 113, "010010011010": 113, "010010011011": 113, "0100100111": 113, "010010011100": 113, "010010011101": 113, "010010011110": 113, "010010011111": 113, "01001010": 113, "0100101000": 113, "010010100000": 113, "010010100001": 113, "010010100010": 113, "010010100011": 113, "0100101001": 113, "010010100100": 113, "010010100101": 113, "010010100110": 113, "010010100111": 113, "0100101010": 113, "010010101000": 113, "010010101001": 113, "010010101010": 113, "010010101011": 113, "0100101011": 113, "010010101100": 113, "010010101101": 113, "010010101110": 113, "010010101111": 113, "01001011": 113, "0100101100": 113, "010010110000": 113, "010010110001": 113, "010010110010": 113, "010010110011": 113, "0100101101": 113, "010010110100": 113, "010010110110": 113, "0100101110": 113, "010010111000": 113, "010010111001": 113, "010010111011": 113, "0100101111": 113, "010010111100": 113, "010010111101": 113, "010010111110": 113, "010010111111": 113, "010011": 113, "01001100": 113, "0100110000": 113, "010011000000": 113, "010011000001": 113, "010011000010": 113, "010011000011": 113, "0100110001": 113, "010011000100": 113, "010011000101": 113, "010011000110": 113, "010011000111": 113, "0100110010": 113, "010011001000": 113, "010011001001": 113, "010011001010": 113, "010011001011": 113, "0100110011": 113, "010011001100": 113, "010011001101": 113, "010011001110": 113, "010011001111": 113, "01001101": 113, "0100110100": 113, "010011010000": 113, "010011010001": 113, "010011010010": 113, "010011010011": 113, "0100110101": 113, "010011010100": 113, "010011010101": 113, "010011010110": 113, "010011010111": 113, "0100110110": 113, "010011011000": 113, "010011011001": 113, "010011011010": 113, "010011011011": 113, "0100110111": 113, "010011011100": 113, "010011011101": 113, "010011011110": 113, "010011011111": 113, "01001110": 113, "0100111000": 113, "010011100000": 113, "010011100001": 113, "010011100010": 113, "010011100011": 113, "0100111001": 113, "010011100100": 113, "010011100101": 113, "010011100110": 113, "010011100111": 113, "0100111010": 113, "010011101001": 113, "010011101010": 113, "010011101011": 113, "0100111011": 113, "010011101100": 113, "010011101110": 113, "010011101111": 113, "01001111": 113, "0100111100": 113, "010011110000": 113, "010011110001": 113, "010011110010": 113, "010011110011": 113, "0100111101": 113, "010011110100": 113, "010011110101": 113, "010011110110": 113, "0100111110": 113, "010011111000": 113, "010011111001": 113, "010011111010": 113, "010011111011": 113, "0100111111": 113, "010011111100": 113, "010011111101": 113, "010011111110": 113, "010011111111": 113, "0101": 113, "010100": 113, "01010000": 113, "0101000000": 113, "010100000000": 113, "010100000001": 113, "010100000010": 113, "010100000011": 113, "0101000001": 113, "010100000100": 113, "010100000101": 113, "010100000110": 113, "010100000111": 113, "0101000010": 113, "010100001000": 113, "010100001010": 113, "010100001011": 113, "0101000011": 113, "010100001100": 113, "010100001101": 113, "010100001110": 113, "010100001111": 113, "01010001": 113, "0101000100": 113, "010100010000": 113, "010100010001": 113, "010100010010": 113, "010100010011": 113, "0101000101": 113, "010100010100": 113, "010100010101": 113, "010100010110": 113, "010100010111": 113, "0101000110": 113, "010100011000": 113, "010100011001": 113, "010100011010": 113, "010100011011": 113, "0101000111": 113, "010100011100": 113, "010100011101": 113, "010100011110": 113, "010100011111": 113, "01010010": 113, "0101001000": 113, "010100100000": 113, "010100100001": 113, "010100100010": 113, "010100100011": 113, "0101001001": 113, "010100100100": 113, "010100100101": 113, "010100100110": 113, "010100100111": 113, "0101001010": 113, "010100101000": 113, "010100101001": 113, "010100101010": 113, "010100101011": 113, "0101001011": 113, "010100101100": 113, "010100101101": 113, "010100101110": 113, "010100101111": 113, "01010011": 113, "0101001100": 113, "010100110001": 113, "010100110010": 113, "010100110011": 113, "0101001101": 113, "010100110100": 113, "010100110101": 113, "010100110110": 113, "010100110111": 113, "0101001110": 113, "010100111000": 113, "010100111001": 113, "010100111010": 113, "010100111011": 113, "0101001111": 113, "010100111100": 113, "010100111101": 113, "010100111110": 113, "010100111111": 113, "010101": 113, "01010100": 113, "0101010000": 113, "010101000000": 113, "010101000001": 113, "010101000010": 113, "0101010001": 113, "010101000100": 113, "010101000101": 113, "010101000110": 113, "010101000111": 113, "0101010010": 113, "010101001000": 113, "010101001011": 113, "0101010011": 113, "010101001100": 113, "010101001101": 113, "010101001111": 113, "01010101": 113, "0101010100": 113, "010101010000": 113, "010101010001": 113, "010101010011": 113, "0101010101": 113, "010101010100": 113, "010101010101": 113, "010101010110": 113, "010101010111": 113, "0101010110": 113, "010101011000": 113, "010101011001": 113, "010101011010": 113, "010101011011": 113, "0101010111": 113, "010101011100": 113, "010101011101": 113, "010101011110": 113, "010101011111": 113, "01010110": 113, "0101011000": 113, "010101100000": 113, "010101100001": 113, "010101100010": 113, "0101011001": 113, "010101100100": 113, "010101100101": 113, "010101100111": 113, "0101011010": 113, "010101101000": 113, "010101101001": 113, "010101101010": 113, "010101101011": 113, "0101011011": 113, "010101101100": 113, "010101101101": 113, "010101101110": 113, "010101101111": 113, "01010111": 113, "0101011100": 113, "010101110001": 113, "010101110010": 113, "010101110011": 113, "0101011101": 113, "010101110100": 113, "010101110101": 113, "010101110110": 113, "010101110111": 113, "0101011110": 113, "010101111000": 113, "010101111001": 113, "010101111010": 113, "010101111011": 113, "0101011111": 113, "010101111100": 113, "010101111101": 113, "010101111110": 113, "010101111111": 113, "010110": 113, "01011000": 113, "0101100000": 113, "010110000000": 113, "010110000001": 113, "010110000010": 113, "010110000011": 113, "0101100001": 113, "010110000101": 113, "010110000110": 113, "010110000111": 113, "0101100010": 113, "010110001000": 113, "010110001001": 113, "010110001010": 113, "010110001011": 113, "0101100011": 113, "010110001100": 113, "010110001101": 113, "010110001110": 113, "010110001111": 113, "01011001": 113, "0101100100": 113, "010110010000": 113, "010110010001": 113, "010110010010": 113, "010110010011": 113, "0101100101": 113, "010110010100": 113, "010110010101": 113, "010110010110": 113, "010110010111": 113, "0101100110": 113, "010110011000": 113, "010110011001": 113, "010110011010": 113, "010110011011": 113, "0101100111": 113, "010110011100": 113, "010110011101": 113, "010110011110": 113, "010110011111": 113, "01011010": 113, "0101101000": 113, "010110100000": 113, "010110100001": 113, "010110100011": 113, "0101101001": 113, "010110100101": 113, "010110100110": 113, "010110100111": 113, "0101101010": 113, "010110101000": 113, "010110101010": 113, "010110101011": 113, "0101101011": 113, "010110101100": 113, "010110101101": 113, "010110101110": 113, "010110101111": 113, "01011011": 113, "0101101100": 113, "010110110001": 113, "010110110010": 113, "010110110011": 113, "0101101101": 113, "010110110100": 113, "010110110101": 113, "010110110110": 113, "010110110111": 113, "0101101110": 113, "010110111000": 113, "010110111001": 113, "010110111010": 113, "0101101111": 113, "010110111100": 113, "010110111101": 113, "010110111110": 113, "010111": 113, "01011100": 113, "0101110000": 113, "010111000011": 113, "0101110001": 113, "010111000100": 113, "010111000101": 113, "010111000110": 113, "010111000111": 113, "0101110010": 113, "010111001000": 113, "010111001001": 113, "010111001010": 113, "010111001011": 113, "0101110011": 113, "010111001100": 113, "010111001101": 113, "010111001110": 113, "010111001111": 113, "01011101": 113, "0101110100": 113, "010111010000": 113, "010111010001": 113, "010111010010": 113, "010111010011": 113, "0101110101": 113, "010111010100": 113, "010111010101": 113, "010111010110": 113, "010111010111": 113, "0101110110": 113, "010111011000": 113, "010111011001": 113, "010111011010": 113, "010111011011": 113, "0101110111": 113, "010111011100": 113, "010111011101": 113, "010111011110": 113, "010111011111": 113, "01011110": 113, "0101111000": 113, "010111100000": 113, "010111100001": 113, "010111100010": 113, "010111100011": 113, "0101111001": 113, "010111100100": 113, "010111100101": 113, "010111100110": 113, "0101111010": 113, "010111101000": 113, "010111101001": 113, "010111101011": 113, "0101111011": 113, "010111101100": 113, "010111101101": 113, "010111101110": 113, "010111101111": 113, "01011111": 113, "0101111100": 113, "010111110000": 113, "010111110001": 113, "010111110010": 113, "010111110011": 113, "0101111101": 113, "010111110100": 113, "010111110101": 113, "010111110111": 113, "0101111110": 113, "010111111000": 113, "010111111001": 113, "010111111010": 113, "010111111011": 113, "0101111111": 113, "010111111100": 113, "010111111101": 113, "010111111110": 113, "010111111111": 113, "010111953": 101, "0110": 113, "011000": 113, "01100000": 113, "0110000000": 113, "011000000000": 113, "011000000001": 113, "011000000010": 113, "011000000011": 113, "0110000001": 113, "011000000100": 113, "011000000101": 113, "011000000110": 113, "011000000111": 113, "0110000010": 113, "011000001000": 113, "011000001001": 113, "011000001010": 113, "011000001011": 113, "0110000011": 113, "011000001110": 113, "011000001111": 113, "01100001": 113, "0110000100": 113, "011000010000": 113, "011000010001": 113, "011000010010": 113, "0110000101": 113, "011000010100": 113, "011000010101": 113, "011000010110": 113, "011000010111": 113, "0110000110": 113, "011000011000": 113, "011000011001": 113, "011000011010": 113, "011000011011": 113, "0110000111": 113, "011000011101": 113, "011000011110": 113, "011000011111": 113, "01100010": 113, "0110001000": 113, "011000100000": 113, "011000100001": 113, "011000100010": 113, "011000100011": 113, "0110001001": 113, "011000100100": 113, "011000100110": 113, "011000100111": 113, "0110001010": 113, "011000101000": 113, "011000101001": 113, "011000101011": 113, "0110001011": 113, "011000101100": 113, "011000101101": 113, "011000101110": 113, "011000101111": 113, "01100011": 113, "0110001100": 113, "011000110000": 113, "011000110001": 113, "011000110010": 113, "011000110011": 113, "0110001101": 113, "011000110100": 113, "011000110101": 113, "011000110110": 113, "011000110111": 113, "0110001110": 113, "011000111000": 113, "011000111001": 113, "011000111010": 113, "011000111011": 113, "0110001111": 113, "011000111100": 113, "011000111101": 113, "011000111110": 113, "011000111111": 113, "011001": 113, "01100100": 113, "0110010000": 113, "011001000000": 113, "011001000001": 113, "011001000010": 113, "011001000011": 113, "0110010001": 113, "011001000100": 113, "011001000101": 113, "011001000110": 113, "011001000111": 113, "0110010010": 113, "011001001000": 113, "011001001001": 113, "011001001010": 113, "011001001011": 113, "0110010011": 113, "011001001100": 113, "011001001101": 113, "011001001110": 113, "011001001111": 113, "01100101": 113, "0110010100": 113, "011001010000": 113, "011001010001": 113, "011001010010": 113, "011001010011": 113, "0110010101": 113, "011001010100": 113, "011001010110": 113, "011001010111": 113, "0110010110": 113, "011001011000": 113, "011001011001": 113, "011001011010": 113, "011001011011": 113, "0110010111": 113, "011001011100": 113, "011001011101": 113, "011001011110": 113, "011001011111": 113, "01100110": 113, "0110011000": 113, "011001100000": 113, "011001100001": 113, "011001100010": 113, "011001100011": 113, "0110011001": 113, "011001100100": 113, "011001100101": 113, "011001100110": 113, "011001100111": 113, "0110011010": 113, "011001101000": 113, "011001101001": 113, "011001101010": 113, "011001101011": 113, "0110011011": 113, "011001101100": 113, "011001101101": 113, "011001101110": 113, "011001101111": 113, "01100111": 113, "0110011100": 113, "011001110000": 113, "011001110001": 113, "011001110010": 113, "011001110011": 113, "0110011101": 113, "011001110100": 113, "011001110101": 113, "011001110110": 113, "011001110111": 113, "0110011110": 113, "011001111000": 113, "011001111001": 113, "011001111010": 113, "011001111011": 113, "0110011111": 113, "011001111100": 113, "011001111101": 113, "011001111110": 113, "011001111111": 113, "011010": 113, "01101000": 113, "0110100000": 113, "011010000000": 113, "011010000001": 113, "011010000010": 113, "011010000011": 113, "0110100001": 113, "011010000100": 113, "011010000101": 113, "011010000110": 113, "011010000111": 113, "0110100010": 113, "011010001000": 113, "011010001010": 113, "011010001011": 113, "0110100011": 113, "011010001100": 113, "011010001101": 113, "011010001110": 113, "011010001111": 113, "01101001": 113, "0110100100": 113, "011010010000": 113, "011010010001": 113, "011010010010": 113, "011010010011": 113, "0110100101": 113, "011010010100": 113, "011010010101": 113, "011010010110": 113, "011010010111": 113, "0110100110": 113, "011010011000": 113, "011010011001": 113, "011010011010": 113, "011010011011": 113, "0110100111": 113, "011010011101": 113, "011010011110": 113, "011010011111": 113, "01101010": 113, "0110101000": 113, "011010100000": 113, "011010100001": 113, "011010100010": 113, "0110101001": 113, "011010100100": 113, "011010100101": 113, "011010100110": 113, "011010100111": 113, "0110101010": 113, "011010101000": 113, "011010101001": 113, "011010101010": 113, "011010101011": 113, "0110101011": 113, "011010101100": 113, "011010101101": 113, "011010101110": 113, "011010101111": 113, "01101011": 113, "0110101100": 113, "011010110000": 113, "011010110001": 113, "011010110010": 113, "011010110011": 113, "0110101101": 113, "011010110100": 113, "011010110101": 113, "011010110110": 113, "011010110111": 113, "0110101110": 113, "011010111000": 113, "011010111001": 113, "011010111010": 113, "011010111011": 113, "0110101111": 113, "011010111100": 113, "011010111101": 113, "011010111110": 113, "011010111111": 113, "011011": 113, "01101100": 113, "0110110000": 113, "011011000000": 113, "011011000001": 113, "011011000010": 113, "011011000011": 113, "0110110001": 113, "011011000100": 113, "011011000101": 113, "011011000110": 113, "011011000111": 113, "0110110010": 113, "011011001000": 113, "011011001001": 113, "011011001010": 113, "011011001011": 113, "0110110011": 113, "011011001100": 113, "011011001101": 113, "011011001110": 113, "011011001111": 113, "01101101": 113, "0110110100": 113, "011011010000": 113, "011011010001": 113, "011011010011": 113, "0110110101": 113, "011011010100": 113, "011011010101": 113, "011011010110": 113, "011011010111": 113, "0110110110": 113, "011011011000": 113, "011011011010": 113, "011011011011": 113, "0110110111": 113, "011011011100": 113, "011011011101": 113, "011011011110": 113, "01101110": 113, "0110111000": 113, "011011100000": 113, "011011100001": 113, "011011100010": 113, "011011100011": 113, "0110111001": 113, "011011100100": 113, "011011100101": 113, "011011100110": 113, "011011100111": 113, "0110111010": 113, "011011101000": 113, "011011101001": 113, "011011101010": 113, "011011101011": 113, "0110111011": 113, "011011101100": 113, "011011101110": 113, "011011101111": 113, "01101111": 113, "0110111100": 113, "011011110000": 113, "011011110001": 113, "011011110011": 113, "0110111101": 113, "011011110100": 113, "011011110101": 113, "011011110110": 113, "0110111110": 113, "011011111000": 113, "011011111001": 113, "011011111011": 113, "0110111111": 113, "011011111100": 113, "011011111101": 113, "011011111110": 113, "011011111111": 113, "0111": 113, "011100": 113, "01110000": 113, "0111000000": 113, "011100000000": 113, "011100000001": 113, "011100000010": 113, "011100000011": 113, "0111000001": 113, "011100000100": 113, "011100000101": 113, "011100000110": 113, "011100000111": 113, "0111000010": 113, "011100001000": 113, "011100001001": 113, "011100001010": 113, "0111000011": 113, "011100001100": 113, "011100001101": 113, "011100001110": 113, "011100001111": 113, "01110001": 113, "0111000100": 113, "011100010000": 113, "011100010001": 113, "011100010010": 113, "011100010011": 113, "0111000101": 113, "011100010100": 113, "011100010101": 113, "011100010110": 113, "011100010111": 113, "0111000110": 113, "011100011000": 113, "011100011001": 113, "011100011010": 113, "011100011011": 113, "0111000111": 113, "011100011100": 113, "011100011101": 113, "011100011110": 113, "011100011111": 113, "01110010": 113, "0111001000": 113, "011100100000": 113, "011100100001": 113, "011100100010": 113, "011100100011": 113, "0111001001": 113, "011100100100": 113, "011100100101": 113, "011100100110": 113, "011100100111": 113, "0111001010": 113, "011100101000": 113, "011100101001": 113, "011100101010": 113, "011100101011": 113, "0111001011": 113, "011100101100": 113, "011100101101": 113, "011100101110": 113, "01110011": 113, "0111001100": 113, "011100110000": 113, "011100110001": 113, "011100110010": 113, "011100110011": 113, "0111001101": 113, "011100110100": 113, "011100110101": 113, "011100110110": 113, "011100110111": 113, "0111001110": 113, "011100111000": 113, "011100111001": 113, "011100111010": 113, "011100111011": 113, "0111001111": 113, "011100111100": 113, "011100111101": 113, "011100111110": 113, "011100111111": 113, "011101": 113, "01110100": 113, "0111010000": 113, "011101000000": 113, "011101000001": 113, "011101000010": 113, "011101000011": 113, "0111010001": 113, "011101000100": 113, "011101000101": 113, "011101000110": 113, "011101000111": 113, "0111010010": 113, "011101001000": 113, "011101001010": 113, "011101001011": 113, "0111010011": 113, "011101001100": 113, "011101001110": 113, "011101001111": 113, "01110101": 113, "0111010100": 113, "011101010000": 113, "011101010001": 113, "011101010010": 113, "011101010011": 113, "0111010101": 113, "011101010101": 113, "011101010110": 113, "011101010111": 113, "0111010110": 113, "011101011001": 113, "011101011010": 113, "011101011011": 113, "0111010111": 113, "011101011100": 113, "011101011101": 113, "011101011110": 113, "011101011111": 113, "01110110": 113, "0111011000": 113, "011101100000": 113, "011101100001": 113, "011101100010": 113, "011101100011": 113, "0111011001": 113, "011101100100": 113, "011101100110": 113, "011101100111": 113, "0111011010": 113, "011101101000": 113, "011101101001": 113, "011101101010": 113, "0111011011": 113, "011101101100": 113, "011101101101": 113, "011101101110": 113, "011101101111": 113, "01110111": 113, "0111011100": 113, "011101110000": 113, "011101110001": 113, "011101110010": 113, "011101110011": 113, "0111011101": 113, "011101110100": 113, "011101110101": 113, "011101110111": 113, "0111011110": 113, "011101111000": 113, "011101111001": 113, "011101111010": 113, "011101111011": 113, "0111011111": 113, "011101111100": 113, "011101111101": 113, "011101111110": 113, "011101111111": 113, "011110": 113, "01111000": 113, "0111100000": 113, "011110000000": 113, "011110000001": 113, "011110000010": 113, "011110000011": 113, "0111100001": 113, "011110000100": 113, "011110000101": 113, "011110000110": 113, "011110000111": 113, "0111100010": 113, "011110001000": 113, "011110001001": 113, "011110001010": 113, "011110001011": 113, "0111100011": 113, "011110001100": 113, "011110001110": 113, "011110001111": 113, "01111001": 113, "0111100100": 113, "011110010000": 113, "011110010001": 113, "011110010010": 113, "011110010011": 113, "0111100101": 113, "011110010100": 113, "011110010101": 113, "011110010110": 113, "011110010111": 113, "0111100110": 113, "011110011001": 113, "011110011011": 113, "0111100111": 113, "011110011100": 113, "011110011101": 113, "011110011110": 113, "011110011111": 113, "01111010": 113, "0111101000": 113, "011110100000": 113, "011110100010": 113, "011110100011": 113, "0111101001": 113, "011110100100": 113, "011110100110": 113, "011110100111": 113, "0111101010": 113, "011110101000": 113, "011110101001": 113, "011110101010": 113, "011110101011": 113, "0111101011": 113, "011110101100": 113, "011110101101": 113, "011110101110": 113, "01111011": 113, "0111101100": 113, "011110110000": 113, "011110110001": 113, "011110110010": 113, "011110110011": 113, "0111101101": 113, "011110110100": 113, "011110110101": 113, "011110110110": 113, "011110110111": 113, "0111101110": 113, "011110111000": 113, "011110111001": 113, "011110111010": 113, "011110111011": 113, "0111101111": 113, "011110111101": 113, "011110111110": 113, "011110111111": 113, "011111": 113, "01111100": 113, "0111110000": 113, "011111000000": 113, "011111000001": 113, "011111000010": 113, "011111000011": 113, "0111110001": 113, "011111000100": 113, "011111000110": 113, "011111000111": 113, "0111110010": 113, "011111001000": 113, "011111001001": 113, "011111001010": 113, "011111001011": 113, "0111110011": 113, "011111001100": 113, "011111001101": 113, "011111001110": 113, "011111001111": 113, "01111101": 113, "0111110100": 113, "011111010000": 113, "011111010001": 113, "011111010010": 113, "011111010011": 113, "0111110101": 113, "011111010100": 113, "011111010101": 113, "011111010110": 113, "011111010111": 113, "0111110110": 113, "011111011000": 113, "011111011001": 113, "011111011010": 113, "011111011011": 113, "0111110111": 113, "011111011100": 113, "011111011101": 113, "011111011110": 113, "011111011111": 113, "01111110": 113, "0111111000": 113, "011111100000": 113, "011111100001": 113, "011111100010": 113, "011111100011": 113, "0111111001": 113, "011111100100": 113, "011111100110": 113, "011111100111": 113, "0111111010": 113, "011111101000": 113, "011111101001": 113, "011111101010": 113, "011111101011": 113, "0111111011": 113, "011111101100": 113, "011111101101": 113, "011111101110": 113, "011111101111": 113, "01111111": 113, "0111111100": 113, "011111110000": 113, "011111110001": 113, "011111110011": 113, "0111111101": 113, "011111110100": 113, "011111110101": 113, "011111110110": 113, "011111110111": 113, "0111111110": 113, "011111111000": 113, "011111111001": 113, "011111111010": 113, "011111111011": 113, "0111111111": 113, "011111111100": 113, "011111111101": 113, "011111111110": 113, "011111111111": 113, "013043": [104, 105], "0136331176757813": 111, "019535566456087845": 111, "02": [93, 113, 114, 115, 116, 117, 119, 120, 121], "020": [13, 14, 16, 37, 94, 109], "022": [13, 16, 37, 94, 109], "026399212": 111, "027892886": 111, "0290289944568636": [116, 118], "03": [13, 16, 37, 93, 115, 116, 117, 118, 120, 121], "0316615104675293": 102, "032437752815124274": 101, "0329741001323307": 99, "035309": [26, 27, 28, 94, 109], "04": [77, 104, 108, 112], "0406503299038543": [116, 118], "0414199823076051": 101, "04483747482299805": 102, "045352415605025": 112, "05": [8, 115, 116], "052323": [26, 27, 28, 29, 30, 35, 36, 39, 40], "05b67a8b205d": 102, "06": [13, 16, 37, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 116, 117, 121], "0627930164337158": [115, 116, 117, 118, 120, 121], "06398939449165825": 112, "0684bc937107": 111, "06872579514980316": 99, "07": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 115, 117, 118, 120, 121], "0712890625": 98, "08": [118, 120], "0800": [13, 16, 37], "086808": [83, 84], "08786065308638322": [115, 116, 117, 118], "08981914914274677": 101, "09": [102, 116], "0932": [13, 14, 16, 37, 94, 109], "0a4b8f74": 113, "0a96": 102, "0ad876459e16": 110, "0c65f1d7e4b4": 110, "0f": 90, "0j": 97, "0x72b383ca9940": 112, "0x72b383ca9a70": 112, "0x72b383ca9e00": 112, "0x72b383ca9f30": 112, "0x72b383cc03b0": 112, "0x72b383cc0710": 112, "0x72b383d097f0": 112, "0x72b383d09d30": 112, "0x72b383d09e10": 112, "0x72b383d09ef0": 112, "0x72b383d09fd0": 112, "0x72b383d0a0b0": 112, "0x72b383d0c440": 112, "0x72b383d0c590": 112, "0x72b383d9b250": 112, "0x72b383d9b390": 112, "0x72b383d9b4d0": 112, "0x72b383d9b610": 112, "0x7406ffc99940": 103, "0x7406ffc99cd0": 103, "0x7406ffc99e00": 103, "0x7406ffc99f30": 103, "0x7406ffcb45f0": 103, "0x7406ffcfdc50": 103, "0x7406ffcfdd30": 103, "0x7406ffcfde10": 103, "0x7406ffcfdef0": 103, "0x7406ffcfe0b0": 103, "0x7406ffcfe270": 103, "0x7406ffd00590": 103, "0x7406ffd006e0": 103, "0x7406ffd8f250": 103, "0x7406ffd8f390": 103, "0x7406ffd8f4d0": 103, "0x7406ffd8f610": 103, "0x7406ffe0f020": 103, "0x74075ce16c30": 103, "0x748f6f8d1550": 101, "0x748f6f8d4440": 101, "0x748f6f8d6270": 101, "0x773335cd1470": 100, "0x773335cd4440": 100, "0x773335cd6270": 100, "0x7810b75a9a70": 111, "0x7810b75a9e00": 111, "0x7810b75a9f30": 111, "0x7810b75aa060": 111, "0x7810b75c05f0": 111, "0x7810b76097f0": 111, "0x7810b7609d30": 111, "0x7810b7609e10": 111, "0x7810b7609ef0": 111, "0x7810b7609fd0": 111, "0x7810b760a0b0": 111, "0x7810b760c440": 111, "0x7810b760c590": 111, "0x7810b7697250": 111, "0x7810b7697390": 111, "0x7810b76974d0": 111, "0x7810b7697610": 111, "0x781114712c30": 111, "0x7834f60f1550": 102, "0x7834f60f4440": 102, "0x7834f60f6270": 102, "0x7a1de228d810": 96, "0x7a1de228d940": 96, "0x7a1de22f8590": 96, "0x7a1de22f86e0": 96, "0x7a1de23874d0": 96, "0x7a1de2387610": 96, "0x7a1de2387750": 96, "0x7a1de2387890": 96, "0x7b5bc0ac2350": 92, "0x7b5bc0b28980": 92, "0x7b888c615470": 98, "0x7b888c618440": 98, "0x7b888c61a270": 98, "0x7d07053e9470": 99, "0x7d07053ec440": 99, "0x7d07053ee270": 99, "0x7d2f3f499810": 95, "0x7d2f3f499940": 95, "0x7d2f3f500590": 95, "0x7d2f3f5006e0": 95, "0x7d2f3f58f4d0": 95, "0x7d2f3f58f610": 95, "0x7d2f3f58f750": 95, "0x7d2f3f58f890": 95, "0x7f9913011c50": 110, "0x7f9913011d30": 110, "0x7f9913011ef0": 110, "0x7f9913014440": 110, "0x7f9913014590": 110, "0x7f991309f250": 110, "0x7f991309f390": 110, "0x7f991309f4d0": 110, "0x7f991309f610": 110, "1": [1, 2, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 24, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 61, 62, 64, 78, 80, 81, 83, 85, 87, 89, 90, 91, 93, 96, 97, 99, 104, 105, 120, 121], "10": [8, 13, 14, 16, 22, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 84, 90, 94, 95, 96, 99, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 117, 121], "100": [8, 35, 36, 37, 39, 40, 97, 99, 101, 102, 103, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121], "1000": 113, "100000": 113, "10000000": 113, "1000000000": 113, "100000000000": 113, "100000000010": 113, "100000000011": 113, "1000000001": 113, "100000000100": 113, "100000000101": 113, "100000000110": 113, "100000000111": 113, "1000000010": 113, "100000001000": 113, "100000001001": 113, "100000001010": 113, "100000001011": 113, "1000000011": 113, "100000001100": 113, "100000001101": 113, "100000001110": 113, "100000001111": 113, "10000001": 113, "1000000100": 113, "100000010000": 113, "100000010001": 113, "100000010010": 113, "100000010011": 113, "1000000101": 113, "100000010100": 113, "100000010101": 113, "100000010110": 113, "100000010111": 113, "1000000110": 113, "100000011000": 113, "100000011001": 113, "100000011010": 113, "100000011011": 113, "1000000111": 113, "100000011100": 113, "100000011111": 113, "10000010": 113, "1000001000": 113, "100000100000": 113, "100000100001": 113, "100000100010": 113, "100000100011": 113, "1000001001": 113, "100000100100": 113, "100000100101": 113, "100000100110": 113, "100000100111": 113, "1000001010": 113, "100000101000": 113, "100000101001": 113, "100000101010": 113, "100000101011": 113, "1000001011": 113, "100000101100": 113, "100000101101": 113, "100000101110": 113, "100000101111": 113, "10000011": 113, "1000001100": 113, "100000110000": 113, "100000110001": 113, "100000110010": 113, "100000110011": 113, "1000001101": 113, "100000110100": 113, "100000110101": 113, "100000110110": 113, "100000110111": 113, "1000001110": 113, "100000111000": 113, "100000111001": 113, "100000111010": 113, "100000111011": 113, "1000001111": 113, "100000111100": 113, "100000111101": 113, "100000111110": 113, "100000111111": 113, "100001": 113, "10000100": 113, "1000010000": 113, "100001000000": 113, "100001000001": 113, "100001000010": 113, "100001000011": 113, "1000010001": 113, "100001000100": 113, "100001000101": 113, "100001000110": 113, "100001000111": 113, "1000010010": 113, "100001001000": 113, "100001001001": 113, "100001001010": 113, "100001001011": 113, "1000010011": 113, "100001001100": 113, "100001001101": 113, "100001001110": 113, "100001001111": 113, "10000101": 113, "1000010100": 113, "100001010000": 113, "100001010001": 113, "100001010010": 113, "1000010101": 113, "100001010100": 113, "100001010101": 113, "100001010110": 113, "1000010110": 113, "100001011000": 113, "100001011001": 113, "100001011010": 113, "100001011011": 113, "1000010111": 113, "100001011100": 113, "100001011101": 113, "100001011110": 113, "100001011111": 113, "10000110": 113, "1000011000": 113, "100001100010": 113, "100001100011": 113, "1000011001": 113, "100001100101": 113, "100001100110": 113, "100001100111": 113, "1000011010": 113, "100001101000": 113, "100001101001": 113, "100001101010": 113, "100001101011": 113, "1000011011": 113, "100001101100": 113, "100001101101": 113, "100001101110": 113, "100001101111": 113, "10000111": 113, "1000011100": 113, "100001110001": 113, "100001110010": 113, "100001110011": 113, "1000011101": 113, "100001110100": 113, "100001110101": 113, "100001110110": 113, "100001110111": 113, "1000011110": 113, "100001111000": 113, "100001111001": 113, "100001111010": 113, "100001111011": 113, "1000011111": 113, "100001111100": 113, "100001111110": 113, "100001111111": 113, "100010": 113, "10001000": 113, "1000100000": 113, "100010000000": 113, "100010000010": 113, "100010000011": 113, "1000100001": 113, "100010000100": 113, "100010000101": 113, "100010000110": 113, "100010000111": 113, "1000100010": 113, "100010001000": 113, "100010001001": 113, "100010001010": 113, "1000100011": 113, "100010001100": 113, "100010001101": 113, "100010001110": 113, "100010001111": 113, "10001001": 113, "1000100100": 113, "100010010000": 113, "100010010001": 113, "100010010010": 113, "100010010011": 113, "1000100101": 113, "100010010100": 113, "100010010101": 113, "100010010110": 113, "1000100110": 113, "100010011000": 113, "100010011001": 113, "100010011010": 113, "100010011011": 113, "1000100111": 113, "100010011100": 113, "100010011101": 113, "100010011110": 113, "100010011111": 113, "10001010": 113, "1000101000": 113, "100010100000": 113, "100010100001": 113, "100010100011": 113, "1000101001": 113, "100010100101": 113, "100010100110": 113, "100010100111": 113, "1000101010": 113, "100010101000": 113, "100010101001": 113, "100010101010": 113, "100010101011": 113, "1000101011": 113, "100010101100": 113, "100010101101": 113, "100010101110": 113, "100010101111": 113, "10001011": 113, "1000101100": 113, "100010110000": 113, "100010110001": 113, "100010110010": 113, "100010110011": 113, "1000101101": 113, "100010110100": 113, "100010110101": 113, "100010110110": 113, "100010110111": 113, "1000101110": 113, "100010111000": 113, "100010111001": 113, "100010111010": 113, "100010111011": 113, "1000101111": 113, "100010111100": 113, "100010111101": 113, "100010111110": 113, "100010111111": 113, "100011": 113, "10001100": 113, "1000110000": 113, "100011000000": 113, "100011000001": 113, "100011000010": 113, "100011000011": 113, "1000110001": 113, "100011000100": 113, "100011000101": 113, "100011000110": 113, "100011000111": 113, "1000110010": 113, "100011001000": 113, "100011001001": 113, "100011001010": 113, "100011001011": 113, "1000110011": 113, "100011001100": 113, "100011001101": 113, "100011001110": 113, "100011001111": 113, "10001101": 113, "1000110100": 113, "100011010000": 113, "100011010001": 113, "100011010010": 113, "100011010011": 113, "1000110101": 113, "100011010100": 113, "100011010101": 113, "100011010110": 113, "1000110110": 113, "100011011000": 113, "100011011001": 113, "100011011010": 113, "100011011011": 113, "1000110111": 113, "100011011100": 113, "100011011101": 113, "100011011110": 113, "100011011111": 113, "10001110": 113, "1000111000": 113, "100011100000": 113, "100011100001": 113, "100011100010": 113, "1000111001": 113, "100011100100": 113, "100011100101": 113, "100011100110": 113, "100011100111": 113, "1000111010": 113, "100011101000": 113, "100011101001": 113, "100011101010": 113, "100011101011": 113, "1000111011": 113, "100011101100": 113, "100011101101": 113, "100011101110": 113, "100011101111": 113, "10001111": 113, "1000111100": 113, "100011110001": 113, "100011110010": 113, "100011110011": 113, "1000111101": 113, "100011110100": 113, "100011110101": 113, "100011110110": 113, "100011110111": 113, "1000111110": 113, "100011111000": 113, "100011111001": 113, "100011111010": 113, "100011111011": 113, "1000111111": 113, "100011111100": 113, "100011111101": 113, "100011111110": 113, "100011111111": 113, "1001": 113, "100100": 113, "10010000": 113, "1001000000": 113, "100100000000": 113, "100100000001": 113, "100100000010": 113, "100100000011": 113, "1001000001": 113, "100100000100": 113, "100100000101": 113, "100100000110": 113, "100100000111": 113, "1001000010": 113, "100100001000": 113, "100100001001": 113, "100100001010": 113, "100100001011": 113, "1001000011": 113, "100100001100": 113, "100100001101": 113, "100100001110": 113, "100100001111": 113, "10010001": 113, "1001000100": 113, "100100010000": 113, "100100010001": 113, "100100010010": 113, "100100010011": 113, "1001000101": 113, "100100010100": 113, "100100010101": 113, "100100010110": 113, "100100010111": 113, "1001000110": 113, "100100011000": 113, "100100011001": 113, "100100011010": 113, "100100011011": 113, "1001000111": 113, "100100011100": 113, "100100011101": 113, "100100011110": 113, "100100011111": 113, "10010010": 113, "1001001000": 113, "100100100000": 113, "100100100001": 113, "100100100011": 113, "1001001001": 113, "100100100100": 113, "100100100101": 113, "100100100110": 113, "100100100111": 113, "1001001010": 113, "100100101000": 113, "100100101001": 113, "100100101010": 113, "100100101011": 113, "1001001011": 113, "100100101100": 113, "100100101111": 113, "10010011": 113, "1001001100": 113, "100100110000": 113, "100100110001": 113, "100100110010": 113, "1001001101": 113, "100100110100": 113, "100100110101": 113, "100100110110": 113, "100100110111": 113, "1001001110": 113, "100100111000": 113, "100100111011": 113, "1001001111": 113, "100100111100": 113, "100100111101": 113, "100100111110": 113, "100100111111": 113, "100101": 113, "10010100": 113, "1001010000": 113, "100101000001": 113, "100101000010": 113, "100101000011": 113, "1001010001": 113, "100101000100": 113, "100101000101": 113, "100101000110": 113, "100101000111": 113, "1001010010": 113, "100101001000": 113, "100101001001": 113, "100101001010": 113, "100101001011": 113, "1001010011": 113, "100101001100": 113, "100101001101": 113, "100101001110": 113, "100101001111": 113, "10010101": 113, "1001010100": 113, "100101010000": 113, "100101010010": 113, "100101010011": 113, "1001010101": 113, "100101010101": 113, "100101010110": 113, "100101010111": 113, "1001010110": 113, "100101011000": 113, "100101011001": 113, "100101011010": 113, "100101011011": 113, "1001010111": 113, "100101011100": 113, "100101011110": 113, "100101011111": 113, "10010110": 113, "1001011000": 113, "100101100000": 113, "100101100001": 113, "100101100010": 113, "100101100011": 113, "1001011001": 113, "100101100100": 113, "100101100101": 113, "100101100110": 113, "100101100111": 113, "1001011010": 113, "100101101000": 113, "100101101001": 113, "100101101011": 113, "1001011011": 113, "100101101101": 113, "100101101110": 113, "100101101111": 113, "10010111": 113, "1001011100": 113, "100101110000": 113, "100101110001": 113, "100101110010": 113, "100101110011": 113, "1001011101": 113, "100101110100": 113, "100101110101": 113, "100101110110": 113, "100101110111": 113, "1001011110": 113, "100101111001": 113, "100101111010": 113, "100101111011": 113, "1001011111": 113, "100101111100": 113, "100101111101": 113, "100101111110": 113, "100110": 113, "10011000": 113, "1001100000": 113, "100110000000": 113, "100110000001": 113, "100110000010": 113, "100110000011": 113, "1001100001": 113, "100110000100": 113, "100110000101": 113, "100110000110": 113, "100110000111": 113, "1001100010": 113, "100110001000": 113, "100110001010": 113, "100110001011": 113, "1001100011": 113, "100110001100": 113, "100110001101": 113, "100110001110": 113, "100110001111": 113, "10011001": 113, "1001100100": 113, "100110010000": 113, "100110010001": 113, "100110010010": 113, "100110010011": 113, "1001100101": 113, "100110010101": 113, "100110010110": 113, "100110010111": 113, "1001100110": 113, "100110011000": 113, "100110011001": 113, "100110011010": 113, "100110011011": 113, "1001100111": 113, "100110011100": 113, "100110011110": 113, "100110011111": 113, "10011010": 113, "1001101000": 113, "100110100000": 113, "100110100001": 113, "100110100010": 113, "100110100011": 113, "1001101001": 113, "100110100100": 113, "100110100110": 113, "100110100111": 113, "1001101010": 113, "100110101000": 113, "100110101001": 113, "100110101010": 113, "100110101011": 113, "1001101011": 113, "100110101100": 113, "100110101101": 113, "100110101110": 113, "100110101111": 113, "10011011": 113, "1001101100": 113, "100110110000": 113, "100110110001": 113, "100110110010": 113, "100110110011": 113, "1001101101": 113, "100110110100": 113, "100110110101": 113, "100110110110": 113, "100110110111": 113, "1001101110": 113, "100110111000": 113, "100110111001": 113, "100110111010": 113, "100110111011": 113, "1001101111": 113, "100110111100": 113, "100110111101": 113, "100110111110": 113, "100110111111": 113, "100111": 113, "10011100": 113, "1001110000": 113, "100111000000": 113, "100111000001": 113, "100111000010": 113, "100111000011": 113, "1001110001": 113, "100111000100": 113, "100111000101": 113, "100111000110": 113, "100111000111": 113, "1001110010": 113, "100111001000": 113, "100111001001": 113, "100111001011": 113, "1001110011": 113, "100111001100": 113, "100111001101": 113, "100111001110": 113, "100111001111": 113, "10011101": 113, "1001110100": 113, "100111010000": 113, "100111010001": 113, "100111010010": 113, "100111010011": 113, "1001110101": 113, "100111010100": 113, "100111010101": 113, "100111010110": 113, "100111010111": 113, "1001110110": 113, "100111011000": 113, "100111011001": 113, "100111011010": 113, "100111011011": 113, "1001110111": 113, "100111011100": 113, "100111011110": 113, "100111011111": 113, "10011110": 113, "1001111000": 113, "100111100000": 113, "100111100001": 113, "100111100010": 113, "100111100011": 113, "1001111001": 113, "100111100100": 113, "100111100101": 113, "100111100110": 113, "1001111010": 113, "100111101001": 113, "100111101010": 113, "100111101011": 113, "1001111011": 113, "100111101100": 113, "100111101101": 113, "100111101110": 113, "100111101111": 113, "10011111": 113, "1001111100": 113, "100111110000": 113, "100111110001": 113, "100111110010": 113, "100111110011": 113, "1001111101": 113, "100111110100": 113, "100111110101": 113, "100111110110": 113, "1001111110": 113, "100111111001": 113, "100111111010": 113, "100111111011": 113, "1001111111": 113, "100111111100": 113, "100111111101": 113, "100111111110": 113, "1003698550300165": 102, "1010": 113, "101000": 113, "10100000": 113, "1010000000": 113, "101000000001": 113, "101000000010": 113, "101000000011": 113, "1010000001": 113, "101000000100": 113, "101000000101": 113, "101000000110": 113, "101000000111": 113, "1010000010": 113, "101000001000": 113, "1010000011": 113, "101000001100": 113, "101000001101": 113, "101000001110": 113, "101000001111": 113, "10100001": 113, "1010000100": 113, "101000010000": 113, "101000010001": 113, "101000010010": 113, "101000010011": 113, "1010000101": 113, "101000010100": 113, "101000010101": 113, "101000010110": 113, "101000010111": 113, "1010000110": 113, "101000011000": 113, "101000011001": 113, "101000011010": 113, "101000011011": 113, "1010000111": 113, "101000011100": 113, "101000011101": 113, "101000011110": 113, "101000011111": 113, "10100010": 113, "1010001000": 113, "101000100000": 113, "101000100001": 113, "101000100010": 113, "101000100011": 113, "1010001001": 113, "101000100100": 113, "101000100101": 113, "101000100111": 113, "1010001010": 113, "101000101000": 113, "101000101001": 113, "101000101010": 113, "101000101011": 113, "1010001011": 113, "101000101100": 113, "101000101101": 113, "101000101111": 113, "10100011": 113, "1010001100": 113, "101000110000": 113, "101000110001": 113, "101000110010": 113, "101000110011": 113, "1010001101": 113, "101000110100": 113, "101000110101": 113, "101000110110": 113, "101000110111": 113, "1010001110": 113, "101000111000": 113, "101000111001": 113, "101000111010": 113, "101000111011": 113, "1010001111": 113, "101000111100": 113, "101000111110": 113, "101000111111": 113, "101001": 113, "10100100": 113, "1010010000": 113, "101001000000": 113, "101001000001": 113, "101001000010": 113, "101001000011": 113, "1010010001": 113, "101001000100": 113, "101001000101": 113, "101001000110": 113, "101001000111": 113, "1010010010": 113, "101001001000": 113, "101001001001": 113, "101001001010": 113, "101001001011": 113, "1010010011": 113, "101001001100": 113, "101001001101": 113, "101001001110": 113, "101001001111": 113, "10100101": 113, "1010010100": 113, "101001010000": 113, "101001010001": 113, "101001010010": 113, "101001010011": 113, "1010010101": 113, "101001010101": 113, "101001010110": 113, "101001010111": 113, "1010010110": 113, "101001011000": 113, "101001011001": 113, "101001011010": 113, "101001011011": 113, "1010010111": 113, "101001011100": 113, "101001011101": 113, "101001011110": 113, "101001011111": 113, "10100110": 113, "1010011000": 113, "101001100000": 113, "101001100001": 113, "101001100010": 113, "101001100011": 113, "1010011001": 113, "101001100100": 113, "101001100101": 113, "101001100110": 113, "101001100111": 113, "1010011010": 113, "101001101000": 113, "101001101001": 113, "101001101010": 113, "101001101011": 113, "1010011011": 113, "101001101100": 113, "101001101110": 113, "101001101111": 113, "10100111": 113, "1010011100": 113, "101001110000": 113, "101001110001": 113, "101001110010": 113, "101001110011": 113, "1010011101": 113, "101001110100": 113, "101001110101": 113, "101001110110": 113, "101001110111": 113, "1010011110": 113, "101001111000": 113, "101001111001": 113, "101001111010": 113, "101001111011": 113, "1010011111": 113, "101001111110": 113, "101001111111": 113, "101010": 113, "10101000": 113, "1010100000": 113, "101010000000": 113, "101010000001": 113, "101010000010": 113, "101010000011": 113, "1010100001": 113, "101010000100": 113, "101010000101": 113, "101010000110": 113, "101010000111": 113, "1010100010": 113, "101010001000": 113, "101010001001": 113, "101010001010": 113, "101010001011": 113, "1010100011": 113, "101010001100": 113, "101010001101": 113, "101010001110": 113, "101010001111": 113, "10101001": 113, "1010100100": 113, "101010010000": 113, "101010010001": 113, "101010010010": 113, "101010010011": 113, "1010100101": 113, "101010010100": 113, "101010010110": 113, "101010010111": 113, "1010100110": 113, "101010011000": 113, "101010011010": 113, "1010100111": 113, "101010011100": 113, "101010011101": 113, "101010011110": 113, "10101010": 113, "1010101000": 113, "101010100000": 113, "101010100001": 113, "101010100010": 113, "1010101001": 113, "101010100100": 113, "101010100101": 113, "101010100110": 113, "1010101010": 113, "101010101000": 113, "101010101001": 113, "101010101010": 113, "101010101011": 113, "1010101011": 113, "101010101100": 113, "101010101101": 113, "101010101110": 113, "101010101111": 113, "10101011": 113, "1010101100": 113, "101010110001": 113, "101010110010": 113, "101010110011": 113, "1010101101": 113, "101010110100": 113, "101010110101": 113, "101010110111": 113, "1010101110": 113, "101010111000": 113, "101010111001": 113, "101010111010": 113, "101010111011": 113, "1010101111": 113, "101010111100": 113, "101010111101": 113, "101010111110": 113, "101010111111": 113, "101011": 113, "10101100": 113, "1010110000": 113, "101011000000": 113, "101011000010": 113, "101011000011": 113, "1010110001": 113, "101011000100": 113, "101011000101": 113, "101011000110": 113, "101011000111": 113, "1010110010": 113, "101011001000": 113, "101011001001": 113, "101011001010": 113, "1010110011": 113, "101011001100": 113, "101011001101": 113, "101011001110": 113, "101011001111": 113, "10101101": 113, "1010110100": 113, "101011010000": 113, "101011010001": 113, "101011010010": 113, "101011010011": 113, "1010110101": 113, "101011010100": 113, "101011010101": 113, "101011010110": 113, "101011010111": 113, "1010110110": 113, "101011011000": 113, "101011011001": 113, "101011011010": 113, "101011011011": 113, "1010110111": 113, "101011011110": 113, "101011011111": 113, "10101110": 113, "1010111000": 113, "101011100000": 113, "101011100001": 113, "101011100010": 113, "101011100011": 113, "1010111001": 113, "101011100110": 113, "101011100111": 113, "1010111010": 113, "101011101000": 113, "101011101001": 113, "101011101010": 113, "101011101011": 113, "1010111011": 113, "101011101100": 113, "101011101101": 113, "101011101110": 113, "101011101111": 113, "10101111": 113, "1010111100": 113, "101011110000": 113, "101011110001": 113, "101011110010": 113, "101011110011": 113, "1010111101": 113, "101011110100": 113, "101011110101": 113, "101011110110": 113, "101011110111": 113, "1010111110": 113, "101011111000": 113, "101011111010": 113, "1010111111": 113, "101011111100": 113, "101011111101": 113, "101011111110": 113, "101011111111": 113, "1011": 113, "101100": 113, "10110000": 113, "1011000000": 113, "101100000000": 113, "101100000001": 113, "101100000010": 113, "101100000011": 113, "1011000001": 113, "101100000100": 113, "101100000101": 113, "101100000110": 113, "101100000111": 113, "1011000010": 113, "101100001000": 113, "101100001001": 113, "101100001010": 113, "1011000011": 113, "101100001100": 113, "101100001101": 113, "101100001110": 113, "101100001111": 113, "10110001": 113, "1011000100": 113, "101100010000": 113, "101100010001": 113, "101100010010": 113, "1011000101": 113, "101100010101": 113, "101100010110": 113, "101100010111": 113, "1011000110": 113, "101100011000": 113, "101100011001": 113, "101100011010": 113, "101100011011": 113, "1011000111": 113, "101100011100": 113, "101100011101": 113, "101100011110": 113, "101100011111": 113, "10110010": 113, "1011001000": 113, "101100100000": 113, "101100100001": 113, "101100100010": 113, "101100100011": 113, "1011001001": 113, "101100100100": 113, "101100100111": 113, "1011001010": 113, "101100101000": 113, "101100101001": 113, "101100101010": 113, "101100101011": 113, "1011001011": 113, "101100101100": 113, "101100101111": 113, "10110011": 113, "1011001100": 113, "101100110000": 113, "101100110001": 113, "101100110010": 113, "101100110011": 113, "1011001101": 113, "101100110100": 113, "101100110101": 113, "101100110110": 113, "101100110111": 113, "1011001110": 113, "101100111001": 113, "101100111010": 113, "101100111011": 113, "1011001111": 113, "101100111101": 113, "101100111110": 113, "101100111111": 113, "101101": 113, "10110100": 113, "1011010000": 113, "101101000000": 113, "101101000001": 113, "101101000010": 113, "101101000011": 113, "1011010001": 113, "101101000100": 113, "101101000101": 113, "101101000110": 113, "101101000111": 113, "1011010010": 113, "101101001000": 113, "101101001001": 113, "101101001010": 113, "101101001011": 113, "1011010011": 113, "101101001100": 113, "101101001101": 113, "101101001110": 113, "101101001111": 113, "10110101": 113, "1011010100": 113, "101101010000": 113, "101101010001": 113, "101101010010": 113, "101101010011": 113, "1011010101": 113, "101101010100": 113, "101101010110": 113, "101101010111": 113, "1011010110": 113, "101101011000": 113, "101101011001": 113, "101101011011": 113, "1011010111": 113, "101101011100": 113, "101101011101": 113, "101101011111": 113, "10110110": 113, "1011011000": 113, "101101100000": 113, "101101100001": 113, "101101100011": 113, "1011011001": 113, "101101100100": 113, "101101100101": 113, "101101100110": 113, "101101100111": 113, "1011011010": 113, "101101101000": 113, "101101101001": 113, "101101101010": 113, "101101101011": 113, "1011011011": 113, "101101101100": 113, "101101101101": 113, "101101101110": 113, "101101101111": 113, "10110111": 113, "1011011100": 113, "101101110000": 113, "101101110001": 113, "101101110010": 113, "101101110011": 113, "1011011101": 113, "101101110100": 113, "101101110101": 113, "101101110110": 113, "101101110111": 113, "1011011110": 113, "101101111000": 113, "101101111001": 113, "101101111010": 113, "101101111011": 113, "1011011111": 113, "101101111100": 113, "101101111101": 113, "101101111110": 113, "101101111111": 113, "101110": 113, "10111000": 113, "1011100000": 113, "101110000000": 113, "101110000001": 113, "101110000010": 113, "101110000011": 113, "1011100001": 113, "101110000100": 113, "101110000101": 113, "101110000110": 113, "101110000111": 113, "1011100010": 113, "101110001000": 113, "101110001001": 113, "101110001010": 113, "101110001011": 113, "1011100011": 113, "101110001100": 113, "101110001101": 113, "101110001110": 113, "101110001111": 113, "10111001": 113, "1011100100": 113, "101110010000": 113, "101110010001": 113, "101110010010": 113, "101110010011": 113, "1011100101": 113, "101110010100": 113, "101110010101": 113, "101110010110": 113, "101110010111": 113, "1011100110": 113, "101110011000": 113, "101110011001": 113, "101110011010": 113, "101110011011": 113, "1011100111": 113, "101110011100": 113, "101110011110": 113, "101110011111": 113, "10111010": 113, "1011101000": 113, "101110100000": 113, "101110100010": 113, "101110100011": 113, "1011101001": 113, "101110100100": 113, "101110100101": 113, "101110100110": 113, "101110100111": 113, "1011101010": 113, "101110101000": 113, "101110101010": 113, "101110101011": 113, "1011101011": 113, "101110101100": 113, "101110101101": 113, "101110101110": 113, "101110101111": 113, "10111011": 113, "1011101100": 113, "101110110000": 113, "101110110001": 113, "101110110010": 113, "101110110011": 113, "1011101101": 113, "101110110100": 113, "101110110101": 113, "101110110110": 113, "101110110111": 113, "1011101110": 113, "101110111000": 113, "101110111001": 113, "101110111010": 113, "1011101111": 113, "101110111100": 113, "101110111101": 113, "101110111110": 113, "101110111111": 113, "101111": 113, "10111100": 113, "1011110000": 113, "101111000000": 113, "101111000001": 113, "101111000010": 113, "101111000011": 113, "1011110001": 113, "101111000100": 113, "101111000101": 113, "101111000110": 113, "101111000111": 113, "1011110010": 113, "101111001000": 113, "101111001001": 113, "101111001010": 113, "101111001011": 113, "1011110011": 113, "101111001100": 113, "101111001101": 113, "101111001110": 113, "101111001111": 113, "10111101": 113, "1011110100": 113, "101111010000": 113, "101111010010": 113, "101111010011": 113, "1011110101": 113, "101111010100": 113, "101111010110": 113, "101111010111": 113, "1011110110": 113, "101111011000": 113, "101111011001": 113, "101111011010": 113, "101111011011": 113, "1011110111": 113, "101111011100": 113, "101111011101": 113, "101111011110": 113, "10111110": 113, "1011111000": 113, "101111100000": 113, "101111100001": 113, "101111100010": 113, "101111100011": 113, "1011111001": 113, "101111100100": 113, "101111100101": 113, "101111100110": 113, "101111100111": 113, "1011111010": 113, "101111101000": 113, "101111101001": 113, "101111101010": 113, "101111101011": 113, "1011111011": 113, "101111101100": 113, "101111101101": 113, "101111101110": 113, "101111101111": 113, "10111111": 113, "1011111100": 113, "101111110000": 113, "101111110001": 113, "101111110010": 113, "101111110011": 113, "1011111101": 113, "101111110100": 113, "101111110101": 113, "101111110110": 113, "101111110111": 113, "1011111110": 113, "101111111000": 113, "101111111001": 113, "101111111010": 113, "101111111011": 113, "1011111111": 113, "101111111100": 113, "101111111101": 113, "101111111110": 113, "101111111111": 113, "1024": [8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 66, 72, 103, 110, 111, 112, 113], "1038": [13, 14, 16, 37, 94, 109], "104": [26, 27, 28, 94, 109], "1050": [13, 16, 37, 94, 109], "1057": [13, 16, 37, 94, 109], "10gib": 108, "11": [22, 35, 37, 39, 66, 95, 96, 102, 103, 104, 108, 113, 117, 118, 120, 121], "1100": 113, "110000": 113, "11000000": 113, "1100000000": 113, "110000000000": 113, "110000000001": 113, "110000000010": 113, "1100000001": 113, "110000000100": 113, "110000000101": 113, "110000000110": 113, "110000000111": 113, "1100000010": 113, "110000001000": 113, "110000001001": 113, "110000001010": 113, "110000001011": 113, "1100000011": 113, "110000001100": 113, "110000001101": 113, "110000001110": 113, "110000001111": 113, "11000001": 113, "1100000100": 113, "110000010000": 113, "110000010001": 113, "110000010010": 113, "110000010011": 113, "1100000101": 113, "110000010101": 113, "110000010110": 113, "110000010111": 113, "1100000110": 113, "110000011000": 113, "110000011001": 113, "110000011010": 113, "110000011011": 113, "1100000111": 113, "110000011100": 113, "110000011101": 113, "110000011110": 113, "110000011111": 113, "11000010": 113, "1100001000": 113, "110000100000": 113, "110000100001": 113, "110000100010": 113, "110000100011": 113, "1100001001": 113, "110000100110": 113, "110000100111": 113, "1100001010": 113, "110000101000": 113, "110000101001": 113, "110000101010": 113, "110000101011": 113, "1100001011": 113, "110000101100": 113, "110000101101": 113, "110000101110": 113, "110000101111": 113, "11000011": 113, "1100001100": 113, "110000110000": 113, "110000110001": 113, "110000110010": 113, "110000110011": 113, "1100001101": 113, "110000110100": 113, "110000110101": 113, "110000110110": 113, "1100001110": 113, "110000111000": 113, "110000111001": 113, "110000111010": 113, "110000111011": 113, "1100001111": 113, "110000111100": 113, "110000111101": 113, "110000111110": 113, "110000111111": 113, "110001": 113, "11000100": 113, "1100010000": 113, "110001000001": 113, "110001000010": 113, "110001000011": 113, "1100010001": 113, "110001000100": 113, "110001000101": 113, "110001000110": 113, "110001000111": 113, "1100010010": 113, "110001001010": 113, "110001001011": 113, "1100010011": 113, "110001001100": 113, "110001001101": 113, "110001001110": 113, "110001001111": 113, "11000101": 113, "1100010100": 113, "110001010000": 113, "110001010001": 113, "110001010010": 113, "110001010011": 113, "1100010101": 113, "110001010101": 113, "110001010110": 113, "110001010111": 113, "1100010110": 113, "110001011000": 113, "110001011001": 113, "110001011010": 113, "110001011011": 113, "1100010111": 113, "110001011100": 113, "110001011101": 113, "110001011110": 113, "110001011111": 113, "11000110": 113, "1100011000": 113, "110001100000": 113, "110001100001": 113, "110001100011": 113, "1100011001": 113, "110001100100": 113, "110001100101": 113, "110001100110": 113, "110001100111": 113, "1100011010": 113, "110001101000": 113, "110001101001": 113, "110001101010": 113, "110001101011": 113, "1100011011": 113, "110001101100": 113, "110001101101": 113, "110001101110": 113, "110001101111": 113, "11000111": 113, "1100011100": 113, "110001110000": 113, "110001110001": 113, "110001110010": 113, "110001110011": 113, "1100011101": 113, "110001110100": 113, "110001110101": 113, "110001110110": 113, "110001110111": 113, "1100011110": 113, "110001111000": 113, "110001111001": 113, "110001111010": 113, "110001111011": 113, "1100011111": 113, "110001111100": 113, "110001111101": 113, "110001111110": 113, "110001111111": 113, "110010": 113, "11001000": 113, "1100100000": 113, "110010000000": 113, "110010000001": 113, "110010000010": 113, "110010000011": 113, "1100100001": 113, "110010000100": 113, "110010000101": 113, "110010000110": 113, "110010000111": 113, "1100100010": 113, "110010001000": 113, "110010001010": 113, "110010001011": 113, "1100100011": 113, "110010001100": 113, "110010001101": 113, "110010001110": 113, "110010001111": 113, "11001001": 113, "1100100100": 113, "110010010000": 113, "110010010001": 113, "110010010010": 113, "110010010011": 113, "1100100101": 113, "110010010100": 113, "110010010101": 113, "110010010110": 113, "110010010111": 113, "1100100110": 113, "110010011000": 113, "110010011001": 113, "110010011010": 113, "110010011011": 113, "1100100111": 113, "110010011100": 113, "110010011101": 113, "110010011110": 113, "110010011111": 113, "11001010": 113, "1100101000": 113, "110010100000": 113, "110010100001": 113, "110010100010": 113, "110010100011": 113, "1100101001": 113, "110010100100": 113, "110010100101": 113, "110010100110": 113, "110010100111": 113, "1100101010": 113, "110010101001": 113, "110010101010": 113, "110010101011": 113, "1100101011": 113, "110010101100": 113, "110010101110": 113, "110010101111": 113, "11001011": 113, "1100101100": 113, "110010110000": 113, "110010110001": 113, "110010110010": 113, "110010110011": 113, "1100101101": 113, "110010110100": 113, "110010110101": 113, "110010110110": 113, "110010110111": 113, "1100101110": 113, "110010111000": 113, "110010111001": 113, "110010111010": 113, "110010111011": 113, "1100101111": 113, "110010111100": 113, "110010111101": 113, "110010111111": 113, "110011": 113, "11001100": 113, "1100110000": 113, "110011000001": 113, "110011000010": 113, "1100110001": 113, "110011000100": 113, "110011000101": 113, "110011000110": 113, "110011000111": 113, "1100110010": 113, "110011001001": 113, "110011001011": 113, "1100110011": 113, "110011001100": 113, "110011001101": 113, "110011001110": 113, "110011001111": 113, "11001101": 113, "1100110100": 113, "110011010001": 113, "110011010010": 113, "110011010011": 113, "1100110101": 113, "110011010100": 113, "110011010101": 113, "110011010110": 113, "1100110110": 113, "110011011000": 113, "110011011001": 113, "110011011010": 113, "110011011011": 113, "1100110111": 113, "110011011100": 113, "110011011101": 113, "110011011110": 113, "110011011111": 113, "11001110": 113, "1100111000": 113, "110011100000": 113, "110011100001": 113, "110011100010": 113, "110011100011": 113, "1100111001": 113, "110011100100": 113, "110011100101": 113, "110011100110": 113, "110011100111": 113, "1100111010": 113, "110011101001": 113, "110011101010": 113, "110011101011": 113, "1100111011": 113, "110011101100": 113, "110011101101": 113, "110011101110": 113, "110011101111": 113, "11001111": 113, "1100111100": 113, "110011110000": 113, "110011110001": 113, "110011110010": 113, "110011110011": 113, "1100111101": 113, "110011110100": 113, "110011110101": 113, "110011110110": 113, "110011110111": 113, "1100111110": 113, "110011111000": 113, "110011111001": 113, "110011111010": 113, "110011111011": 113, "1100111111": 113, "110011111100": 113, "110011111101": 113, "110011111110": 113, "110011111111": 113, "1101": 113, "110100": 113, "11010000": 113, "1101000000": 113, "110100000000": 113, "110100000010": 113, "110100000011": 113, "1101000001": 113, "110100000100": 113, "110100000101": 113, "110100000110": 113, "110100000111": 113, "1101000010": 113, "110100001000": 113, "110100001001": 113, "110100001010": 113, "110100001011": 113, "1101000011": 113, "110100001100": 113, "110100001101": 113, "110100001110": 113, "110100001111": 113, "11010001": 113, "1101000100": 113, "110100010000": 113, "110100010010": 113, "110100010011": 113, "1101000101": 113, "110100010100": 113, "110100010101": 113, "110100010111": 113, "1101000110": 113, "110100011000": 113, "110100011001": 113, "110100011010": 113, "110100011011": 113, "1101000111": 113, "110100011100": 113, "110100011110": 113, "110100011111": 113, "11010010": 113, "1101001000": 113, "110100100000": 113, "110100100001": 113, "110100100010": 113, "1101001001": 113, "110100100100": 113, "110100100101": 113, "110100100111": 113, "1101001010": 113, "110100101000": 113, "110100101001": 113, "110100101010": 113, "110100101011": 113, "1101001011": 113, "110100101100": 113, "110100101101": 113, "110100101110": 113, "110100101111": 113, "11010011": 113, "1101001100": 113, "110100110000": 113, "110100110001": 113, "110100110010": 113, "110100110011": 113, "1101001101": 113, "110100110100": 113, "110100110101": 113, "110100110110": 113, "110100110111": 113, "1101001110": 113, "110100111000": 113, "110100111001": 113, "110100111010": 113, "110100111011": 113, "1101001111": 113, "110100111100": 113, "110100111101": 113, "110100111110": 113, "110100111111": 113, "110101": 113, "11010100": 113, "1101010000": 113, "110101000000": 113, "110101000001": 113, "110101000010": 113, "110101000011": 113, "1101010001": 113, "110101000100": 113, "110101000101": 113, "110101000110": 113, "110101000111": 113, "1101010010": 113, "110101001000": 113, "110101001001": 113, "110101001010": 113, "110101001011": 113, "1101010011": 113, "110101001100": 113, "110101001101": 113, "11010101": 113, "1101010100": 113, "110101010000": 113, "110101010001": 113, "110101010010": 113, "110101010011": 113, "1101010101": 113, "110101010100": 113, "110101010101": 113, "110101010110": 113, "110101010111": 113, "1101010110": 113, "110101011000": 113, "110101011001": 113, "110101011010": 113, "110101011011": 113, "1101010111": 113, "110101011100": 113, "110101011101": 113, "110101011110": 113, "110101011111": 113, "11010110": 113, "1101011000": 113, "110101100000": 113, "110101100001": 113, "110101100010": 113, "110101100011": 113, "1101011001": 113, "110101100101": 113, "110101100110": 113, "110101100111": 113, "1101011010": 113, "110101101000": 113, "110101101010": 113, "110101101011": 113, "1101011011": 113, "110101101100": 113, "110101101101": 113, "110101101110": 113, "110101101111": 113, "11010111": 113, "1101011100": 113, "110101110000": 113, "110101110001": 113, "110101110010": 113, "110101110011": 113, "1101011101": 113, "110101110100": 113, "110101110101": 113, "110101110111": 113, "1101011110": 113, "110101111000": 113, "110101111001": 113, "110101111010": 113, "110101111011": 113, "1101011111": 113, "110101111100": 113, "110101111101": 113, "110101111110": 113, "110101111111": 113, "110110": 113, "11011000": 113, "1101100000": 113, "110110000000": 113, "110110000001": 113, "110110000010": 113, "110110000011": 113, "1101100001": 113, "110110000100": 113, "110110000101": 113, "110110000110": 113, "110110000111": 113, "1101100010": 113, "110110001000": 113, "110110001001": 113, "110110001010": 113, "110110001011": 113, "1101100011": 113, "110110001100": 113, "110110001101": 113, "110110001110": 113, "110110001111": 113, "11011001": 113, "1101100100": 113, "110110010001": 113, "110110010010": 113, "1101100101": 113, "110110010100": 113, "110110010101": 113, "110110010110": 113, "110110010111": 113, "1101100110": 113, "110110011000": 113, "110110011001": 113, "110110011010": 113, "110110011011": 113, "1101100111": 113, "110110011100": 113, "110110011101": 113, "110110011110": 113, "110110011111": 113, "11011010": 113, "1101101000": 113, "110110100000": 113, "110110100001": 113, "110110100010": 113, "110110100011": 113, "1101101001": 113, "110110100100": 113, "110110100101": 113, "110110100110": 113, "110110100111": 113, "1101101010": 113, "110110101000": 113, "110110101001": 113, "110110101010": 113, "110110101011": 113, "1101101011": 113, "110110101100": 113, "110110101101": 113, "110110101110": 113, "110110101111": 113, "11011011": 113, "1101101100": 113, "110110110000": 113, "110110110001": 113, "110110110011": 113, "1101101101": 113, "110110110101": 113, "110110110110": 113, "110110110111": 113, "1101101110": 113, "110110111000": 113, "110110111001": 113, "110110111010": 113, "110110111011": 113, "1101101111": 113, "110110111100": 113, "110110111101": 113, "110110111110": 113, "110110111111": 113, "110111": 113, "11011100": 113, "1101110000": 113, "110111000000": 113, "110111000001": 113, "110111000010": 113, "110111000011": 113, "1101110001": 113, "110111000100": 113, "110111000101": 113, "110111000110": 113, "110111000111": 113, "1101110010": 113, "110111001000": 113, "110111001010": 113, "110111001011": 113, "1101110011": 113, "110111001100": 113, "110111001101": 113, "110111001110": 113, "110111001111": 113, "11011101": 113, "1101110100": 113, "110111010000": 113, "110111010001": 113, "110111010011": 113, "1101110101": 113, "110111010100": 113, "110111010101": 113, "110111010110": 113, "110111010111": 113, "1101110110": 113, "110111011000": 113, "110111011001": 113, "110111011010": 113, "110111011011": 113, "1101110111": 113, "110111011100": 113, "110111011101": 113, "110111011110": 113, "110111011111": 113, "11011110": 113, "1101111000": 113, "110111100000": 113, "110111100001": 113, "110111100010": 113, "110111100011": 113, "1101111001": 113, "110111100100": 113, "110111100101": 113, "110111100110": 113, "110111100111": 113, "1101111010": 113, "110111101000": 113, "110111101001": 113, "110111101010": 113, "1101111011": 113, "110111101100": 113, "110111101101": 113, "110111101110": 113, "110111101111": 113, "11011111": 113, "1101111100": 113, "110111110000": 113, "110111110001": 113, "110111110010": 113, "110111110011": 113, "1101111101": 113, "110111110100": 113, "110111110110": 113, "110111110111": 113, "1101111110": 113, "110111111000": 113, "110111111001": 113, "110111111010": 113, "1101111111": 113, "110111111100": 113, "110111111101": 113, "110111111110": 113, "110111111111": 113, "1103": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 84, 94, 104, 105, 109], "1110": 113, "111000": 113, "11100000": 113, "1110000000": 113, "111000000000": 113, "111000000001": 113, "111000000010": 113, "111000000011": 113, "1110000001": 113, "111000000100": 113, "111000000101": 113, "111000000111": 113, "1110000010": 113, "111000001000": 113, "111000001001": 113, "111000001010": 113, "111000001011": 113, "1110000011": 113, "111000001100": 113, "111000001101": 113, "111000001110": 113, "111000001111": 113, "11100001": 113, "1110000100": 113, "111000010000": 113, "111000010001": 113, "111000010010": 113, "111000010011": 113, "1110000101": 113, "111000010100": 113, "111000010101": 113, "111000010110": 113, "111000010111": 113, "1110000110": 113, "111000011000": 113, "111000011001": 113, "111000011010": 113, "111000011011": 113, "1110000111": 113, "111000011100": 113, "111000011101": 113, "111000011110": 113, "111000011111": 113, "11100010": 113, "1110001000": 113, "111000100000": 113, "111000100001": 113, "111000100010": 113, "111000100011": 113, "1110001001": 113, "111000100100": 113, "111000100101": 113, "111000100110": 113, "111000100111": 113, "1110001010": 113, "111000101000": 113, "111000101001": 113, "111000101011": 113, "1110001011": 113, "111000101100": 113, "111000101101": 113, "111000101110": 113, "111000101111": 113, "11100011": 113, "1110001100": 113, "111000110000": 113, "111000110001": 113, "111000110010": 113, "111000110011": 113, "1110001101": 113, "111000110100": 113, "111000110101": 113, "111000110110": 113, "111000110111": 113, "1110001110": 113, "111000111010": 113, "111000111011": 113, "1110001111": 113, "111000111100": 113, "111000111101": 113, "111000111110": 113, "111000111111": 113, "111001": 113, "11100100": 113, "1110010000": 113, "111001000001": 113, "111001000010": 113, "111001000011": 113, "1110010001": 113, "111001000100": 113, "111001000101": 113, "111001000110": 113, "111001000111": 113, "1110010010": 113, "111001001000": 113, "111001001010": 113, "111001001011": 113, "1110010011": 113, "111001001100": 113, "111001001101": 113, "111001001110": 113, "111001001111": 113, "11100101": 113, "1110010100": 113, "111001010001": 113, "1110010101": 113, "111001010100": 113, "111001010101": 113, "111001010110": 113, "111001010111": 113, "1110010110": 113, "111001011000": 113, "111001011010": 113, "111001011011": 113, "1110010111": 113, "111001011100": 113, "111001011101": 113, "111001011110": 113, "111001011111": 113, "11100110": 113, "1110011000": 113, "111001100000": 113, "111001100001": 113, "111001100010": 113, "111001100011": 113, "1110011001": 113, "111001100100": 113, "111001100101": 113, "111001100111": 113, "1110011010": 113, "111001101000": 113, "111001101001": 113, "111001101011": 113, "1110011011": 113, "111001101100": 113, "111001101101": 113, "111001101110": 113, "111001101111": 113, "11100111": 113, "1110011100": 113, "111001110000": 113, "111001110010": 113, "111001110011": 113, "1110011101": 113, "111001110100": 113, "111001110101": 113, "111001110110": 113, "111001110111": 113, "1110011110": 113, "111001111000": 113, "111001111001": 113, "111001111010": 113, "1110011111": 113, "111001111100": 113, "111001111101": 113, "111001111110": 113, "111001111111": 113, "111010": 113, "11101000": 113, "1110100000": 113, "111010000000": 113, "111010000001": 113, "111010000010": 113, "111010000011": 113, "1110100001": 113, "111010000100": 113, "111010000101": 113, "111010000110": 113, "111010000111": 113, "1110100010": 113, "111010001000": 113, "111010001001": 113, "111010001010": 113, "111010001011": 113, "1110100011": 113, "111010001100": 113, "111010001101": 113, "111010001110": 113, "111010001111": 113, "11101001": 113, "1110100100": 113, "111010010000": 113, "111010010001": 113, "111010010010": 113, "1110100101": 113, "111010010100": 113, "111010010101": 113, "111010010110": 113, "111010010111": 113, "1110100110": 113, "111010011001": 113, "111010011010": 113, "111010011011": 113, "1110100111": 113, "111010011100": 113, "111010011101": 113, "111010011110": 113, "111010011111": 113, "11101010": 113, "1110101000": 113, "111010100000": 113, "111010100001": 113, "111010100010": 113, "111010100011": 113, "1110101001": 113, "111010100100": 113, "111010100101": 113, "111010100110": 113, "111010100111": 113, "1110101010": 113, "111010101000": 113, "111010101001": 113, "111010101010": 113, "111010101011": 113, "1110101011": 113, "111010101100": 113, "111010101101": 113, "111010101110": 113, "111010101111": 113, "11101011": 113, "1110101100": 113, "111010110000": 113, "111010110010": 113, "1110101101": 113, "111010110101": 113, "111010110110": 113, "111010110111": 113, "1110101110": 113, "111010111000": 113, "111010111001": 113, "111010111010": 113, "111010111011": 113, "1110101111": 113, "111010111100": 113, "111010111101": 113, "111010111110": 113, "111010111111": 113, "111011": 113, "11101100": 113, "1110110000": 113, "111011000001": 113, "111011000010": 113, "111011000011": 113, "1110110001": 113, "111011000100": 113, "111011000101": 113, "111011000110": 113, "1110110010": 113, "111011001000": 113, "111011001001": 113, "111011001010": 113, "1110110011": 113, "111011001100": 113, "111011001101": 113, "111011001110": 113, "111011001111": 113, "11101101": 113, "1110110100": 113, "111011010000": 113, "111011010001": 113, "111011010010": 113, "111011010011": 113, "1110110101": 113, "111011010101": 113, "111011010110": 113, "111011010111": 113, "1110110110": 113, "111011011001": 113, "111011011010": 113, "111011011011": 113, "1110110111": 113, "111011011100": 113, "111011011101": 113, "111011011110": 113, "111011011111": 113, "11101110": 113, "1110111000": 113, "111011100000": 113, "111011100001": 113, "111011100010": 113, "111011100011": 113, "1110111001": 113, "111011100100": 113, "111011100101": 113, "111011100110": 113, "111011100111": 113, "1110111010": 113, "111011101000": 113, "111011101001": 113, "111011101010": 113, "1110111011": 113, "111011101100": 113, "11101111": 113, "1110111100": 113, "111011110000": 113, "111011110001": 113, "111011110010": 113, "111011110011": 113, "1110111101": 113, "111011110100": 113, "111011110101": 113, "111011110110": 113, "111011110111": 113, "1110111110": 113, "111011111000": 113, "111011111001": 113, "111011111010": 113, "1110111111": 113, "111011111100": 113, "111011111101": 113, "111011111110": 113, "111011111111": 113, "11109375": 112, "1111": 113, "111100": 113, "11110000": 113, "1111000000": 113, "111100000000": 113, "111100000001": 113, "111100000010": 113, "111100000011": 113, "1111000001": 113, "111100000101": 113, "111100000111": 113, "1111000010": 113, "111100001000": 113, "111100001001": 113, "111100001010": 113, "1111000011": 113, "111100001100": 113, "111100001101": 113, "111100001110": 113, "111100001111": 113, "11110001": 113, "1111000100": 113, "111100010000": 113, "111100010001": 113, "111100010010": 113, "111100010011": 113, "1111000101": 113, "111100010100": 113, "111100010110": 113, "111100010111": 113, "1111000110": 113, "111100011001": 113, "111100011010": 113, "1111000111": 113, "111100011100": 113, "111100011101": 113, "111100011110": 113, "111100011111": 113, "11110010": 113, "1111001000": 113, "111100100001": 113, "111100100011": 113, "1111001001": 113, "111100100100": 113, "111100100101": 113, "111100100110": 113, "111100100111": 113, "1111001010": 113, "111100101000": 113, "111100101001": 113, "111100101010": 113, "111100101011": 113, "1111001011": 113, "111100101100": 113, "111100101101": 113, "111100101111": 113, "11110011": 113, "1111001100": 113, "111100110000": 113, "111100110001": 113, "111100110010": 113, "111100110011": 113, "1111001101": 113, "111100110100": 113, "111100110101": 113, "111100110110": 113, "111100110111": 113, "1111001110": 113, "111100111000": 113, "111100111001": 113, "111100111010": 113, "111100111011": 113, "1111001111": 113, "111100111100": 113, "111100111101": 113, "111100111111": 113, "111101": 113, "11110100": 113, "1111010000": 113, "111101000000": 113, "111101000001": 113, "111101000010": 113, "111101000011": 113, "1111010001": 113, "111101000100": 113, "111101000101": 113, "111101000110": 113, "111101000111": 113, "1111010010": 113, "111101001000": 113, "111101001001": 113, "111101001010": 113, "111101001011": 113, "1111010011": 113, "111101001100": 113, "111101001101": 113, "111101001110": 113, "111101001111": 113, "11110101": 113, "1111010100": 113, "111101010001": 113, "111101010010": 113, "111101010011": 113, "1111010101": 113, "111101010100": 113, "111101010101": 113, "111101010110": 113, "111101010111": 113, "1111010110": 113, "111101011000": 113, "111101011001": 113, "111101011010": 113, "111101011011": 113, "1111010111": 113, "111101011100": 113, "111101011101": 113, "111101011111": 113, "11110110": 113, "1111011000": 113, "111101100000": 113, "111101100001": 113, "111101100010": 113, "111101100011": 113, "1111011001": 113, "111101100100": 113, "111101100101": 113, "111101100110": 113, "111101100111": 113, "1111011010": 113, "111101101000": 113, "111101101001": 113, "111101101010": 113, "111101101011": 113, "1111011011": 113, "111101101100": 113, "111101101101": 113, "111101101110": 113, "111101101111": 113, "11110111": 113, "1111011100": 113, "111101110000": 113, "111101110001": 113, "111101110010": 113, "1111011101": 113, "111101110100": 113, "111101110101": 113, "111101110110": 113, "111101110111": 113, "1111011110": 113, "111101111000": 113, "111101111001": 113, "111101111010": 113, "111101111011": 113, "1111011111": 113, "111101111100": 113, "111101111101": 113, "111101111110": 113, "111110": 113, "11111000": 113, "1111100000": 113, "111110000001": 113, "111110000010": 113, "111110000011": 113, "1111100001": 113, "111110000101": 113, "111110000110": 113, "111110000111": 113, "1111100010": 113, "111110001000": 113, "111110001001": 113, "111110001010": 113, "111110001011": 113, "1111100011": 113, "111110001100": 113, "111110001101": 113, "111110001110": 113, "111110001111": 113, "11111001": 113, "1111100100": 113, "111110010000": 113, "111110010001": 113, "111110010010": 113, "111110010011": 113, "1111100101": 113, "111110010100": 113, "111110010101": 113, "111110010110": 113, "111110010111": 113, "1111100110": 113, "111110011000": 113, "111110011001": 113, "111110011010": 113, "111110011011": 113, "1111100111": 113, "111110011100": 113, "111110011101": 113, "111110011110": 113, "111110011111": 113, "11111010": 113, "1111101000": 113, "111110100000": 113, "111110100001": 113, "111110100010": 113, "111110100011": 113, "1111101001": 113, "111110100100": 113, "111110100101": 113, "111110100110": 113, "111110100111": 113, "1111101010": 113, "111110101000": 113, "111110101001": 113, "111110101010": 113, "111110101011": 113, "1111101011": 113, "111110101100": 113, "111110101101": 113, "111110101110": 113, "111110101111": 113, "11111011": 113, "1111101100": 113, "111110110000": 113, "111110110001": 113, "111110110010": 113, "1111101101": 113, "111110110100": 113, "111110110101": 113, "111110110110": 113, "111110110111": 113, "1111101110": 113, "111110111001": 113, "111110111010": 113, "1111101111": 113, "111110111100": 113, "111110111101": 113, "111110111110": 113, "111110111111": 113, "111111": 113, "11111100": 113, "1111110000": 113, "111111000000": 113, "111111000001": 113, "111111000011": 113, "1111110001": 113, "111111000100": 113, "111111000101": 113, "111111000110": 113, "111111000111": 113, "1111110010": 113, "111111001000": 113, "111111001001": 113, "111111001010": 113, "1111110011": 113, "111111001100": 113, "111111001101": 113, "111111001110": 113, "11111101": 113, "1111110100": 113, "111111010000": 113, "111111010001": 113, "111111010010": 113, "111111010011": 113, "1111110101": 113, "111111010100": 113, "111111010101": 113, "111111010110": 113, "111111010111": 113, "1111110110": 113, "111111011001": 113, "111111011010": 113, "111111011011": 113, "1111110111": 113, "111111011100": 113, "111111011101": 113, "111111011111": 113, "11111110": 113, "1111111000": 113, "111111100000": 113, "111111100001": 113, "111111100010": 113, "111111100011": 113, "1111111001": 113, "111111100100": 113, "111111100101": 113, "111111100110": 113, "111111100111": 113, "1111111010": 113, "111111101000": 113, "111111101001": 113, "111111101010": 113, "111111101011": 113, "1111111011": 113, "111111101100": 113, "111111101101": 113, "111111101110": 113, "11111111": 113, "1111111100": 113, "111111110000": 113, "111111110001": 113, "111111110011": 113, "1111111101": 113, "111111110101": 113, "111111110110": 113, "111111110111": 113, "1111111110": 113, "111111111001": 113, "111111111010": 113, "111111111011": 113, "1111111111": 113, "111111111100": 113, "111111111101": 113, "111111111110": 113, "111111111111": 113, "1124dea6": 95, "1126": [26, 27, 28, 39, 40, 94, 109], "112924461364746": 111, "11296": [104, 105], "11390625": 112, "11918377876281738": 97, "12": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 95, 96, 97, 102, 103, 104, 105, 113, 115, 116, 118], "121": [83, 84], "1234": [35, 36, 37, 39, 40, 80, 111, 112], "123456789": 90, "12632": 10, "13": [31, 35, 37, 39, 65, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "1318": [85, 92], "13362": 10, "134": [104, 105], "13633": 10, "13663": 10, "13798852223458338": 102, "14": [8, 33, 35, 37, 39, 95, 96, 102, 103, 113, 115, 117, 118, 120, 121], "147029497872627": 97, "148": 92, "15": [8, 13, 16, 35, 37, 39, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 120], "15435567451920718": 111, "1564": 110, "16": [8, 13, 16, 36, 37, 40, 74, 89, 94, 95, 96, 97, 102, 103, 109, 113, 116, 117, 118, 121], "1673219548164675": 101, "168313277922573": 101, "17": [91, 92, 95, 96, 102, 103, 113, 115], "172289539329696": 97, "1745": [13, 16, 37], "18": [85, 95, 96, 100, 102, 103, 104, 108, 113, 117, 118, 121], "180": [111, 112], "18552246": 112, "1881575747569315": 101, "18947754": 112, "19": [92, 95, 96, 102, 113, 120], "19790249326075138": 97, "1a88": 103, "1dd9": 102, "1e": [8, 33], "2": [1, 3, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 45, 62, 70, 75, 77, 78, 80, 81, 83, 85, 91, 93, 95, 97, 100, 102, 103, 107, 108, 110, 112, 113, 114, 116, 117, 118], "20": [22, 95, 96, 102, 113, 116], "200": [97, 121], "2000": 1, "2009": 77, "2014": [104, 108], "20150909134357": 77, "2018": 83, "2019": [26, 27, 28, 29, 30, 35, 36, 39, 40, 94, 109], "2020": [13, 16, 37, 94, 109], "2021": [26, 27, 28, 94, 109], "2022": [32, 45, 94, 109], "2023": [13, 16, 37, 94, 109], "2024": [13, 16, 37, 104, 105], "2025": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113], "21": [22, 85, 92, 95, 96, 97, 100, 102, 113, 115], "21b6": 97, "21b9813e": 99, "22": [95, 96, 102, 113, 117, 118, 121], "22320252039195257": 101, "22486816": 112, "22513184": 112, "227": 113, "23": [95, 96, 102, 113, 120], "230": 103, "230e": 110, "232": 113, "234": 113, "2345": [35, 36, 37, 39, 40, 80, 111, 112], "235": 113, "236": 113, "23881348": 112, "23912109": 112, "24": [13, 16, 37, 94, 95, 96, 102, 109, 113], "24087891": 112, "241": 113, "24118652": 112, "245": 113, "246": 113, "247": 113, "24784668": 112, "248": 113, "2481": [13, 16, 37], "24847656": 112, "24871094": 112, "249": 113, "2494873": 112, "25": [95, 96, 102, 113, 117, 118, 121], "250": [103, 113], "2505127": 112, "25082031": 112, "251": 113, "25199219": 112, "25215332": 112, "2522": [13, 16, 37], "255": 113, "257": 113, "258": 113, "26": [77, 95, 96, 102, 113], "260": [26, 27, 28, 39, 40, 90, 94, 103, 109], "262": 113, "263": [26, 27, 28, 39, 40, 94, 109, 113], "265": 113, "266": 113, "267": 113, "26807036": 111, "269": 113, "27": [95, 96, 102, 113], "27038305454194134": 101, "271": 113, "278": 113, "279": 113, "28": [95, 96, 102, 118], "2808939301105586": [116, 118], "284": 103, "28ed356f7ce": 112, "29": [95, 96, 102], "291": 113, "294": 113, "2m": [14, 15, 37, 102], "2x2": 81, "3": [1, 2, 8, 10, 14, 15, 20, 22, 26, 27, 28, 35, 37, 39, 40, 78, 90, 93, 98, 99, 101, 103, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120], "30": [98, 102, 103, 113], "300": 97, "3000": 8, "31": 102, "31398926": 112, "31601074": 112, "32": [8, 95, 98, 102, 113], "32109188489774": 111, "329523031752482": 97, "33": [92, 102], "34": [14, 15, 37, 95, 102], "3456": [35, 36, 37, 39, 40, 80, 111, 112], "35": [102, 113], "36": [95, 96, 102], "360066d83be5": 113, "364": [26, 27, 28, 39, 40, 94, 109], "37": [96, 97, 98, 99, 102, 103], "38": [92, 99, 100, 101, 102], "3839790096319764": 111, "3859474674771424": 111, "386402633793108": 97, "38a876c3aa6": 95, "39": [1, 55, 72, 102, 103, 110], "3ed04a5b": 101, "4": [1, 14, 15, 32, 35, 37, 39, 45, 62, 74, 78, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 111, 112, 113, 115, 116, 120], "40": [1, 101, 102, 111], "400": 97, "4077": 111, "4096": [95, 96, 97, 98, 99, 100, 101, 102, 115, 116, 117, 118, 120, 121], "40c8": 98, "40de": 113, "41": [102, 112, 113], "42": [102, 103, 112, 113], "4237": 100, "4238": 99, "427f": 110, "42d9": 102, "43": [102, 113], "4332": 111, "43ea": 96, "44": 102, "4440": 95, "4449412381649017": 101, "445a": 110, "4461": 112, "45": 102, "46": [85, 93, 96, 102, 104, 110], "4661": 96, "466b": 113, "468cd537440d": 95, "47": [96, 102, 118], "471": 113, "478": 113, "478f": 112, "47b7": 112, "47ba": 113, "47e4": 101, "48": [102, 111], "481": 113, "483": 113, "485": 113, "486": 113, "488": 113, "489": 113, "48c9": 112, "48ec": 100, "49": [102, 113, 114, 119], "490": 113, "491": 113, "4912": 101, "492": 113, "493": 113, "494": 113, "4940": 102, "495": 113, "496": 113, "496b": 111, "497": 113, "498": 113, "499": 113, "49b5": 110, "4a5f": 95, "4aec": 111, "4b5b": 98, "4c3a": 103, "4cfb": 103, "4d31cc63f8de": 100, "4d47": 99, "4dce": 113, "4de4": 97, "4e22": 98, "4ed3": 110, "4f37": 113, "4squar": [89, 90], "5": [1, 13, 16, 22, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 83, 94, 95, 96, 97, 99, 101, 102, 103, 109, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122], "50": [96, 97, 102, 113], "500": 97, "5000": 8, "502": 113, "5029296875": 100, "503": 113, "504": 113, "50435fa1f470": 113, "507": 113, "508": 113, "5082742267102862": 111, "509": [103, 113], "51": [102, 113, 114, 119], "510": 113, "511": 113, "513": 113, "5135024996604418": 111, "514": 113, "515": [103, 113], "516": 113, "517": 113, "5189998149871826": [116, 118], "52": [102, 113], "520": 113, "521": 113, "522": 113, "525": 113, "526": 113, "527": 113, "528": 113, "529": 113, "53": [96, 102, 113], "530": 113, "531": 113, "532": 113, "533": 113, "534": 113, "535": 113, "536": 113, "536ec2f3d4d2": 110, "538": 113, "539": 113, "54": [99, 101, 102, 113], "541": 113, "543": 113, "546": 113, "549b61b5": 99, "54e1ae9d": 111, "55": [13, 16, 37, 102, 113], "553": 113, "56": [102, 112, 113], "5678": [35, 36, 37, 39, 40, 80, 111, 112], "57": [102, 113], "5707963267948966": [22, 45], "58": [102, 111, 113], "5820": [13, 16, 37], "59": [96, 102, 111, 113], "596969000988257": 97, "5983": 113, "5a697ead": 113, "5cb62c06": 111, "5db4": 111, "5e3d": 101, "5eb9": 95, "5j": 22, "6": [1, 35, 37, 39, 95, 96, 97, 99, 101, 102, 103, 111, 112, 113, 115, 116, 117, 118, 120, 121], "60": [1, 102, 113], "61": [102, 113], "6109279879927635": 102, "6152701844495818": 112, "62": [102, 113], "621f": 112, "626937605477437": 111, "63": [102, 113], "64": [74, 102, 113], "6437": [26, 27, 28, 39, 40, 94, 109], "643856189774724": 114, "6475495044229558": 111, "65": [102, 113], "6528076258572665": 112, "66": [102, 113], "6604": 111, "664761515876241": 97, "66c94dbe2766": 111, "66d523fcdc8c": 103, "67": [102, 113], "6789": [35, 36, 37, 39, 40, 80, 111, 112], "68": [102, 113], "69": [102, 113], "6a0d": 95, "6a96": 101, "6d615b106c6f": 103, "6d7880c38533": 98, "6ec1d67a": 111, "6f8dc2bc": 100, "6fb394ff": 96, "7": [1, 13, 14, 16, 22, 35, 37, 39, 66, 90, 94, 95, 96, 99, 101, 102, 103, 104, 105, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121], "70": [102, 113], "7005196866767761": 111, "705": 90, "7070313622088674": 111, "70710678": 22, "70710678j": 22, "71": [102, 113], "7109257598326952": 102, "71cf": 103, "72": [102, 113], "73": 102, "74": [102, 113], "7406b3d4": 112, "7453": 112, "7499999999999999": 97, "75": [102, 113], "7527598582755046": 111, "7581205764785741": 111, "76": [102, 113], "77": [102, 113], "78": 102, "7890": [35, 36, 37, 39, 40, 80, 111, 112], "79": [102, 113], "7da5176e7328": 97, "7dcbf9f8f86c": 113, "8": [1, 3, 4, 5, 6, 8, 26, 27, 28, 32, 45, 70, 83, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "80": [77, 102, 113], "8052574760648189": 101, "81": [102, 113], "812148797361683": 101, "814b": 101, "81ea": 96, "82": [102, 113], "828e7d": [104, 105], "8290993797779084": 101, "83": [102, 113], "834c3b6e": 102, "84": [102, 113], "84375": 97, "847c": 111, "8487": 98, "85": 102, "8562": 103, "85bd": 95, "86": [102, 113], "865": 108, "86fbbb943c2c": 96, "87": 102, "870f8f09": 112, "88": 102, "8818": 96, "8881217a": 112, "89": 102, "8928": 111, "8ad8": 110, "8daa": 99, "8dad": 100, "8e9c": 95, "8f17": 111, "9": [1, 13, 16, 37, 90, 94, 95, 96, 97, 102, 103, 108, 109, 111, 112, 113, 122], "90": [102, 110, 113], "9049": 112, "91": 102, "9145039558410644": 111, "919951114654541": 111, "92": 102, "92238dd2ccb7": 98, "92cd": 99, "93": 102, "930edf5f": 97, "936970641157721": 111, "94": 102, "9410695778509498": 111, "9461940705953849": [116, 118], "94655b56": 102, "9484": 103, "95": 102, "950f79accbe9": 96, "96": 102, "97": 102, "9700": 99, "971ea758": 103, "9758100861424293": 111, "9777667474746704": 101, "97ba": 98, "98": 102, "99": [26, 27, 28, 29, 30, 35, 36, 39, 40, 102], "9915713779294193": 100, "995a79003818": 113, "9999999999999999": 97, "99f2": 113, "9a696592": 100, "9c5e": 97, "9fc9": 113, "A": [3, 4, 17, 26, 27, 28, 29, 30, 33, 34, 35, 36, 38, 39, 40, 45, 49, 50, 52, 54, 55, 58, 59, 61, 62, 77, 85, 87, 90, 91, 97, 115, 116, 117, 118, 120, 121], "And": [14, 15, 22, 35, 37, 62, 85, 90, 92, 99, 101, 102, 116, 118], "As": [26, 27, 28, 39, 40, 92, 94, 109], "At": [62, 83, 110, 111, 112], "But": [14, 15, 22, 26, 27, 28, 33, 35, 37, 39, 40, 89, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 113], "By": [13, 16, 37, 94, 106, 109], "For": [8, 10, 13, 16, 35, 37, 39, 62, 77, 85, 90, 91, 92, 94, 95, 96, 98, 100, 102, 108, 109, 122], "If": [1, 2, 3, 4, 5, 6, 8, 13, 15, 26, 27, 30, 32, 33, 34, 35, 36, 37, 39, 40, 48, 55, 56, 59, 60, 61, 62, 64, 72, 73, 77, 79, 80, 85, 88, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 116, 117, 118, 121], "In": [13, 16, 37, 92, 94, 104, 105, 109, 113, 116, 117, 118, 121, 122], "It": [2, 4, 8, 11, 13, 15, 17, 18, 20, 22, 35, 36, 37, 39, 40, 41, 44, 47, 60, 61, 62, 64, 72, 77, 81, 85, 90, 91, 92, 95, 96, 99, 101, 103, 105, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "NOT": [2, 4, 90, 115, 116, 120], "Near": [104, 105], "No": [12, 26, 31, 35, 39, 45, 61, 72, 85, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "Not": [31, 43, 46, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "ONE": 33, "Or": [92, 110, 111, 112], "That": [1, 2], "The": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "Then": [14, 15, 92, 107], "There": [2, 4, 28, 83, 92, 104], "These": [60, 66], "To": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 92, 104, 105, 107], "Will": [35, 37, 39], "With": [83, 97], "_": [13, 14, 15, 37, 45, 90, 102, 103, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "__": 90, "__name__": 4, "__qiskit_version__": 1, "__sphinx_immaterial_type_var__v__": 69, "__sphinx_immaterial_type_var__v__ma": 72, "_a": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61], "_all": 4, "_arg": 61, "_asdict": 99, "_assembl": 8, "_ba": 72, "_circuitt": 9, "_configur": 8, "_default_opt": 8, "_e": [49, 50, 69, 70, 71, 72], "_execute_circuits_job": 8, "_expinst": [50, 69], "_i": 45, "_inputt": 26, "_itemt": 33, "_j": 45, "_k": [4, 45], "_local": [69, 72], "_m": [103, 113], "_ma": 7, "_oa": 72, "_onetim": 67, "_option": 8, "_properti": 8, "_r": 61, "_ra": [7, 69, 72], "_rc": 48, "_ri": 48, "_run_circuit": 8, "_run_job": 8, "_set_configuration_opt": 8, "_set_opt": 8, "_set_properties_opt": 8, "_side_product_rz_g": 96, "_side_product_rz_op": 96, "_sliceablet": 33, "_t": 4, "_v": 4, "a01": 93, "a01_backend_wrapp": 92, "a18": 112, "a1f2": 110, "a22c": 100, "a2b990a1": 113, "a3cd": 113, "a88d": 101, "a8df": 110, "a_num": 33, "aa02": 112, "aarch64": 108, "aau4963": [26, 27, 28, 39, 40, 94, 109], "ab": [13, 15, 17, 21, 26, 27, 28, 37, 39, 40, 94, 109], "abbrevi": [11, 105], "abc": [55, 77], "abcd": 77, "abi": 108, "abil": [13, 16, 37, 94, 109], "about": [35, 104], "absenc": [26, 27, 28, 39, 40, 94, 109], "abstract": [13, 16, 26, 27, 28, 37, 39, 40, 48, 61, 72, 82, 85, 94, 104, 105, 109], "ac88": 110, "acceler": [92, 108], "accept_distributed_result": 8, "access": [85, 99, 101, 104, 105, 108, 110, 111, 112], "accessor": 72, "accord": 8, "accur": [13, 16, 37, 52, 94, 109], "accuraci": [13, 14, 15, 23, 37, 97, 102], "accuracy_predict_epsilon": [14, 15, 37, 97, 102, 112], "accuracy_predict_epsilon_calc": 15, "accuracy_prob_comp_delta": [13, 14, 15, 37, 97, 102, 112], "accuracy_prob_comp_delta_calc": 15, "accuracyprobabilitycalculationerror": 23, "accuracyprobabilitywarn": 23, "achiev": 62, "acknowledg": 106, "activ": [10, 33], "actual": [15, 26, 27, 29, 30, 33, 35, 36, 37, 39, 40, 62, 83, 95, 96, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 120, 121], "actual_accuracy_prob_comp_delta": 15, "actual_num_qubit": [33, 37, 39, 101, 102], "actual_num_qubits_1": [35, 99], "actual_num_qubits_2": [35, 99], "actual_qubit": 35, "actual_qubits_1": 35, "actual_qubits_2": 35, "ad": [4, 13, 16, 37, 87, 92, 95, 96, 103, 115, 116], "adam": [32, 45, 94, 109], "adapt": [104, 105], "add": [1, 4, 8, 32, 51, 55, 56, 72, 85, 87, 110, 111, 112, 113], "add_backend": 85, "add_onli": 87, "add_or_reduc": 32, "add_seri": 87, "addit": [61, 77, 104], "addition": [104, 105, 116, 118], "ade8": 112, "adopt": [11, 105], "advanc": 109, "advantag": [13, 16, 37, 94, 109], "advent": [59, 60, 62, 95, 96, 97, 98, 99, 100, 101, 102, 103], "adventur": [59, 62, 72], "advisor": [104, 105], "ae02a9f75b6d": 100, "aer": [8, 85, 91, 93, 108], "aer_gpu": 92, "aer_job": 8, "aer_provid": 92, "aer_simul": [69, 72, 92, 95, 96, 98, 99, 100, 101, 102, 103], "aer_simulator_density_matrix": 92, "aer_simulator_extended_stabil": 92, "aer_simulator_gpu": 92, "aer_simulator_matrix_product_st": 92, "aer_simulator_stabil": 92, "aer_simulator_statevector": 92, "aer_simulator_superop": 92, "aer_simulator_unitari": 92, "aerbackend": 8, "aerbackendrunarg": 8, "aererror": 8, "aerjob": 8, "aerprovid": [85, 92], "aersimul": [69, 72, 92, 95, 96, 98, 99, 100, 101, 102, 103], "affect": [27, 30, 116, 117, 118, 121], "after": [1, 2, 4, 6, 13, 16, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 57, 61, 62, 63, 64, 65, 68, 69, 94, 104, 105, 107, 109, 110, 111, 112, 113], "after_lock": 69, "afterward": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 63, 64, 68, 69, 72, 103, 113], "again": [4, 92], "ahead": 3, "aij": [13, 15, 17, 21, 37], "al": [26, 27, 28, 39, 40, 94, 109], "algorithm": [14, 15, 37, 77, 102], "alia": [1, 7, 8, 12, 17, 18, 20, 21, 26, 29, 45, 66, 67, 78, 85], "align": [104, 105], "all": [2, 3, 4, 11, 17, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 50, 62, 65, 69, 72, 77, 80, 93, 94, 104, 108, 115, 117, 120, 121, 122], "all_argu": [37, 70], "all_counts_progress_01": [114, 115, 116, 117, 118, 119, 120, 121], "all_counts_progress_02": [115, 116, 117, 118, 120, 121], "all_exps_contain": 50, "all_manu": [110, 111, 112], "all_system": 26, "all_system_sourc": [26, 39, 40, 101, 111, 116], "all_trace_rho_by_einsum_aij_bji_to_ab_jax": 17, "all_trace_rho_by_einsum_aij_bji_to_ab_numpi": 17, "allcount": 65, "allow": [3, 6, 33, 104, 105], "allow_nan": 6, "allow_sample_measur": 8, "allsystem_s": 33, "allsystemsourc": [27, 40, 118], "alltracerhomethod": [13, 15, 17, 37], "alreadi": [4, 11, 13, 16, 37, 55, 72, 85, 92, 94, 105, 109, 115, 116, 117, 118, 120, 121, 122], "also": [2, 8, 11, 13, 15, 16, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 64, 72, 78, 81, 85, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 119, 122], "althoght": 113, "although": [77, 108], "amd64": 108, "american": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "amount": 122, "an": [1, 3, 8, 13, 15, 16, 26, 27, 28, 33, 35, 36, 37, 39, 40, 49, 57, 59, 82, 88, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113], "analys": 63, "analysescontain": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 58, 61, 63, 64], "analysi": [7, 11, 27, 53, 58, 61, 63, 69, 71, 72, 102, 117, 118], "analysis_arg": [35, 36, 37, 39, 40, 69, 72], "analysis_inst": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61], "analysis_nam": [35, 36, 37, 39, 40, 69, 71, 72, 110, 111, 112], "analysis_num": [95, 96, 98, 99, 100, 101, 102, 103], "analysiscontain": [58, 95, 96, 98, 100], "analysisprototyp": [48, 58], "analyz": [7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 69, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110], "analyzearg": [7, 69], "ancestor": 62, "andrea": [13, 16, 26, 27, 28, 37, 39, 40, 94, 109], "andrew": [32, 45, 94, 109], "android": 108, "angl": 45, "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 22, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 57, 58, 59, 60, 61, 62, 66, 67, 69, 70, 72, 77, 86, 89, 94, 95, 98, 100, 103, 110], "anlyz": [111, 112, 113], "annot": 108, "anoth": [11, 26, 83, 95, 96, 98, 99, 105], "answer": [44, 47, 103, 114, 119], "anthor": 83, "anymor": [8, 122], "anywher": 86, "ap": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "api": [26, 27, 29, 30, 35, 62, 92, 115, 116, 117, 118, 120, 121], "append": [4, 6, 97, 114, 115, 116, 117, 118, 119, 120, 121], "appendix": 93, "appl": 108, "appli": [13, 16, 37, 41, 62, 94, 104, 105, 109], "applic": [13, 16, 26, 27, 28, 37, 39, 40, 94, 109, 114, 119], "approach": [108, 109], "appropri": 108, "approxim": [13, 16, 37, 94, 109], "approximation_degre": 9, "apr": [32, 45, 94, 109], "ar": [2, 4, 6, 8, 10, 11, 13, 16, 22, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 60, 61, 66, 69, 71, 72, 77, 78, 83, 85, 89, 91, 92, 94, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "arbitrari": [26, 27, 28, 39, 40, 77, 94, 109], "architectur": 106, "archiv": 77, "arg": [11, 49, 56, 57, 58, 59, 61, 62, 64, 69, 89, 90, 95, 96, 97, 98, 99, 100, 101, 102, 103, 114, 115, 116, 117, 118, 119, 120, 121], "arg_list": 89, "args_list": 89, "argsmultimain": 66, "argument": [4, 6, 7, 8, 9, 10, 25, 57, 60, 61, 62, 63, 64, 68, 69, 70, 72, 77, 80, 89, 95, 96, 98, 100, 113, 115, 116, 117, 118, 120, 121], "arguments_inst": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61], "arguments_or_commons_input": 59, "argumentsprototyp": [44, 47, 59, 63, 64], "arm": 108, "arm64": 108, "around": [45, 85, 92], "arrai": [14, 17, 22, 37, 41, 74, 81, 96, 97, 102, 112], "arrang": 33, "articl": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "arug": [44, 47], "ascii": [6, 89, 90], "assign": [116, 118], "assisti": [104, 105], "assum": [115, 117, 120, 121], "attent": [35, 61], "attribut": 65, "aug": 83, "author": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "auto": [1, 2, 61, 69, 110], "auto_report": 110, "autofil": [60, 66], "autom": 104, "automat": [8, 10, 69, 95, 96, 98, 100, 108, 110], "avaibility_statesheet": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "avaibility_statu": 31, "avail": [4, 11, 17, 31, 45, 61, 85, 86, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "availability_status_print": 31, "available_a": 85, "available_aer_callsign": 85, "available_backend": [85, 92], "available_backends_callsign": 85, "available_devic": 92, "available_fak": 85, "available_fake_callsign": 85, "available_ibmq": 85, "available_ibmq_callsign": 85, "availablil": 12, "averag": [8, 14, 33], "average_classical_snapshots_rho": [14, 37, 97, 102], "avoid": [8, 85, 90], "aws_bracket": [66, 69, 72], "axi": [41, 45], "azure_q": [66, 69, 72], "b": [26, 27, 28, 29, 30, 35, 36, 39, 40, 77, 92], "b1b0a867caf5": 101, "b311": 113, "b51b41d4abc6": 112, "b618": 98, "b628": 100, "b638afd0": 113, "b6d7": 102, "b813": 111, "b83b": 110, "b9c3": 102, "b_k": 20, "ba": 77, "baacdf111fdf": 99, "back": 85, "backend": [8, 9, 10, 11, 12, 13, 17, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 64, 66, 69, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 119, 122], "backend_name_gett": 85, "backend_opt": [8, 85], "backend_typ": 12, "backend_wrapp": 92, "backendcallsigndict": 85, "backenddict": 85, "backendmanag": 92, "backendnam": 85, "backendv": 92, "backendv1": [85, 92], "backendv2": [8, 85, 92], "backendwrapp": [85, 92], "backslash": [13, 16, 37], "backward": [8, 122], "bar": [13, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 72, 89, 90], "bar_ascii": [89, 90], "bar_format": [89, 90, 114, 115, 116, 117, 118, 119, 120, 121], "barless": 90, "base": [0, 10, 11, 23, 26, 27, 28, 39, 40, 48, 55, 74, 77, 78, 92, 94, 104, 108, 109, 115, 116, 117, 118, 120, 121], "base_run": [69, 72], "base_typ": 55, "baselin": [116, 118], "basepass": 9, "baserunarg": [8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 66, 69, 72], "basi": [13, 16, 37, 94, 109], "basic": [7, 14, 55, 108, 109, 110], "basic_provid": [8, 85, 92], "basic_simul": 92, "basica": [8, 85, 93], "basicaerbackendrunarg": 8, "basicaerjob": 8, "basicarg": [7, 112], "basicprovid": 93, "basicproviderjob": 8, "basicsimul": [8, 92], "basicsimulatorrunarg": 8, "basis_g": 9, "batched_shots_gpu": 8, "batched_shots_gpu_max_qubit": 8, "bd05ee31": 98, "bd7b": 111, "bdsk": [13, 16, 37], "beat": 2, "beauti": [1, 2], "becaus": [2, 4, 85, 92, 122], "beed": 110, "been": [8, 10, 13, 16, 35, 37, 61, 64, 65, 83, 85, 92, 94, 96, 104, 108, 109, 110, 111, 112, 122], "befor": [1, 15, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 60, 61, 63, 64, 67, 68, 69, 71, 103, 109, 115, 116, 117, 118, 120, 121], "beforeward": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 63, 64, 68, 69, 71, 72], "begin": [11, 22, 45, 62, 105], "being": [11, 95, 96, 98, 99, 100, 101, 102, 103, 105], "belong": 35, "below": [108, 122], "ben": [26, 27, 28, 39, 40, 94, 109], "beno": [13, 16, 37, 94, 109], "beno\u00eet": [13, 16, 26, 27, 28, 37, 39, 40, 94, 109], "bernhard": [32, 45, 94, 109], "best": [13, 18, 20, 37], "better": [1, 26, 27, 28, 39, 40, 94, 108, 109, 115, 116, 117, 118, 120, 121, 122], "between": [6, 10, 14, 26, 27, 28, 29, 30, 33, 35, 36, 37, 39, 40, 77, 94, 102, 109, 122], "beyond": 33, "bf7a": 112, "bigotimes_": 20, "bind": [8, 33], "bit": [33, 35, 37, 39], "bit_slic": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "bitlen": 33, "bitsstringrangeallsi": [27, 40, 118], "bitstr": [27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 115, 116, 117, 118, 120, 121, 122], "bitstring_map": [37, 39, 97, 101, 102, 111, 112], "bitstring_mapping_1": [35, 99], "bitstring_mapping_2": [35, 99], "bitstring_mapping_gett": 39, "bitstring_num": 33, "bitstring_rang": [27, 30, 33], "bitstring_range_allsi": 27, "bitstringrang": [27, 36, 40, 116, 117, 118, 121], "bji": [13, 15, 17, 21, 37], "bk": [94, 109], "bla": 4, "bla_exp": 62, "blabla_project": 62, "blatt": [26, 27, 28, 39, 40, 94, 109], "blbla_project": 62, "bloch": 81, "block": [8, 111, 112], "blocking_en": 8, "blocking_qubit": 8, "bodi": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 82, 94, 109], "bool": [1, 3, 4, 6, 7, 8, 9, 12, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 56, 57, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 86, 111, 112], "boolean": 90, "boolen": 90, "border": 83, "border_cond": 83, "both": [26, 27, 28, 39, 40, 72, 94, 108, 109], "bound": [9, 13, 14, 15, 16, 37, 94, 97, 109], "boundari": 83, "braill": 90, "branch": 8, "brave": 62, "brief": 94, "brydg": [26, 27, 28, 39, 40, 94, 109], "buffer": 6, "bug": 107, "build": [26, 27, 28, 35, 37, 39, 40, 41, 42, 45, 61, 66, 69, 72, 76, 94, 95, 96, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 122], "build_for_multiprocess": 61, "buildup": [26, 27, 28, 39, 40, 94, 109], "built": [61, 108], "c": [11, 26, 27, 28, 29, 30, 35, 36, 39, 40, 77, 105], "c0c935e8": 103, "c21e4f43": 110, "c5a781635f81": 99, "cach": 8, "cacul": 31, "calcium": [26, 27, 28, 39, 40, 94, 109], "calcul": [13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 61, 64, 74, 77, 94, 97, 102, 114, 115, 116, 117, 118, 119, 120, 121, 122], "call": [2, 6, 11, 26, 27, 28, 39, 40, 49, 51, 55, 56, 59, 61, 62, 69, 72, 88, 89, 92, 94, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "callabl": [1, 6, 9, 17, 89], "callback": 9, "calliop": [2, 4], "callsign": [85, 92], "can": [1, 2, 3, 8, 13, 14, 15, 16, 17, 18, 20, 26, 27, 29, 30, 35, 36, 37, 39, 40, 41, 61, 78, 80, 81, 88, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "cancel": 72, "candid": 97, "cannot": 108, "capsul": [0, 1, 3, 4, 5, 6, 115, 116, 117, 118, 120, 121], "capsuleerror": 0, "capsulevaluederror": 0, "capsulewarn": 0, "captur": 8, "carri": [26, 27, 28, 39, 40, 94, 109], "case": [11, 13, 14, 15, 16, 33, 37, 83, 89, 94, 102, 109, 114, 119], "cat": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112], "cat_2": [95, 96, 97], "cat_4": [95, 96, 97], "cat_6": [95, 96, 97], "cat_8": [95, 96, 97], "categori": 92, "caus": [1, 26, 27, 28, 39, 40, 62, 85, 92, 94, 109, 122], "ccf77541eb06": 110, "ccounts_process": 33, "cd": 107, "ceil": [14, 15, 37, 102], "cell": [18, 19, 20, 25, 26, 27, 29, 30, 36, 39, 40, 41, 42, 95, 96, 113, 115, 117, 118], "center": [104, 105], "chain": [26, 27, 28, 39, 40, 94, 109], "challeng": [104, 105], "chang": [11, 85, 104, 105], "chang2024": [104, 105], "channel": 15, "chao": [13, 16, 37, 94, 109], "chapter": [94, 109], "charact": [6, 26, 27, 28, 39, 40, 77, 90, 94, 109], "character": [13, 16, 26, 27, 28, 37, 39, 40, 94, 104, 105, 109], "check": [6, 15, 31, 33, 35, 61, 64, 77, 80, 85, 86, 91, 92, 104, 110, 111, 112, 122], "check_and_generate_for_single_circ": [76, 80], "check_circular": 6, "check_input_for_experi": [76, 80], "check_msg": 1, "cheng": [104, 105], "chengchi": [104, 105], "chi": [14, 15], "chi_": [14, 15], "chiao": [104, 105], "children": 122, "chip": 108, "choo": [83, 84], "choos": [83, 92], "chop_threshold": 8, "chosen": [13, 16, 37, 94, 109], "christian": [26, 27, 28, 39, 40, 94, 109], "christin": [26, 27, 28, 39, 40, 94, 109], "christoph": [26, 27, 28, 94, 109], "chuan": [104, 105], "chun": [104, 105], "chunk": 76, "chunk_swap_buffer_qubit": 8, "circuit": [8, 9, 20, 26, 27, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 59, 60, 61, 64, 66, 67, 69, 70, 71, 72, 75, 79, 80, 82, 83, 104, 105, 122], "circuit_method": [41, 42, 45], "circuit_method_compos": 39, "circuit_method_cor": 37, "circuit_method_core_v1": 40, "circuit_qasm": 60, "circuits_dict": [95, 96, 97, 103, 113], "circuits_map": 67, "circuits_num": 67, "circuitsmap": 67, "circuitsnum": 67, "circul": 62, "circular": 6, "citat": 106, "cite": [13, 16, 37, 104, 105], "cl": [6, 8, 115, 116, 117, 118, 120, 121], "clariti": 122, "class": [0, 1, 4, 6, 7, 8, 9, 10, 14, 23, 25, 26, 27, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 69, 72, 78, 82, 83, 85, 87, 88, 89, 90, 91, 110, 111, 112, 113, 115, 116, 117, 118, 120], "classic": [11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 33, 35, 37, 39, 40, 103, 115, 116, 120], "classical_regist": [26, 29, 35, 39, 99, 101, 111, 115, 116, 120], "classical_registers_actu": [14, 26, 29, 35, 37, 39, 97, 99, 101, 102, 111, 112, 115, 116, 120], "classical_registers_actually_all_si": [26, 39, 101, 111, 116], "classical_registers_all_si": [26, 39, 101, 111, 116], "classical_shadow": [11, 14, 15, 17, 18, 19, 20, 21, 22, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "classical_shadow_complex": 13, "classical_snapshots_rho": 15, "classicalshadow": 108, "classicalshadowbas": 14, "classicalshadowcomplex": [13, 14, 37], "classicalshadowerror": 23, "classicalshadowestim": [13, 14], "classicalshadowmeanrho": [13, 14], "classicalshadowpur": [13, 14], "classicalshadowpythonmethod": 17, "classicalshadowwarn": 23, "classifi": 8, "classmethod": [4, 8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 57, 59, 60, 61, 66, 67, 69], "claud": 22, "clear": [4, 57, 69], "clear_all_exps_result": 69, "clear_dupl": 4, "clear_result": 57, "clone": 107, "close": [6, 33, 35, 37, 39], "closefd": 6, "cluster": 83, "cmd": 86, "cmd_wrapper": 86, "code": [1, 2, 33, 92, 102, 111, 112], "coeffici": 81, "coher": [26, 27, 28, 39, 40, 94, 109], "coin": [11, 105], "coincid": 2, "collect": [37, 55, 72], "com": [10, 77, 85, 90, 92, 107], "combin": [2, 4, 11, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 105, 114, 119], "come": [109, 122], "command": [11, 107], "comment": 4, "committe": [104, 105], "common": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 57, 59, 60, 61, 62, 64, 70, 71], "commonparam": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 63, 64, 95, 96, 98, 99, 100, 101, 102, 103], "commonparamsdict": [59, 62, 63], "commonparamsreadreturn": [59, 63], "commons_d": [59, 63], "commons_dict": 59, "commun": [91, 92], "compar": [10, 77], "comparison": [13, 16, 37, 77, 94, 109, 122], "compat": [8, 91, 104, 108, 122], "compil": [35, 108], "complement": [14, 15, 26, 27, 28, 37, 39, 40, 94, 102, 109], "complet": [1, 2, 10, 13, 16, 37, 64, 69, 85, 92, 94, 109, 110, 111, 112], "complex": [2, 11, 13, 14, 15, 16, 37, 39, 40, 69, 70, 78, 81, 94, 102, 109], "complex128": [13, 14, 15, 17, 18, 19, 20, 21, 22, 37, 41, 81, 97, 102], "complic": 92, "complier": 107, "compon": [13, 15, 23, 37, 70], "compos": 75, "compress": [36, 37, 69, 72], "compress_overwrit": [69, 72], "comput": [13, 16, 24, 26, 27, 32, 37, 38, 39, 40, 44, 45, 47, 61, 83, 84, 94, 104, 105, 108, 109, 114, 119, 122], "concaten": [35, 37, 39], "concept": [11, 105], "conclud": 62, "condit": 83, "config": [1, 61, 67, 69, 110, 111, 112, 113], "config_list": [69, 72, 110, 111, 112, 113], "configcontain": 1, "configlisttyp": [7, 72], "configur": [3, 10, 35, 72, 85, 110, 111, 112, 113], "confirm": [35, 37, 39], "conflict": [85, 90, 92], "confus": [103, 122], "consecut": 77, "consid": [33, 85, 92, 108, 110, 111, 112, 113], "consist": 108, "construct": [13, 16, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 62, 76, 83, 94, 109], "consum": 122, "contain": [1, 11, 16, 17, 24, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 50, 52, 53, 54, 55, 56, 58, 59, 61, 63, 69, 71, 72, 73, 91, 114, 115, 116, 117, 118, 119, 120, 121], "container_field": 59, "content": [1, 2, 3, 5, 10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 61, 69, 72, 102, 110, 111, 112], "content_inst": 48, "content_typ": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48], "continu": [95, 96, 97, 102], "control": [13, 16, 37, 44, 47, 61, 78, 94, 109], "conveni": [85, 93, 106, 122], "convert": [4, 37, 48, 59, 81, 102], "copi": [55, 56, 97], "copilot": [1, 2, 22], "copy_circuit": [51, 55, 56], "core": [11, 18, 19, 24, 25, 26, 27, 29, 30, 32, 74, 91], "corespond": 72, "correct": 88, "correctli": 64, "correl": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 94, 109], "correspond": [14, 15, 17, 35, 37, 50, 95, 96, 102], "corresponding_rho": [14, 15, 37, 97, 102], "could": 108, "count": [10, 13, 18, 19, 20, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 57, 61, 65, 75, 90, 114, 115, 116, 117, 118, 119, 120, 121], "count_us": 40, "counterpart": [26, 27, 28, 39, 40, 94, 109], "countless": 72, "counts_list": 33, "counts_list_recount": 33, "counts_list_recount_pyrust": 33, "counts_list_vectorize_pyrust": 33, "counts_num": [26, 29, 35, 39, 99, 101, 111, 115, 116, 120], "counts_process": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "counts_us": [35, 36, 37, 39, 40, 99, 101, 111], "countsnum": [27, 36, 40, 117, 118, 121], "coupling_map": 9, "couplingmap": 9, "cover": [10, 35, 37, 39, 111, 112], "cpu": [8, 17, 27, 30, 36, 40, 74, 89, 92, 108, 110, 111, 112, 113, 116, 117, 118, 121], "cpu_count": [27, 30, 36, 40, 74, 89, 116, 117, 118, 121], "cpu_count_unsaf": 89, "cpython": [102, 108], "crash": 10, "creat": [4, 6, 11, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 57, 59, 60, 61, 64, 72, 78, 92, 104, 105, 110, 111, 112, 113], "create_afterward": [57, 63], "create_beforeward": [60, 63], "create_config": 35, "create_exp_arg": [59, 63], "create_exp_common": [59, 63], "create_exp_outfield": [59, 63], "create_json_dump_arg": 6, "create_open_arg": [4, 6], "create_print_arg": 6, "create_save_loc": [63, 64], "cross": [32, 45, 94, 108, 109], "cu11": [91, 108], "cuda": [86, 108], "cuda11": 108, "cuquantum": 8, "curent": 14, "curl": 107, "current": [4, 11, 13, 18, 20, 37, 77, 87, 104, 105, 110, 111, 112, 113], "current_exp": 37, "current_id": 69, "current_tim": 87, "curri": [11, 105], "curt": [83, 84], "custatevec": 8, "custatevec_en": 8, "custom": [6, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 52, 54, 55, 56, 58, 61, 72, 88, 95, 96, 98, 99, 100, 101, 102, 103], "custom_and_main_kwarg": [35, 61, 72], "custom_kwarg": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61], "cycl": [33, 118], "cycling_slic": 33, "cycling_slice_rust": 33, "cython": [12, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 77, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "cython_avail": 12, "czgate": 83, "d": [77, 115, 117, 120, 121], "d5a6": 96, "d5f5c17d": 110, "d707": 100, "daeb6a2d": 101, "dagcircuit": 9, "dagger": 20, "damerau": 77, "damerau_levenshtein_dist": [76, 77], "damerau_levenshtein_distance_pi": [76, 77], "dameraulevenshtein": 77, "danger": 62, "data": [2, 4, 11, 13, 16, 20, 37, 57, 60, 61, 62, 67, 78, 94, 102, 109, 122], "data_arg": 59, "dataneccessari": [65, 67], "datastatedepend": 65, "datatim": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48], "date": [13, 16, 37], "datetim": [11, 48, 59, 66, 70, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112], "datetimedict": [59, 66, 87, 95, 96, 98, 99, 100, 101, 102, 103], "datetimedict_process": [68, 70], "dd": 87, "dd13bffcae02": 102, "de8d": 113, "dead": 2, "dead_beats_lurking_now": 2, "deadbeat": [2, 4], "deadlock": 102, "deal": [59, 122], "dealt": 59, "debug": 122, "decid": [14, 37, 62, 64, 66, 75, 102, 122], "decide_folder_and_filenam": [63, 64], "decim": 90, "declar": [7, 8, 9, 69, 72], "decompos": [75, 76], "decomposit": [104, 105], "decompress": 69, "decor": 88, "dedic": [2, 4, 23, 33, 59], "deed": 77, "def": [8, 9, 88, 97, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "default": [1, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 17, 18, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 55, 56, 57, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 83, 85, 86, 88, 89, 90, 99, 101, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "default_all_trace_rho_method": 17, "default_bar_format": 90, "default_encod": 6, "default_ensure_ascii": 6, "default_ind": 6, "default_json_dump_arg": [4, 6], "default_mod": 6, "default_open_arg": [4, 6], "default_pool_s": [74, 89], "default_postprocessing_backend": 12, "default_print_arg": [4, 6], "default_process_backend": [13, 24, 25, 26, 27, 29, 30, 32, 35, 36, 37, 39, 40, 41, 42, 45, 114, 115, 116, 117, 118, 119, 120, 121], "default_python_method": 17, "default_setup": 90, "default_valu": [57, 59, 60, 66], "defin": [14, 15, 33, 37, 45, 61, 102], "definit": [2, 4, 6], "degre": [24, 26, 27, 28, 29, 30, 33, 34, 35, 36, 38, 39, 40, 94, 98, 100, 104, 105, 109, 110, 114, 116, 117, 118, 119, 120, 121], "degree_4_8": [98, 100], "degree_handl": 33, "degree_handler_rust": 33, "delet": 77, "delta": [13, 14, 15, 23, 37, 102], "demonstr": [26, 27, 28, 39, 40, 94, 109, 110, 111, 112, 113], "denot": [35, 36, 37, 39, 40, 45, 111, 112], "densiti": 81, "density_matrix_to_bloch": [76, 81], "depart": [104, 105], "depend": [10, 11, 85, 92, 106, 107], "deplor": [115, 116, 117, 118, 120, 121], "depolar": [26, 27, 28, 39, 40, 94, 109, 115, 116, 117, 118, 120, 121], "depolarizing_error_mitg": 26, "depr": [12, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "deprec": [8, 10, 23, 27, 30, 31, 36, 37, 40, 48, 59, 65, 85, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "deprecated_fields_convert": [37, 48], "depth": [104, 105], "deriv": [11, 105], "desc": [90, 114, 115, 116, 117, 118, 119, 120, 121], "descript": [1, 13, 16, 26, 27, 29, 30, 35, 37, 40, 90, 94, 109, 115, 116, 117, 118, 120, 121], "descriptor": 6, "design": 77, "desir": [13, 16, 37, 89, 94, 109], "detail": [92, 104], "detect": 79, "determin": [33, 61], "determint": 33, "develop": [13, 16, 37, 94, 104, 105, 109], "deviat": [26, 27, 29, 35, 36, 39, 40, 115, 116, 117, 118, 120], "devic": [8, 13, 16, 37, 92, 94, 104, 105, 108, 109], "devw": 107, "dict": [1, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 85, 87, 90, 95, 96, 102, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121], "dict_kei": [97, 102, 110, 111, 112], "dictionari": [3, 4, 6, 8, 14, 18, 21, 22, 26, 27, 29, 30, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 52, 54, 55, 56, 58, 59, 61, 62, 66, 69, 71, 72, 81, 85, 87, 91, 102, 115, 116, 117, 118, 120, 121], "did": 103, "didn": [2, 4], "differ": [10, 13, 16, 26, 27, 28, 35, 37, 39, 40, 62, 85, 89, 94, 96, 109, 122], "difficult": [13, 16, 37, 94, 109], "dim": 15, "dim_check": 15, "dimens": 15, "dimer": [104, 105], "direct": [13, 18, 19, 20, 25, 33, 37, 41, 42, 45, 92, 94], "directli": [35, 37, 39], "directori": [110, 111, 112, 113], "disabl": [9, 27, 30, 36, 40, 116, 117, 118, 121], "disclaim": 108, "discuss": [13, 16, 37, 94, 104, 105, 109], "disord": [26, 27, 28, 39, 40, 94, 109], "displai": [88, 92], "distanc": [33, 77], "distantli": [13, 16, 37, 94, 109], "distinct": [13, 16, 37, 94, 109, 115, 116, 120], "distribut": [43, 74, 89, 108], "distro": [104, 108], "ditribut": 33, "divid": [1, 81, 85], "divider_field": 1, "divider_length": 1, "divis": 11, "do": [45, 90, 92, 108, 110, 111, 112, 113, 122], "doc": 92, "docstr": 90, "document": [90, 109, 122], "doe": [1, 2, 4, 24, 26, 27, 28, 30, 34, 35, 38, 39, 40, 41, 42, 59, 87, 92, 94, 95, 96, 98, 100, 103, 109, 114, 119], "doesn": 110, "doi": [13, 14, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 84, 94, 104, 105, 109], "don": [8, 103, 108], "done": [110, 111, 112, 113], "doubl": 8, "download": 107, "draw": [60, 75, 79, 103], "drawn": 79, "drop": 85, "dt": 9, "dtype": [13, 14, 15, 17, 18, 19, 20, 21, 22, 37, 41, 81, 97, 102], "due": [14, 15, 37, 81, 92, 102, 108, 122], "dummi": [10, 31, 44, 47, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 122], "dummy_cas": [114, 119], "dummyx1": 62, "dummyx2": 62, "dummyxn": 62, "dummyz": 62, "dummyz1": [48, 62], "dummyz2": [48, 62], "dummyzm": [48, 62], "dump": [3, 4, 6], "duplic": [4, 33, 55, 56, 72, 95, 96, 98, 99, 100, 101, 102, 103], "duplicated_case01": [95, 96, 98, 99, 100, 101, 102, 103], "dure": [27, 35, 36, 37, 39, 40, 72, 110, 111, 112, 113, 118], "dyanmicwavecontainerbydict": [51, 55], "dynam": [8, 26, 27, 28, 39, 40, 55, 94, 104, 105, 109], "e": [26, 27, 28, 77, 92, 94, 107, 109], "e22aeb6ca98f": 111, "e4364f05aeaa": 112, "e83": 111, "e8f88e25": 110, "e906": 96, "e9d0f6c504f": 112, "ea14": 99, "each": [13, 17, 21, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 47, 57, 59, 61, 65, 66, 67, 69, 72, 74, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "earbud": 2, "earli": [104, 105], "easi": [1, 115, 116, 117, 118, 120, 121], "easier": 92, "easili": [11, 13, 16, 37, 61, 94, 105, 109, 122], "easy_dummi": [115, 116, 117, 118, 120, 121], "easy_repr_modify_wrapp": 1, "easycompress": 69, "easydecompress": 69, "eb99dea9": 96, "ech": [11, 105], "echo": [11, 24, 29, 30, 34, 35, 36, 98, 99, 105, 119, 120, 121], "echo_cel": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "echo_cell_2": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "echo_cell_2_pi": 29, "echo_cell_2_rust": 29, "echo_cell_pi": 30, "echo_cell_rust": 30, "echo_cor": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "echo_core_2": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "echocel": [29, 35, 36, 99, 120, 121], "echolisten": [11, 98, 99], "echolistenbas": 11, "echolistenhadamard": [11, 34], "echolistenhadamardanalysi": 34, "echolistenhadamardanalyzearg": 34, "echolistenhadamardargu": [34, 98], "echolistenhadamardexperi": [34, 98], "echolistenhadamardmeasurearg": 34, "echolistenhadamardoutputarg": 34, "echolistenrandom": [11, 35], "echolistenrandomizedanalysi": 35, "echolistenrandomizedanalyzearg": 35, "echolistenrandomizedargu": [35, 36, 99], "echolistenrandomizedexperi": [35, 99], "echolistenrandomizedmeasurearg": 35, "echolistenrandomizedoutputarg": [35, 36], "echolistenrandomizedv1": [11, 36], "echolistenrandomizedv1analysi": 36, "echolistenrandomizedv1analyzearg": 36, "echolistenrandomizedv1argu": 36, "echolistenrandomizedv1experi": 36, "echolistenrandomizedv1measurearg": 36, "echolistenrandomizedv1outputarg": 36, "echosd": [29, 35, 36, 99, 120, 121], "effect": 10, "effici": [13, 16, 37, 77, 94, 109, 110, 111, 112, 113, 122], "einsum": [13, 15, 17, 21, 37], "einsum_aij_bji_to_ab": 17, "einsum_aij_bji_to_ab_jax": [13, 15, 17, 21, 37], "einsum_aij_bji_to_ab_numpi": [13, 15, 17, 21, 37], "einsum_ij_ji": [13, 17, 21, 37], "either": [13, 17, 18, 20, 37, 45], "elaps": [90, 114, 115, 116, 117, 118, 119, 120, 121], "elben": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 94, 109], "elben2023": [13, 16, 37, 94, 109], "element": [15, 27, 40, 58, 62, 74, 118], "elhanalysi": 98, "elhanalysiscont": [34, 98], "elhanalysisinput": [34, 98], "elif": 8, "elranalysi": 99, "elranalysiscont": [35, 99], "elranalysisinput": [35, 99], "elrv1analysiscont": 36, "elrv1analysisinput": 36, "els": [8, 86, 97, 111, 112, 116, 118], "emhanalysi": 100, "emhanalysiscont": [38, 100], "emhanalysisinput": [38, 100], "emoji": [11, 105], "emploi": [104, 105], "empti": [60, 95, 96, 103], "emranalysi": 101, "emranalysiscont": [39, 101], "emranalysisinput": [39, 101], "emrv1analysiscont": 40, "emrv1analysisinput": 40, "emul": 108, "enable_trunc": 8, "encod": [3, 4, 5, 6, 26, 27, 28, 39, 40, 70, 94, 109], "encount": [104, 105], "encourag": [114, 119], "end": [1, 2, 6, 22, 33, 45], "energi": [13, 16, 37, 94, 109], "engin": [26, 27, 28, 39, 40, 94, 109], "enough": 33, "ensembl": 33, "ensemble_cel": 33, "ensemble_cell_rust": 33, "ensur": 62, "ensure_ascii": 6, "ent": [11, 105], "entangl": [11, 13, 16, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 82, 83, 84, 104, 105, 119, 120, 121], "entangle_entropi": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "entangle_entropy_v1": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "entangled_entropi": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "entangled_entropy_2": 28, "entangled_entropy_cor": 27, "entangled_entropy_core_2": 26, "entangled_entropy_core_2_allrust": 26, "entangled_entropy_core_2_pyrust": 26, "entangled_entropy_core_allrust": 27, "entangled_entropy_core_pycyrust": 27, "entangled_entropy_v1": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "entangledentropyresult": [26, 115, 116], "entangledentropyresultmitig": [26, 39, 116], "entangledentropyreturn": [26, 115], "entir": [94, 122], "entropi": [11, 13, 14, 16, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 44, 47, 97, 104, 105, 120, 121], "entropy_cor": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "entropy_core_2": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "entropyallsi": [26, 27, 39, 40, 101, 111, 116, 118], "entropymeasur": [11, 98, 100, 101, 110, 111], "entropymeasurehadamard": [11, 38], "entropymeasurehadamardanalysi": 38, "entropymeasurehadamardanalyzearg": 38, "entropymeasurehadamardargu": [34, 38, 100], "entropymeasurehadamardexperi": [38, 98, 100], "entropymeasurehadamardmeasurearg": [38, 110], "entropymeasurehadamardoutputarg": 38, "entropymeasurerandom": [11, 39], "entropymeasurerandomizedanalysi": 39, "entropymeasurerandomizedanalyzearg": 39, "entropymeasurerandomizedargu": [35, 36, 37, 39, 40, 101], "entropymeasurerandomizedexperi": [39, 101], "entropymeasurerandomizedmeasurearg": [39, 111], "entropymeasurerandomizedoutputarg": [39, 40], "entropymeasurerandomizedv1": [11, 40], "entropymeasurerandomizedv1analysi": 40, "entropymeasurerandomizedv1analyzearg": 40, "entropymeasurerandomizedv1argu": 40, "entropymeasurerandomizedv1experi": 40, "entropymeasurerandomizedv1measurearg": 40, "entropymeasurerandomizedv1outputarg": 40, "entropyrandomizedanalysi": [39, 40], "entropyrandomizedexperi": [39, 40], "entropyrandomizedmeasur": 122, "entropyrandomizedmeasurev1": 122, "entropysd": [26, 27, 39, 40, 101, 111, 115, 116, 117, 118], "entropysdallsi": [26, 27, 39, 40, 101, 111, 116, 118], "enumer": [110, 111, 112, 114, 119], "environ": [85, 86, 92, 108], "eprint": [26, 27, 28, 39, 40, 94, 109], "epsilon": [14, 15, 37, 102], "epsilon_upperbound": [14, 15, 97], "eq": 90, "equal": [33, 80, 90], "equat": [13, 14, 15, 20, 26, 37, 45, 102], "err": 92, "error": [0, 6, 10, 12, 15, 23, 26, 27, 28, 31, 33, 39, 40, 61, 85, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 117, 119, 120, 121, 122], "error_mitig": 28, "error_statu": 31, "errorr": [26, 27, 39, 40, 101, 111, 116, 118], "escap": 6, "esitim": [14, 102], "esitimation_of_given_oper": 13, "esitm": [13, 14, 15, 37, 102], "especi": 122, "essenti": [13, 16, 37, 94, 109], "estim": [13, 14, 15, 16, 17, 37, 61, 64, 94, 97, 102, 109], "estimate_of_given_oper": [14, 15, 37, 97, 102, 112], "estimate_trace_method": [13, 37], "estimatiton": 102, "et": [26, 27, 28, 39, 40, 94, 109], "even": [1, 2, 4, 32, 83, 108], "event": 87, "eventnam": 87, "everi": 4, "everyth": [44, 47, 103], "evolut": [11, 29, 30, 35, 36, 104, 105, 120, 121], "evolv": [26, 27, 28, 39, 40, 94, 109], "exactli": [104, 105], "exampl": [8, 13, 16, 35, 37, 39, 44, 61, 62, 83, 94, 96, 109, 110, 111, 112], "except": [31, 35, 75, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "except_decor": 11, "exchang": 77, "exclud": 85, "excut": 110, "execut": [10, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 57, 59, 60, 66, 67, 72, 86, 104, 105, 122], "executor": 8, "exist": [4, 8, 11, 26, 27, 39, 40, 55, 56, 72, 78, 85, 87, 105, 108], "existed_all_system": [26, 27, 116, 118], "existedallsysteminfo": [26, 116], "existedallsysteminfoinput": 26, "existingallsystemsourc": [27, 116, 118], "existingprocessbackendlabel": [26, 27, 29, 35, 115, 120], "exp": [15, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 67, 69, 70, 72, 78, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "exp1": [95, 96, 97, 98, 99, 100, 101, 102, 103], "exp1_files_info": [95, 96, 97, 98, 99, 100, 101, 102, 103], "exp1_id": [95, 96, 97, 98, 99, 100, 101, 102, 103], "exp2": [95, 96, 98, 99, 100, 101, 102, 103], "exp_id": [37, 49, 59, 61, 62, 64, 72, 95, 96, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "exp_id_process": [63, 64], "exp_inst": 113, "exp_nam": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 62, 64, 72, 95, 96, 98, 99, 100, 101, 102, 103], "exp_rz_gat": 96, "exp_rz_op": 96, "expect": [10, 13, 14, 15, 16, 21, 24, 37, 94, 102, 109, 115, 116, 120], "expect_rho": 37, "expectation_process": [16, 97], "experi": [8, 10, 11, 13, 16, 24, 25, 26, 27, 28, 29, 30, 32, 33, 50, 51, 57, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 77, 78, 80, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 109, 114, 115, 119, 120], "experienc": 122, "experiment": [11, 26, 27, 28, 39, 40, 55, 94, 105, 109], "experiment_contain": 71, "experiment_hadamard": [98, 99, 100, 110], "experiment_id": 8, "experiment_inst": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 69, 72], "experiment_magnetsquar": 96, "experiment_random": [99, 101, 111], "experiment_shadow": [97, 102, 112], "experiment_workflow": [103, 113], "experiment_writ": [68, 71], "experiment_zdir_magnet_squar": 95, "experimentcontain": [49, 50, 51, 69, 71, 72], "experimentcontainerwrapp": [50, 51, 72], "experimentprototyp": [35, 48, 49, 61, 63, 64, 65, 69, 70, 72], "experiments_wrapp": 51, "expkeys_of_multi_exps1": [110, 111, 112], "explanatori": 77, "exploit": [13, 16, 37, 94, 109], "explor": [13, 16, 37, 94, 104, 105, 109], "exponenti": 122, "export": [3, 4, 10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 56, 57, 58, 59, 60, 61, 63, 66, 67, 69, 70, 71, 72, 78, 79], "export_circuit": 60, "export_len": 1, "export_loc": [66, 67, 69, 78], "export_set": 62, "export_transpiled_circuit": [60, 61, 69, 70, 71, 72], "exporting_nam": [67, 68], "exps_config": 67, "exps_contain": 69, "exps_export": 70, "exps_inst": 69, "exps_nam": 78, "exps_num": [110, 111, 112, 113], "expsmultimain": 67, "expsnam": 78, "extend": 8, "extended_stabilizer_approximation_error": 8, "extended_stabilizer_metropolis_mixing_tim": 8, "extended_stabilizer_norm_estimation_repetit": 8, "extended_stabilizer_norm_estimation_sampl": 8, "extended_stabilizer_parallel_threshold": 8, "extended_stabilizer_probabilities_snapshot_sampl": 8, "extended_stabilizer_sampling_method": 8, "extens": [13, 16, 37, 94, 109], "extern": 90, "extra": [10, 35, 72, 85, 92, 108], "extract": 75, "extrem": 122, "f": [1, 4, 8, 26, 27, 28, 29, 30, 31, 35, 36, 39, 40, 88, 94, 95, 96, 97, 102, 103, 109, 113, 114, 116, 118, 119], "f0d6453c": 112, "f18f8393affa": 111, "f1c41a4f": 110, "f6303469": 98, "f801348c4ed9": 101, "f818": 112, "facilit": [104, 105], "fack_backend_load": 85, "fackbackend": [85, 93], "factor": [61, 64], "fail": 8, "fake": [85, 90, 92], "fake_provid": [85, 92], "fake_provider_v1_new": 92, "fake_provider_v1_old": 92, "fake_provider_v2_new": 92, "fake_provider_v2_old": 92, "fakebackend": [85, 92], "fakebackendv2": 85, "fakeprovid": [85, 92], "fakeproviderdep": 92, "fakeproviderforbackendv2": [85, 92], "fakeproviderforbackendv2dep": 92, "fakeproviderforbackendv2indep": 92, "fakeproviderindep": 92, "fals": [1, 3, 4, 6, 8, 9, 12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 56, 57, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 92, 102, 110, 111, 112, 113, 115, 116], "familiar": [109, 122], "fan": [2, 4], "faster": [110, 111, 112, 113], "fastest": [17, 37, 122], "featur": [10, 26, 27, 28, 39, 40, 55, 88, 94, 103, 106, 107, 109, 122], "fee": 77, "few": [13, 14, 16, 37, 94, 109], "ffdfcade": 95, "fict": 56, "fidel": [13, 16, 37, 94, 109], "field": [1, 7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 57, 59, 60, 61, 66, 78, 102], "fields_remap": 37, "file": [3, 4, 5, 6, 11, 35, 36, 37, 39, 40, 48, 53, 57, 59, 60, 61, 62, 66, 67, 69, 70, 72, 85, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "file_index": [48, 57, 59, 60], "file_loc": 67, "filenam": [3, 4, 5, 62, 64], "filenotfounderror": [4, 61, 78, 92], "filetyp": [4, 5], "fill": 45, "filter": 59, "filter_deprecated_arg": [59, 63], "final": [39, 66, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 122], "financ": 91, "find": [8, 10, 13, 16, 37, 65, 78, 94, 104, 105, 107, 109], "fine": 108, "fingertip": 108, "first": [15, 27, 29, 30, 33, 35, 36, 37, 39, 40, 58, 62, 77, 80, 85, 103, 107, 108, 110, 111, 112, 118, 120], "first_3": [110, 111, 112], "first_count": [29, 30, 35, 120], "firstli": [110, 111, 112, 113], "fix": [10, 85, 92, 107], "fixer": 77, "flammia": [13, 16, 37, 94, 109], "flatten": [13, 18, 19, 37], "float": [3, 8, 9, 13, 14, 15, 18, 19, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 81, 102, 114, 115, 116, 117, 118, 119, 120, 121], "float64": [14, 25, 26, 27, 29, 30, 32, 33, 41, 42, 45, 81, 97, 99, 100, 101, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121], "flush": 6, "focu": 122, "folder": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 57, 59, 60, 61, 62, 64, 72, 78, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "folder_with_repeat_tim": [63, 64], "follow": [14, 15, 20, 22, 27, 37, 40, 45, 83, 85, 90, 97, 102, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "forc": 4, "forest": [2, 4], "fork": [89, 102], "forkserv": 89, "form": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72], "format": [58, 62, 65, 66, 67, 78, 87, 89, 90, 102], "formerli": [41, 45, 46], "formula": [61, 64], "found": [4, 55, 73, 80, 85, 92, 107], "four": [35, 37, 39], "frac": [13, 14, 15, 20, 22, 37, 83, 102], "frank": [32, 45, 94, 109], "freedom": 33, "from": [1, 2, 4, 8, 10, 11, 13, 14, 15, 16, 26, 27, 29, 30, 31, 33, 35, 36, 37, 39, 40, 48, 50, 55, 56, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 75, 79, 85, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "from_previous_result": [116, 118], "frustrat": 103, "ft": 97, "fucnction": 11, "fuction": 122, "fujitsu": 108, "full": [8, 10, 89, 90, 108], "fulli": [104, 105], "fun": 55, "fun_platform_check": 86, "func": [89, 111], "function": [1, 2, 3, 4, 6, 10, 13, 16, 17, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 55, 56, 62, 72, 74, 77, 80, 88, 89, 91, 94, 97, 104, 108, 109, 111, 112, 115, 116, 117, 118, 120, 121], "functool": 97, "fusion_en": 8, "fusion_max_qubit": 8, "fusion_threshold": 8, "fusion_verbos": 8, "g": [32, 45, 94, 109], "galm": 85, "gate": [22, 27, 30, 41, 51, 55, 56, 96, 104, 105, 116, 117, 118, 121], "gaug": [26, 27, 28, 39, 40, 94, 109], "geek": 77, "gener": [4, 7, 11, 26, 29, 33, 35, 36, 37, 39, 40, 48, 55, 57, 60, 64, 72, 77, 80, 105, 111, 112], "generalbackend": 85, "generalsimul": [69, 72, 85], "generate_random_unitary_se": [35, 36, 37, 39, 40, 76, 80, 111, 112], "generate_seeds_for_single_circ": [76, 80], "genericfloattyp": [26, 29, 115, 116], "get": [14, 15, 24, 27, 30, 39, 50, 64, 75, 85, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 108, 111, 112, 113, 114, 119, 122], "get_backend": 92, "get_counts_and_except": [75, 76], "get_default_fake_provid": 85, "get_default_sim_sourc": 85, "get_wav": [51, 55, 56], "getattr": 8, "getting_start": 92, "ghz": [83, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "ghz_": [103, 110, 111, 112, 113], "ghz_10": [111, 112], "ghz_10_m": 103, "ghz_12": [111, 112], "ghz_12_m": 103, "ghz_2": [110, 111, 112], "ghz_2_m": 103, "ghz_4": [110, 111, 112], "ghz_4_m": 103, "ghz_6": [110, 111, 112], "ghz_6_m": 103, "ghz_8": [98, 99, 100, 101, 102, 111, 112], "ghz_8_m": 103, "gil": 122, "git": 106, "github": [1, 2, 10, 11, 22, 26, 27, 29, 30, 35, 77, 85, 90, 92, 105, 107], "gitignor": [4, 69], "gitsynccontrol": [4, 69], "give": [75, 102, 110, 111, 112], "given": [13, 14, 15, 17, 33, 35, 37, 49, 55, 59, 61, 72, 83, 97, 102], "given_oper": [13, 15, 17, 37], "global": [8, 26, 27, 28, 94, 109, 115, 116, 117, 118, 120, 121, 122], "gnu": 102, "good": [85, 92], "got": 35, "gpu": [8, 91, 93, 108], "graduat": [104, 105], "grasp": [13, 16, 37, 94, 109], "grate": [104, 105], "great": 62, "green": [32, 45, 94, 109], "greenawai": [26, 27, 28, 94, 109], "group": [35, 67, 102], "grow": [26, 27, 28, 39, 40, 94, 109], "growth": [26, 27, 28, 39, 40, 94, 109], "guarante": [88, 89, 108], "guh": 2, "guider": 4, "guild": 62, "h": [83, 95, 96, 97, 98, 99, 100, 101, 102, 103], "h1": 1, "h2": 1, "h3": 1, "h4": 1, "h5": 1, "h6": 1, "ha": [8, 10, 13, 16, 33, 35, 37, 51, 55, 56, 61, 64, 65, 72, 83, 85, 92, 94, 104, 108, 109, 110, 111, 112, 113, 122], "haar": 11, "hadama": 122, "hadamard": [11, 34, 38, 94, 109, 122], "hadamard_entangled_entropi": [24, 119], "hadamard_overlap_echo": 24, "hadamard_test": [11, 24, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "ham": 33, "hamiltonian": [13, 16, 37, 94, 104, 105, 109], "hamming_dist": 33, "hamming_distance_rust": 33, "hand": [116, 118], "handl": [4, 6, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 77, 85, 92, 104, 105, 108], "hard": [77, 122], "hardwar": 108, "harui2019": [104, 105, 107], "hasattr": 8, "hash": [10, 90], "hashabl": [3, 4, 7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 72, 110, 111, 112, 113], "hat": 45, "have": [1, 2, 13, 16, 35, 37, 85, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "hdl": [104, 105], "head": 1, "header": [8, 48, 62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112], "heeger": [104, 105], "hei": 90, "help": [1, 2], "her": [1, 2, 4], "here": [11, 14, 26, 27, 28, 29, 30, 35, 39, 40, 94, 95, 96, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "hh": 87, "high": [13, 16, 37, 94, 109], "highli": [13, 16, 37, 94, 109], "highlight": [13, 16, 37, 94, 109], "him": [104, 105], "hint": [1, 2, 7, 8, 52, 90], "hint_item": 1, "hls_config": 9, "hlsconfig": 9, "hnprint": 1, "hold": 61, "holol": [1, 2, 4], "homer": 77, "hope": [1, 2], "hoshi": [2, 11, 31, 48, 61, 64, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "hoshimachi": [1, 2], "how": [1, 2, 8, 26, 27, 28, 39, 40, 92, 94, 108, 109, 122], "howev": 122, "hsin": [13, 16, 37, 94, 109], "hsiu": [104, 105], "hsu": [104, 105], "hsuan": [104, 105], "html": 92, "http": [10, 13, 14, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 77, 83, 84, 85, 90, 92, 94, 104, 105, 107, 109], "huai": [104, 105], "huang": [13, 16, 37, 94, 109], "huang2020": [13, 16, 37, 94, 109], "hub": [104, 105], "i": [0, 1, 2, 3, 4, 6, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 50, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 69, 72, 73, 74, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 91, 92, 94, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "i686": 108, "i_gate_matrix": 97, "ibm": [66, 69, 72, 83, 84, 85, 91, 93, 104, 105], "ibm_backend": 8, "ibmbackend": 8, "ibmjob": 8, "ibmprovid": 85, "ibmproviderbackendrunarg": 8, "ibmq": [8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 66, 69, 72, 78, 85, 91], "ibmqbackend": [8, 60], "ibmqbackendrunarg": 8, "ibmqjob": 8, "ibmqjobmanag": 66, "ibmqprovid": 85, "ibmruntim": [66, 69, 72], "ibmruntimebackendrunarg": 8, "id": [10, 13, 16, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 74, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "id_exec": 70, "ident": [22, 45, 96], "identif": [114, 119], "idx": [20, 25, 26, 27, 29, 30, 37, 39, 40, 41, 110, 111, 112], "igat": 97, "igni": 91, "ignor": [4, 10, 27, 30, 40, 97, 116, 117, 118, 121], "ignore_backend_supplied_default_method": 9, "ij": [13, 17, 21, 37], "imag": 81, "imperfect": [13, 16, 37, 94, 109], "implement": [11, 17, 22, 27, 30, 37, 43, 46, 48, 55, 61, 64, 77, 89, 90, 109, 116, 117, 118, 121, 122], "implementation_check": [63, 64], "impli": [11, 105], "import": [8, 10, 12, 23, 31, 35, 36, 37, 39, 40, 81, 85, 90, 92, 114, 115, 116, 117, 118, 119, 120, 121, 122], "import_fak": 92, "import_stat": 12, "importerror": [12, 31, 85, 92], "importpointtyp": 85, "improv": [60, 90], "includ": [6, 13, 16, 27, 30, 37, 77, 92, 94, 104, 107, 109], "incompat": 102, "incomplet": 10, "indent": [3, 6, 70], "independ": [13, 16, 26, 27, 36, 37, 39, 40, 57, 60, 94, 101, 109, 111, 116, 118], "independent_all_system": [36, 39, 40], "independent_newlin": 1, "index": [13, 15, 18, 19, 20, 25, 26, 27, 29, 30, 33, 35, 36, 37, 39, 40, 41, 45, 48, 57, 59, 60, 61, 62, 67, 75, 78, 80, 81, 111, 112, 115, 116, 118, 120], "index_renam": 78, "index_taglist": 67, "indexerror": 33, "indic": [115, 116, 120, 122], "ineffici": [110, 111, 112, 113, 122], "infield": 77, "infin": 6, "info": [10, 48], "infom": [61, 64], "inform": [11, 13, 14, 15, 16, 24, 26, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 64, 69, 71, 86, 94, 103, 105, 109, 114, 115, 116, 117, 118, 119, 120], "infti": [14, 15], "inherit": [10, 59, 116], "init_circuit": 8, "init_method": 9, "init_num_reset": 8, "init_qubit": 8, "initi": [11, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 92, 105], "initial_layout": 9, "initial_statevector": 8, "input": [0, 4, 7, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 56, 61, 62, 77, 80, 97, 110, 111, 112], "input_dim": 96, "input_inst": 48, "input_typ": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 61], "inputfix": 76, "insert": 6, "insid": [110, 111, 112, 113], "inspir": [1, 2, 11, 105], "instal": [85, 92, 108], "instanc": [10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 59, 61, 63, 69, 72, 85, 91], "instanti": 88, "instead": [55, 65, 77, 92, 102, 108], "institut": [104, 105], "instruct": [22, 51, 55, 56, 61, 64, 96], "int": [1, 3, 6, 8, 9, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 57, 59, 61, 62, 64, 65, 66, 67, 69, 70, 72, 74, 75, 77, 78, 80, 81, 82, 83, 87, 89, 90, 97, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "int32": 22, "integ": [14, 15, 22, 33, 35, 36, 37, 39, 40, 61, 64, 102], "intel": 108, "interact": [26, 27, 28, 39, 40, 94, 109], "interest": [11, 114, 119], "interfac": 104, "intermedi": [104, 105], "internet_is_fxxking_awesom": 1, "interpret": 122, "intersphinx": 90, "interv": [2, 85], "introduc": [26, 37, 92, 94, 109, 116, 118, 122], "introduct": [114, 119], "invalid": [8, 10, 23, 33, 55, 73, 79], "invert": 15, "inverted_quantum_channel": 15, "investig": [104, 105], "io": [26, 27, 29, 30, 35, 70, 78, 90, 92, 108], "iocomplex": [69, 70, 76, 78], "iocontrol": 76, "ion": [26, 27, 28, 39, 40, 94, 109], "ipad": 108, "ipado": 108, "ipynb": [86, 92], "irregularli": 108, "is_aer_gpu": 92, "is_auto_analysi": 61, "is_cycling_slice_act": 33, "is_hold_by_multimanag": 61, "is_read": 78, "is_read_onli": [4, 6], "is_read_or_retriev": [69, 70], "isbn": [13, 16, 37], "ish": 108, "isinst": 8, "issu": [10, 26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 85, 88, 90, 92, 94, 104, 105, 108, 109], "item": [1, 4, 13, 21, 31, 37, 50, 52, 77, 95, 96, 97, 102, 103, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "itemize_field": 1, "iter": [0, 3, 4, 13, 17, 26, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 77, 89, 90, 120], "itertool": 97, "its": [3, 8, 14, 15, 26, 27, 28, 39, 40, 49, 50, 81, 85, 87, 91, 92, 94, 95, 96, 98, 100, 102, 108, 109, 116, 118, 122], "ium": [11, 105], "j": [22, 37, 41, 45, 80, 81, 96, 112], "jan": [94, 104, 105, 109], "japanes": [1, 2, 4], "jax": [12, 17, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "jax_flatten": [13, 18, 37], "jer": [104, 105], "ji": [13, 17, 21, 37], "jnp": [13, 15, 17, 21, 37], "job": [8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 60, 61, 66, 67, 72, 75, 78, 104, 122], "job_id": [8, 60, 67], "job_nam": 8, "job_share_level": 8, "job_tag": 8, "job_taglist": 67, "jobid": 67, "jobst": [32, 45, 94, 109], "jobstyp": [66, 69, 72, 110, 111, 112, 113], "johann": [26, 27, 28, 94, 109], "john": [13, 16, 37, 94, 109], "joseph": [26, 27, 28, 94, 109], "journal": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "json": [3, 4, 5, 6, 61, 62, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "json_dump_arg": [4, 6], "jsonabl": [11, 48, 62, 70, 102], "jsondumparg": [4, 6], "jsonencod": 6, "jupyt": 86, "jurcev": [26, 27, 28, 39, 40, 94, 109], "just": [1, 8, 22, 26, 27, 29, 44, 47, 55, 77, 90, 110, 111, 112, 122], "justifi": 78, "k": [3, 4, 14, 15, 20, 29, 30, 31, 35, 36, 37, 45, 83, 95, 96, 97, 102, 103, 108, 110, 111, 112, 115, 116, 117, 118, 120, 121], "k2": 31, "kao": [104, 105], "keep": [1, 90], "kei": [3, 4, 6, 8, 11, 13, 15, 16, 17, 22, 24, 26, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 50, 53, 55, 56, 59, 69, 71, 72, 80, 81, 87, 94, 95, 96, 97, 102, 103, 105, 109, 110, 111, 112], "kenni": [83, 84], "kept": [10, 59], "key_list_of_precomput": 17, "key_of_cirq": [95, 96], "key_pars": 3, "key_tuple_load": 4, "keyabl": 67, "keyerror": [55, 56, 73], "keyserlingk": [83, 84], "keyword": [104, 105], "khosla": [26, 27, 28, 94, 109], "kim": [26, 27, 28, 94, 109], "kiran": [26, 27, 28, 94, 109], "knoll": [26, 27, 28, 94, 109], "know": [1, 2, 15, 108], "known": [13, 16, 26, 27, 37, 41, 45, 46, 55, 62, 83, 91, 94, 109, 116, 118], "known_core_packag": 91, "kron": 97, "kroneck": 17, "kueng": [13, 16, 37, 94, 109], "kwarg": [1, 11, 49, 56, 58, 89, 90], "l022020": [32, 45, 94, 109], "label": [12, 39, 40, 41, 42, 45], "laboratori": [13, 16, 26, 27, 28, 37, 39, 40, 94, 109], "lack": 122, "langl": [20, 45], "langle0": 22, "langle1": 22, "languag": [104, 105], "lanl": 77, "lanyon": [26, 27, 28, 39, 40, 94, 109], "larg": [13, 16, 37, 94, 109], "large_dummy_list": [115, 116, 117, 118, 120, 121], "larger": [15, 104, 105], "largest": [13, 14, 15, 37], "largest_shadow_norm_squared_upperbound": 15, "last": [1, 2, 6, 33, 35, 37, 39, 72, 87, 113], "last_ev": [87, 110, 111, 112, 113], "later": [110, 111, 112, 113], "latest": [1, 91, 107, 108], "latest_vers": 1, "layout": 9, "layout_method": 9, "lead": 102, "leak": 62, "learn": [91, 109], "least": [89, 108], "left": [45, 83], "legaci": [4, 57, 59, 62, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103], "lemma": 15, "len": [97, 102, 110, 111, 112, 113, 116, 118], "length": [1, 3, 24, 33, 45, 77, 78, 80, 95, 96, 98, 100, 102, 110, 111, 112], "leq": [14, 15, 37, 102], "less": [15, 33], "let": [110, 111, 112, 113], "lett": 83, "level": [1, 6], "levenshtein": 77, "li": 109, "lib": [92, 102], "librari": [11, 45, 77, 82, 83, 96, 97], "life": [44, 47, 103], "like": [2, 4, 10, 11, 35, 37, 39, 55, 62, 90, 92, 96, 102, 105, 108, 110, 116, 118], "limit": [104, 105, 122], "lin": [104, 105], "line": [1, 33, 113], "link": [2, 26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 90, 94, 104, 105, 109], "linux": [102, 108], "list": [1, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 72, 74, 75, 77, 81, 85, 87, 89, 97, 102, 103, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "listen": [1, 2], "listing_item": 1, "listing_level": 1, "liter": [5, 11, 12, 13, 17, 18, 19, 20, 21, 22, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 53, 55, 56, 61, 66, 67, 69, 72, 79, 81, 85, 89, 116, 118], "live": 8, "live_data_en": 8, "ljust": [1, 92], "ljust_description_fil": 1, "ljust_description_len": 1, "ljust_value_fil": 1, "ljust_value_len": 1, "ljust_value_max_len": 1, "load": [4, 48, 72, 79, 85, 87, 92], "local": [1, 13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 66, 69, 72, 81, 94, 102, 109, 110, 111, 112, 113], "local_random_unitary_oper": [76, 81], "local_random_unitary_pauli_coeff": [76, 81], "local_unitary_op_to_list": [76, 81], "local_unitary_op_to_pauli_coeff": [76, 81], "locat": [3, 4, 5, 12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 53, 57, 59, 60, 61, 64, 66, 67, 69, 70, 72, 81, 110, 111, 112, 113, 122], "lock": [69, 122], "loconfig": 8, "log": [13, 14, 15, 16, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112], "long": [77, 115, 116, 117, 118, 120, 121], "longer": [104, 108], "loschmidt": [11, 24, 29, 30, 35, 36, 105, 120, 121], "lost": 10, "lot": [26, 27, 85, 92, 116, 118], "lower": [13, 14, 15, 16, 37, 85, 91, 92, 94, 104, 109], "lt": [104, 108], "luck": [85, 92], "lucky_msg": [85, 92], "lurk": 2, "m": [2, 4, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 37, 77, 94, 102, 103, 109], "machin": [24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 38, 40, 60, 91, 104, 105, 108, 114, 115, 119, 120], "maco": [104, 108], "macos_x86_64": 108, "made": [1, 2, 15, 55, 85, 92, 103], "magnet": [25, 32, 41, 42, 45, 104], "magnet_squar": [11, 31, 42, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "magnet_square_cel": [25, 41, 42, 95, 96], "magnet_square_z": 11, "magnetic_square_cor": 25, "magnetsquar": [25, 41, 42, 96, 97], "magnetsquareanalysi": 41, "magnetsquareanalyzearg": 41, "magnetsquareargu": [41, 96], "magnetsquareexperi": [41, 96], "magnetsquaremeasurearg": 41, "magnetsquareoutputarg": [41, 42], "magnitud": 25, "magnsq_cor": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "magsq_cell_pi": 25, "magsq_cell_py_deprec": 25, "magsq_cell_wrapp": 25, "mai": [1, 4, 10, 26, 27, 28, 29, 30, 35, 36, 39, 40, 62, 77, 85, 89, 92, 107, 108, 122], "maier": [26, 27, 28, 39, 40, 94, 109], "main": [37, 48, 91, 92, 95, 96, 97], "main01": [95, 96, 97, 98, 99, 100, 101, 102, 103], "main02": 102, "main_rz_gat": 96, "main_rz_op": 96, "maintain": 122, "major": 104, "make": [1, 2, 3, 4, 10, 13, 15, 16, 33, 35, 37, 61, 72, 81, 85, 90, 92, 94, 103, 104, 108, 109], "make_callsign": 85, "make_dummy_cas": 33, "make_neel_circuit": [103, 110, 111, 112, 113], "make_statesheet": [63, 64], "make_two_bit_str": 33, "make_two_bit_str_32_pi": 33, "make_two_bit_str_unlimit": 33, "maketwobitstronelin": 33, "manag": [69, 72, 89, 104, 105, 110, 111, 112, 113, 122], "manager_run_arg": [66, 69, 72], "mani": [2, 4, 8, 9, 10, 11, 13, 14, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 85, 92, 94, 105, 109], "manual": [110, 111, 112], "manylinux": [104, 108], "manylinux2014": 108, "map": [13, 16, 33, 35, 37, 39, 67, 89, 91, 94, 104, 105, 109], "mark": 88, "master": [104, 105], "mastersthesi": [104, 105], "match": 24, "materi": [14, 15, 37, 102], "math": [22, 102], "mathbb": [15, 20, 22, 45], "mathcal": [14, 15, 37, 102], "mathrm": [13, 16, 37], "matmul": [13, 17, 21, 37], "matrix": [15, 17, 20, 22, 81], "matrix_calcut": 16, "matrix_product_state_max_bond_dimens": 8, "matrix_product_state_truncation_threshold": 8, "matter": [26, 27, 86, 87, 116, 118], "maualli": 106, "max_": [14, 15, 37, 102], "max_chunk_s": 74, "max_job_s": 8, "max_memory_mb": 8, "max_parallel_experi": 8, "max_parallel_shot": 8, "max_parallel_thread": 8, "max_shadow_norm": [13, 15, 37], "max_shot_s": 8, "max_value_len": 1, "maximum": [13, 14, 15, 33, 37, 74, 102], "maximum_shadow_norm": [14, 37, 97, 102, 112], "me": [85, 92, 103], "mea": 103, "mean": [1, 2, 13, 14, 102], "mean_of_rho": [13, 14, 37, 97, 102, 112], "mean_rho_cor": 21, "meas_level": 8, "meas_lo_freq": 8, "meas_lo_rang": 8, "meas_map": 8, "meas_return": 8, "meas_seri": 26, "meas_system": 26, "measlevel": 8, "measreturntyp": 8, "measur": [7, 10, 11, 13, 14, 15, 16, 20, 24, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 61, 69, 72, 81, 83, 84, 95, 96, 97, 98, 100, 102, 103, 105, 110, 112, 113, 114, 119, 122], "measure_1": 35, "measure_2": 35, "measure_al": [103, 113], "measure_range_allsi": 27, "measure_to_output": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72], "measureactu": [27, 36, 40, 116, 117, 118, 121], "measureactuallyallsi": [27, 40, 118], "measured_but_not_unitary_loc": 35, "measured_but_not_unitary_located_1": 35, "measured_but_not_unitary_located_2": 35, "median": 17, "memori": [8, 61, 62, 64, 69, 74, 122], "memory_slot": 8, "memory_slot_s": 8, "memory_usage_factor": 61, "memory_usage_factor_expect": [63, 64], "mention": [14, 15, 37, 83, 92, 102, 110, 111, 112, 113], "merg": [6, 10], "messag": [0, 10, 23, 26, 27, 29, 30, 35, 69, 85, 88], "meth": [110, 111, 112, 113], "method": [3, 5, 8, 10, 11, 13, 15, 16, 17, 18, 20, 21, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 61, 89, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122], "mi": 20, "michael": 77, "middl": [35, 37, 39], "migig": [26, 27, 39, 40, 116, 118], "migrat": [85, 92], "mind": 1, "minim": [104, 105], "minor": 107, "minu": 83, "miss": [60, 66], "mitig": [13, 16, 26, 27, 28, 37, 39, 40, 104, 105, 115, 117, 120, 121, 122], "mitigatedentropi": [26, 27, 39, 40, 101, 111, 116, 118], "mitigatedpur": [26, 27, 39, 40, 101, 111, 116, 118], "mitigation_equ": 26, "mk": 20, "mki": [17, 22], "mm": 87, "mod": [23, 111], "mode": [3, 4, 6, 70], "model": [13, 16, 37, 94, 104, 105, 109], "modif": 1, "modifi": [13, 16, 37], "modul": [1, 8, 11, 12, 17, 21, 23, 28, 31, 33, 36, 40, 43, 46, 51, 62, 74, 76, 78, 81, 85, 91, 104, 105, 108, 113, 122], "module_loc": 12, "modulenotfounderror": 113, "monitor": [26, 27, 28, 39, 40, 94, 109], "month": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "more": [1, 2, 13, 16, 24, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 52, 61, 64, 77, 85, 92, 94, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 122], "moreov": [13, 16, 37, 94, 109], "mori": [2, 11], "most": [77, 107, 113, 122], "mp": 8, "mpi": 8, "mps_heurist": 8, "mps_lapack": 8, "mps_log_data": 8, "mps_omp_thread": 8, "mps_parallel_threshold": 8, "mps_sample_measure_algorithm": 8, "mps_swap_direct": 8, "mps_swap_left": 8, "msanalysi": 96, "msanalysiscont": [41, 96], "msanalysisinput": [41, 96], "msg_full_cov": 35, "mulitpl": [35, 37, 39], "multi": [8, 27, 30, 36, 40, 62, 69, 70, 110, 111, 112, 113, 116, 117, 118, 121, 122], "multi_exps1": [110, 111, 112, 113], "multi_exps1_read": [110, 111, 112, 113], "multianalysi": [7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72], "multibuild": 72, "multibulid": 7, "multicommon": [69, 70, 71], "multicommonparam": [66, 68, 69, 70, 71], "multicommonparamsdict": [66, 68], "multicommonparamsrawddict": [66, 68], "multicommonparamsrawreaddict": 66, "multiconfig": [69, 70], "multiconfig_name_v5": 70, "multiconfig_name_v7": 70, "multimanag": [10, 11, 35, 36, 37, 39, 40, 50, 51, 53, 59, 61, 62, 65, 66, 67, 70, 71, 72], "multimanager_report_nam": [68, 71], "multimanagercontain": [51, 52, 72, 110, 111, 112], "multioutput": [7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72, 110, 111, 112, 113], "multipend": 72, "multipl": [13, 16, 35, 36, 37, 39, 40, 44, 61, 65, 66, 67, 69, 72, 94, 103, 109], "multiprocess": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 69, 70, 71, 72, 74, 89, 102, 108, 110, 111, 112, 113], "multiprocess_analysi": 37, "multiprocess_build": [69, 72, 110, 111, 112, 113], "multiprocess_export": [68, 70], "multiprocess_exporter_wrapp": [68, 70], "multiprocess_pool_s": [27, 30], "multiprocess_writ": [35, 36, 37, 39, 40, 68, 69, 70, 72, 110, 111, 112, 113], "multiprocess_writer_wrapp": [68, 70], "multiquant": 51, "multiread": [72, 110, 111, 112, 113], "multiretriev": 72, "multithread": 102, "multiwrit": 72, "must": [2, 13, 15, 37], "mutablemap": 55, "mute": [3, 57, 69, 77], "mute_auto_lock": 69, "mute_outfields_warn": 77, "mute_warn": [57, 69], "mutlticonfig_nam": 66, "mwh": 77, "my_experimental_funct": 88, "myexperimentalclass": 88, "n": [13, 14, 15, 33, 35, 37, 39, 77, 82, 83, 97, 102, 103, 110, 111, 112, 113], "n_a": [26, 33], "n_bodi": 11, "n_fmt": 90, "n_q": 20, "n_u": [35, 36, 37, 39, 40, 111, 112], "n_u_100": [99, 101, 102], "n_u_300": 97, "na": 108, "name": [1, 2, 4, 11, 22, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 55, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 76, 78, 82, 83, 85, 87, 88, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 106, 110, 111, 112, 113, 116, 118], "name_exp": 64, "name_or_id": 61, "namedtupl": [55, 61, 62, 116], "naming_complex": [69, 70], "nan": [6, 14, 37, 97, 102, 112], "nation": [104, 105], "natur": [13, 16, 33, 37, 91, 94, 109], "nct": [104, 105], "ndarrai": [13, 14, 15, 17, 18, 19, 20, 21, 22, 26, 37, 41, 81, 97, 102], "nearest": [61, 64], "necessarili": 107, "need": [2, 6, 10, 34, 37, 38, 41, 42, 48, 61, 77, 85, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 110, 111, 112, 113], "neel": [110, 111, 112, 113], "neel_": [103, 110, 111, 112, 113], "neel_10": [111, 112], "neel_10_m": 103, "neel_12": [111, 112], "neel_12_m": 103, "neel_2": [110, 111, 112], "neel_2_m": 103, "neel_4": [110, 111, 112], "neel_4_m": 103, "neel_6": [110, 111, 112], "neel_6_m": 103, "neel_8": [111, 112], "neel_8_m": 103, "neither": [24, 27, 30, 114, 119], "net": [104, 105], "network": 8, "neupert": [83, 84], "never": [22, 62], "new": [1, 14, 15, 37, 43, 46, 47, 48, 55, 59, 61, 64, 72, 95, 96, 98, 99, 100, 101, 102, 103, 107, 115, 116], "new_fields_default": 37, "newer": [85, 92], "newlin": [1, 6], "nicola": [83, 84], "nightli": 106, "nisq": [104, 105], "no_creq": 103, "no_seri": [35, 36, 37, 39, 40, 69, 71, 72], "nois": [13, 16, 37, 94, 104, 105, 109], "noise_model": 8, "noisi": [104, 105, 114, 119], "non": [6, 13, 16, 37, 94, 109], "none": [1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 15, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 55, 56, 57, 59, 60, 61, 62, 64, 67, 69, 72, 73, 75, 77, 79, 80, 82, 85, 86, 88, 89, 90, 95, 96, 98, 99, 100, 101, 102, 103, 111, 114, 115, 116, 117, 118, 119, 120, 121], "nonetheless": 122, "nor": [24, 27, 30, 114, 119], "norm": [13, 14, 15, 37, 102], "normal": [31, 48, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "notat": [14, 15, 37, 102], "note": [115, 116, 120], "notebook": [92, 122], "notimplementederror": 61, "notori": 122, "now": [2, 95, 96, 97, 98, 99, 100, 101, 102, 103], "np": [13, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 32, 37, 41, 80, 81, 97, 99, 100, 101, 102, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121], "npt": 41, "nsg_overlapping_s": 35, "nstc": [104, 105], "ntu": [104, 105], "nu_shadow_direct": 20, "null": [6, 27, 40, 118], "null_count": [26, 39, 116], "num": [33, 75, 110, 111, 112], "num_classical_regist": [26, 29, 33, 35, 39, 99, 101, 111, 115, 116, 120], "num_classical_registers_all_si": [26, 39, 101, 111, 116], "num_classical_snapshot": 15, "num_classical_snapshot_candin": 97, "num_clbit": 22, "num_of_esitm": 15, "num_of_esitmator_calc": 15, "num_of_estim": 15, "num_of_estimators_k": [14, 37, 97, 102, 112], "num_of_given_oper": 15, "num_process": [9, 74], "num_qubit": [22, 25, 27, 33, 37, 39, 40, 41, 42, 45, 80, 82, 83, 95, 96, 97, 101, 102, 111, 112, 118], "num_threads_per_devic": 8, "number": [1, 13, 14, 15, 16, 18, 19, 20, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 59, 61, 64, 66, 69, 72, 74, 75, 77, 78, 80, 81, 82, 83, 87, 89, 90, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "numer": [13, 16, 33, 35, 37, 39, 94, 109], "numerical_error_toler": 33, "numpag": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "numpi": [13, 14, 17, 18, 20, 26, 29, 37, 41, 97, 102], "numpy_flatten": [13, 18, 37], "numpy_precomput": [13, 18, 20, 37], "nvidia": [86, 108], "nz": 77, "o": [3, 4, 14, 15, 27, 30, 40, 45, 61, 77, 102, 108, 116, 117, 118, 121], "o_i": [13, 14, 15, 37, 45, 102], "object": [3, 6, 22, 26, 27, 29, 30, 31, 33, 35, 52, 54, 57, 58, 60, 62, 64, 77, 90, 92, 95, 96, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 115, 116, 117, 118, 120, 121], "observ": [13, 16, 37, 94, 109], "occur": [31, 85, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "oct": [94, 109], "odd": 32, "old": [8, 37, 55, 70, 72, 108], "old_fil": 70, "on_dir": 45, "onc": 103, "one": [2, 4, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 44, 64, 80, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113], "one_bodi": 82, "onebodi": 82, "onetim": [66, 69, 72], "onli": [6, 8, 17, 25, 27, 30, 33, 35, 36, 37, 39, 40, 44, 47, 61, 67, 72, 80, 85, 90, 92, 108, 111, 112, 115, 116, 117, 118, 120, 121, 122], "op": 15, "open": [3, 4, 6, 13, 16, 37, 83, 94, 109], "open_arg": [4, 6], "openarg": [4, 6], "openqasm": [10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 60, 61, 72, 79], "openqasm3": 10, "openqasm3issue13362warn": 10, "openqasmprocessingwarn": 10, "oper": [6, 10, 13, 14, 15, 17, 18, 19, 20, 22, 32, 33, 35, 36, 37, 39, 40, 41, 45, 46, 51, 55, 56, 77, 80, 81, 96, 102, 104, 105, 106, 111, 112], "operator_prepar": 97, "operators_for_magnet_sq": 97, "operatorsm": [14, 37, 102], "opportun": [13, 16, 37, 94, 109], "optim": [8, 91], "optimization_level": 9, "optimization_method": 9, "option": [1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 55, 56, 57, 59, 60, 61, 62, 64, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 85, 86, 88, 89, 90, 92, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "order": [13, 15, 16, 24, 26, 27, 28, 32, 35, 37, 38, 39, 40, 45, 85, 94, 104, 105, 109, 114, 116, 118], "org": [13, 14, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 77, 83, 84, 94, 104, 105, 107, 109], "organ": 1, "origin": [4, 77, 85, 92], "orphan": 72, "orphan_exp": [50, 72], "oscil": [104, 105], "other": [4, 11, 27, 35, 40, 48, 61, 62, 66, 72, 77, 89, 92, 95, 96, 97, 99, 101, 102, 104, 106, 115, 116, 117, 118, 120, 121], "other_kwarg": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48], "otherwis": [4, 6, 40, 60, 61, 64, 95, 96, 98, 99, 100, 101, 102, 103], "otim": 83, "our": [13, 16, 22, 26, 27, 28, 37, 39, 40, 77, 90, 94, 104, 105, 109], "out": [26, 27, 28, 33, 39, 40, 94, 104, 109], "outcom": [13, 16, 37, 94, 109, 116, 118, 122], "outdat": 1, "outer": 22, "outer_product": 22, "outfield": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 62, 64, 66, 69, 77], "outfields_check": [76, 77], "outfields_hint": [76, 77], "outfields_mayb": 77, "outfields_unknown": 77, "output": [6, 7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72, 110, 111, 112, 113], "output_dim": 96, "output_nam": 9, "outputarg": 7, "outsid": 37, "outside_analysis_recov": 37, "outside_analyz": 37, "outside_analyze_wrapp": 37, "outsideanalyzeinput": 37, "overal": [26, 27, 28, 39, 40, 94, 109], "overlap": [10, 11, 24, 26, 27, 28, 29, 30, 34, 35, 36, 40, 104, 116, 117, 118], "overlap_echo_allrust": 30, "overlap_echo_cor": 30, "overlap_echo_core_2": 29, "overlap_echo_core_2_allrust": 29, "overlap_echo_core_2_pyrust": 29, "overlap_echo_core_pycyrust": 30, "overlapcomparisonsizediffer": [10, 35], "overlapping_given_check": 35, "overlapping_size_check": 35, "overrid": 8, "overview": 94, "overwrit": [59, 61, 62, 69, 72], "overwriten": 59, "overwritten": [47, 61, 69, 95, 96, 98, 99, 100, 101, 102, 103], "own": 122, "p": [26, 27, 28, 29, 30, 35, 36, 39, 40, 94, 109], "pack": 62, "packag": [2, 10, 11, 85, 90, 91, 92, 104, 105, 107, 122], "page": [11, 13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 90, 94, 104, 105, 109], "pain": 8, "pair": [35, 61, 73, 97], "paper": [14, 15, 37, 102, 104, 105, 114, 119], "parallel": [89, 104, 105], "parallelli": 122, "parallelmanag": 11, "param": [22, 29], "paramagnet": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112], "paramet": [1, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 53, 55, 56, 57, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 94, 102, 109, 110, 111, 112, 113], "parameter_bind": 8, "parametric_puls": 8, "params_control": [4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61], "paramscontrol": 4, "pars": [3, 55, 56, 59], "part": [26, 27, 28, 29, 39, 40, 85, 94, 109, 122], "parti": 23, "partial": [104, 105], "partit": [26, 27, 28, 30, 36, 39, 40, 94, 109, 116, 117, 118, 121], "pass": [8, 61, 66, 72, 88], "passmanag": [7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 51, 61, 72, 73], "passmanager_contain": 73, "passmanager_pair": [35, 61], "passmanager_processor": [73, 76], "passmanagercontain": [51, 54, 72], "passmanagertyp": [7, 34, 36, 37, 72], "path": [3, 4, 5, 8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 57, 59, 60, 61, 64, 66, 67, 69, 70, 72, 78, 81], "pathlib": [69, 72], "pauli": 81, "pbar": [13, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 72, 90, 114, 115, 116, 117, 118, 119, 120, 121], "pdf": [26, 27, 28, 39, 40, 94, 109], "pend": [10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 60, 61, 66, 67, 69, 72, 78], "pending_pool": 67, "pending_strategi": [66, 68, 69, 72, 110, 111, 112, 113], "pending_target_provid": [66, 68], "pendingpool": 67, "pendingstrategi": [66, 72], "pendingstrategyliter": [66, 68, 69, 72], "pendingtargetproviderliter": [66, 68, 69, 72], "per": 33, "percentag": 90, "perform": [13, 18, 20, 26, 27, 28, 37, 39, 40, 45, 60, 62, 94, 108, 109, 116, 118, 122], "period": 83, "peripher": 33, "permut": 97, "petar": [26, 27, 28, 39, 40, 94, 109], "peter": [13, 16, 26, 27, 28, 37, 39, 40, 94, 109], "phase": [32, 45, 94, 109], "phi": 96, "phy": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "physic": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "physrev": [26, 27, 28, 94, 109], "physreva": [26, 27, 28, 29, 30, 35, 36, 39, 40], "physrevlett": [83, 84], "physrevresearch": [32, 45, 94, 104, 105, 109], "pi": 22, "pid": 102, "pip": [85, 92, 104, 107, 108], "plain": 5, "platform": [13, 16, 37, 86, 94, 104, 105, 106, 109], "pleas": [1, 10, 65, 85, 92, 103, 104, 105, 109], "plu": 83, "pmatrix": 22, "point": [13, 16, 33, 37, 85, 94, 109], "polici": 6, "pollmann": [32, 45, 94, 109], "pool": [67, 89], "pool_kwarg": 89, "popen_fork": 102, "posit": [10, 13, 15, 37, 43], "position_distribut": 11, "positiondistribut": 43, "posixpath": [3, 4, 5, 61, 69, 72, 78, 95, 96, 98, 99, 100, 101, 102, 103], "possibl": [2, 4], "post": [12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 41, 42, 92, 94, 104, 105, 108], "postprocess": [13, 24, 39, 104, 114, 119], "postprocessingbackend": 37, "postprocessingbackenddeprecatedwarn": 23, "postprocessingbackendlabel": [12, 13, 24, 25, 26, 27, 30, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 114, 115, 116, 117, 118, 119, 120, 121], "postprocessingcythonimporterror": 23, "postprocessingcythonunavailablewarn": 23, "postprocessingrustimporterror": 23, "postprocessingrustunavailablewarn": 23, "postprocessingthirdpartyimporterror": 23, "postprocessingthirdpartyunavailablewarn": 23, "power": [13, 16, 37, 77, 94, 108, 109, 110, 111, 112, 113], "pprint": [115, 116, 117, 118, 120, 121], "practic": [13, 16, 37, 94, 109], "precis": [8, 13, 16, 37, 94, 109], "precomput": [13, 17, 18, 20, 22, 37], "precomputed_rho_m_k_i": 22, "precomputed_rho_m_k_i_2": 22, "predict": [13, 14, 15, 16, 17, 26, 27, 28, 37, 39, 40, 94, 97, 102, 104, 105, 109], "prediction_algorithm": 15, "prediction_einsum_aij_bji_to_ab_jax": 17, "prediction_einsum_aij_bji_to_ab_numpi": 17, "prefix": [11, 105], "prepar": [13, 16, 26, 27, 37, 94, 109, 116, 118, 122], "preparing_all_system": [26, 27], "presenc": [26, 27, 28, 39, 40, 94, 109], "present": [13, 16, 26, 27, 28, 37, 39, 40, 94, 109], "preserv": [13, 16, 37, 94, 109], "preset": 96, "preskil": [13, 16, 37, 94, 109], "pretti": 6, "prevent": [10, 95, 96, 98, 99, 100, 101, 102, 103], "previou": [61, 62, 109], "previous": [13, 16, 37, 92, 94, 109], "primit": [14, 15, 37, 102], "print": [1, 4, 6, 31, 77, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "print_arg": [4, 6], "printarg": [4, 6], "printer": 1, "prior": [11, 105], "prioriti": 85, "probabiltii": [14, 15, 37, 102], "probabl": [13, 15, 16, 23, 37, 94, 109], "probe": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 94, 104, 105, 109, 115, 116, 117, 118, 120, 121], "problem": [1, 85, 92, 110, 111, 112, 113], "procedur": [13, 16, 37, 94, 109, 122], "process": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 55, 56, 68, 73, 74, 77, 78, 89, 92, 94, 104, 105, 108, 109], "process_map": 89, "processor": [79, 106], "prod_": 45, "produc": [13, 16, 37, 94, 109], "product": [17, 22, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 57, 59, 60, 82, 83, 95, 96], "program": [59, 66], "programm": [13, 16, 37, 94, 109], "progress": [13, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 72, 89, 90], "progressbar": 11, "progressbar_ascii": 90, "project": [11, 104, 105], "proot": 108, "properli": 108, "properti": [1, 13, 14, 16, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 61, 69, 72, 82, 83, 85, 94, 109], "propertyset": 9, "propos": [11, 43, 46, 105], "proposal_tag": 4, "protect": [10, 69, 83, 84, 114, 119], "protect_kei": 4, "proto": 107, "protocol": [13, 16, 26, 27, 28, 37, 39, 40, 94, 104, 109], "prototyp": 7, "prove": [26, 27, 28, 39, 40, 94, 109], "proven": 10, "provid": [6, 8, 13, 16, 26, 27, 28, 37, 39, 40, 66, 69, 72, 74, 85, 88, 91, 92, 93, 94, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113], "providers_basica": 92, "pser": 26, "psi": 45, "public": [104, 105], "publish": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "pull": 10, "pulsechannel": 8, "pulseqobj": 8, "puriti": [13, 14, 24, 26, 27, 29, 30, 34, 35, 36, 37, 38, 39, 40, 44, 47, 97, 100, 101, 102, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121], "purity_cel": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "purity_cell_2": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "purity_cell_2_pi": 26, "purity_cell_2_rust": 26, "purity_cell_list_allsi": 27, "purity_cell_pi": 27, "purity_cell_rust": 27, "purity_echo_cor": [31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "purity_echo_core_allrust": 24, "purityallsi": [26, 27, 39, 40, 101, 111, 116, 118], "puritycel": [26, 27, 39, 40, 101, 115, 116, 117, 118, 120, 121], "puritycellsallsi": [26, 27, 39, 40, 101, 116, 118], "puritysd": [26, 27, 29, 30, 35, 36, 39, 40, 101, 111, 115, 116, 117, 118, 120, 121], "puritysdallsi": [26, 27, 39, 40, 101, 111, 116, 118], "purpos": 60, "pursu": [13, 16, 37, 94, 109], "put": [26, 27, 29, 30, 35, 115, 116, 117, 118, 120, 121], "py": [86, 92, 102], "pylint": 9, "pypi": [11, 105, 106], "pytest": 107, "python": [3, 4, 12, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 77, 86, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 119, 122], "python3": [92, 102], "python_precomput": 18, "pytorch": 86, "pytorch_cuda_check": 86, "pyxdameraulevenshtein": 77, "q": [11, 105], "q0": 83, "q1": 83, "q2": 83, "q3": 83, "q4": 83, "q5": 83, "q6": 83, "q7": 83, "q_0": [95, 96, 97, 98, 99, 100, 101, 102, 103], "q_1": [95, 96, 97, 98, 99, 100, 101, 102, 103], "q_2": [95, 96, 97, 98, 99, 100, 101, 102], "q_3": [95, 96, 97, 98, 99, 100, 101, 102], "q_4": [98, 99, 100, 101, 102], "q_5": [98, 99, 100, 101, 102], "q_6": [98, 99, 100, 101, 102], "q_7": [98, 99, 100, 101, 102], "qasm": [60, 61, 76], "qasm2": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72, 79], "qasm3": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72, 79], "qasm_dump": [76, 79], "qasm_load": [76, 79], "qasm_simul": 92, "qasm_str": 79, "qasm_vers": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72, 79], "qasm_version_detect": [76, 79], "qasmqobj": 8, "qasmsimul": 92, "qasmsimulatorpi": [8, 92], "qc": [75, 79, 103, 110, 111, 112, 113], "qiskit": [1, 8, 9, 10, 11, 35, 41, 55, 56, 69, 72, 81, 85, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 110, 111, 112, 113], "qiskit_a": [8, 85, 92], "qiskit_ibm_runtim": [85, 92], "qiskit_ibm_runtime_issue_1318": 85, "qiskit_vers": [11, 92], "qiskit_version_statesheet": [91, 92], "qiskit_version_v0_check": 91, "qiskitvers": 91, "qobj": 8, "qobj_config": 8, "qobj_head": 8, "qobj_id": 8, "qobj_opt": 8, "qobjhead": 8, "qu": [11, 105], "qualcomm": 108, "quantiti": [24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 61, 62, 69, 71, 72, 97, 111, 112, 113, 114, 119], "quantities_contain": 71, "quantities_input_collect": 37, "quantity_contain": [69, 110, 111, 112], "quantitycontain": [51, 53, 69, 71], "quantum": [11, 13, 14, 15, 16, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72, 75, 83, 84, 92, 94, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122], "quantum_info": [41, 55, 56, 96], "quantumcircuit": [8, 9, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 60, 61, 64, 72, 75, 79, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "qubit": [8, 13, 14, 15, 16, 18, 19, 20, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 39, 40, 41, 42, 45, 80, 81, 82, 83, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109, 111, 112, 115, 116, 117, 118, 120, 121, 122], "qubit_lo_freq": 8, "qubit_lo_rang": 8, "qubit_mapp": 33, "qubit_mapper_2_int": 33, "qubit_operator_to_pauli_coeff": [76, 81], "qubit_selector": 33, "qubit_selector_rust": 33, "qubits_initially_zero": 9, "qubits_measur": [35, 37, 39, 101, 102], "qubits_measured_1": [35, 99], "qubits_measured_2": [35, 99], "quench": [104, 105], "queri": [11, 105], "question": [44, 47, 103], "quick": [3, 4, 11], "quick_trace_of_matmul": [13, 17, 21, 37], "quickjson": 3, "quickread": [5, 115, 116, 117, 118, 120, 121], "qulac": [66, 69, 72, 108], "qurmagsq": 41, "qurmagsq_magnet_squar": [41, 96], "qurmagsq_magnet_square_zdir": [42, 95], "qurr": [11, 105], "qurrech": [34, 35, 36, 105], "qurrech_hadamard": [34, 98], "qurrech_random": [35, 99], "qurrech_randomized_v1": 36, "qurrent": [37, 38, 39, 40, 105, 110, 111, 112], "qurrent_hadamard": [38, 100], "qurrent_random": [39, 101], "qurrent_randomized_v1": 40, "qurri": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "qurrium": [2, 4, 10, 23, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "qurriuminst": 103, "qurriumprototyp": 72, "qurry_progressbar": 90, "qurryanalysi": 44, "qurryanalysiscont": 44, "qurryanalysisinput": 44, "qurryanalyzearg": 44, "qurryargu": 44, "qurryargumentsexpectednotnon": 10, "qurrycountlost": 10, "qurrydependenciesfailureerror": 10, "qurrydependenciesnotwork": [10, 92], "qurrydeprecatedwarn": 10, "qurrydummyrunnerwarn": 10, "qurryerror": 10, "qurryexperi": 44, "qurryexperimentcountsnotcomplet": 10, "qurryextrapackagerequir": 10, "qurryhashidinvalid": 10, "qurryimportwarn": 10, "qurryinfo": [61, 62, 69, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "qurryinfo_hold_access": 61, "qurryinheritionnoeffect": 10, "qurryinvalidargu": 10, "qurryinvalidinherit": 10, "qurrymeasurearg": 44, "qurrymemoryoverallocationwarn": 10, "qurryoutputarg": 44, "qurrypendingtagtoomani": 10, "qurrypositionalargumentnotsupport": 10, "qurrypostprocessingerror": [12, 23], "qurrypostprocessingwarn": 23, "qurryprotectcont": 10, "qurryresetaccomplish": 10, "qurryresetsecurityactiv": 10, "qurrysummonerinvalid": [10, 64], "qurrytranspileconfigurationignor": 10, "qurryunknownexportopt": 10, "qurryunprovenfeaturewarn": 10, "qurryunrecongnizedargu": 10, "qurryv5": [37, 39, 40], "qurryv9": 44, "qurrywarn": 10, "qurshadi": [11, 112], "qurshady_entropi": [37, 97, 102], "qurstrop": 45, "qurstrop_string_oper": 45, "qurtwistop": 46, "r": [4, 6, 102, 107], "r_x": 22, "r_y": 22, "r_z": 22, "radian": 45, "rainer": [26, 27, 28, 39, 40, 94, 109], "rais": [0, 4, 6, 8, 10, 15, 23, 24, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 44, 55, 56, 59, 60, 61, 64, 72, 73, 78, 79, 80, 83, 85, 91, 92, 103, 114, 119], "ram": [10, 108], "random": [2, 10, 11, 13, 16, 26, 27, 28, 29, 30, 31, 35, 36, 37, 39, 40, 76, 80, 85, 92, 95, 96, 97, 98, 100, 102, 103, 105, 110, 112, 113, 114, 119, 122], "random_unitari": [35, 36, 37, 39, 40, 76, 81, 111, 112], "random_unitary_id": [37, 97, 102], "random_unitary_se": [35, 36, 37, 39, 40, 80, 99, 101, 102, 111, 112], "random_unitary_um": [13, 18, 19, 33], "randomized_circuit_method": 39, "randomized_entangled_entropi": [26, 116, 118], "randomized_entangled_entropy_complex": 39, "randomized_entangled_entropy_complex_v1": 40, "randomized_entangled_entropy_mitig": 26, "randomized_entangled_entropy_mitigated_v1": 27, "randomized_entangled_entropy_v1": 27, "randomized_measur": [11, 26, 27, 29, 30, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "randomized_measure_v1": 11, "randomized_overlap_echo": 29, "randomized_overlap_echo_v1": 30, "randomized_v1": 11, "randomizedentangledentropycomplex": [27, 117], "randomizedentangledentropymitigatedcomplex": [27, 40, 116, 118], "randomizedmeasureerror": 10, "randomizedmeasureunitaryoperatornotfullcov": [10, 35], "randomli": [13, 16, 37, 94, 109], "rang": [10, 13, 16, 24, 27, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 90, 94, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "rangl": [20, 22, 45, 83], "rapidfuzz": 77, "rare": 108, "rate": [26, 27, 39, 40, 116, 118], "rather": [11, 105], "raw": [1, 102], "raw_input": 1, "raw_multiconfig": 66, "rawread": 66, "rawread_multiconfig": 66, "re": [104, 105], "read": [2, 4, 5, 6, 11, 48, 53, 57, 59, 60, 61, 67, 69, 70, 72, 78, 109, 114, 119], "read_from_tarfil": [69, 70, 72], "read_with_argu": 59, "readi": [35, 61], "real": [4, 60, 81, 85, 92, 97], "realiz": [13, 16, 37, 94, 109], "reason": 10, "recal": 104, "recalcul": [14, 15, 37, 102], "recent": 113, "recip": [82, 83, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "recogn": [10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72, 78], "recommend": [77, 91, 108, 122], "recongn": [35, 61, 72], "record": [48, 62, 87], "recount": 33, "recov": 37, "recurrs": 33, "reduc": [14, 15, 32, 62, 97, 104, 105], "ref": [84, 92], "refactor": [115, 116, 120], "refer": [6, 11, 13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 77, 83, 117, 118], "reflect": [26, 27, 28, 39, 40, 94, 109], "refresh": 72, "reg": 82, "regist": [26, 29, 33, 35, 37, 39, 69, 103, 115, 116, 120], "registers_map": [35, 37, 39, 97, 101, 102, 111, 112], "registers_mapping_1": [35, 99], "registers_mapping_2": [35, 99], "regnault": [83, 84], "rel": [13, 16, 37, 94, 109], "relat": 2, "relationship": 122, "releas": [69, 106, 108], "relev": [13, 16, 37, 94, 109, 115, 116, 117, 118, 120], "reli": 107, "reload": 72, "reloc": 81, "remain": [33, 60, 61, 62, 72, 90, 114, 115, 116, 117, 118, 119, 120, 121, 122], "remain_only_compress": [69, 72], "remak": 91, "remap": 37, "rememb": 103, "remind": 85, "remot": [44, 47, 67], "remoteaccessor": 72, "remov": [8, 51, 53, 55, 56, 69, 72], "remove_analysi": 69, "renyi": [11, 37, 38, 39, 40, 104, 105], "rep": 75, "rep_delai": 8, "rep_tim": 8, "repeat": 64, "repeat_tim": 64, "repeatedli": [13, 16, 37, 94, 109], "replac": [11, 55, 56, 60, 61, 72, 90, 91, 95, 96, 98, 99, 100, 101, 102, 103, 105], "replace_backend": 61, "replace_circuit": 60, "replace_target": 60, "report": [10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 58, 59, 61, 62, 64, 69, 71, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 111, 112], "report01": [95, 96, 97, 98, 99, 100, 101, 102, 103], "report02": [95, 96, 98, 99, 100, 101, 102, 103], "report_expand": [61, 64], "reports_rz_g": 96, "reports_rz_op": 96, "repr": 92, "repr_cont": 1, "repres": [14, 22, 26, 27, 28, 39, 40, 41, 94, 97, 109], "represent": [1, 3, 13, 16, 37, 94, 109], "reproduc": 69, "reprt": 62, "request": [10, 104, 107, 108], "requir": [10, 59, 61, 95, 96, 98, 100, 104, 107, 108, 110, 115, 116, 117, 118, 120, 121], "required_fold": [59, 63], "resampled_metropoli": 8, "research": [32, 45, 94, 104, 105, 109], "resembl": [11, 105], "reserv": 4, "reset": [8, 10, 69], "reset_afterward": 69, "respect": [59, 62, 74], "respect_memory_arrai": 74, "respond": [35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47], "rest": [26, 27, 28, 39, 40, 94, 109], "result": [4, 10, 13, 14, 15, 16, 26, 27, 30, 35, 37, 38, 39, 40, 41, 42, 45, 55, 56, 57, 61, 62, 65, 66, 69, 75, 89, 94, 95, 96, 98, 99, 100, 101, 102, 103, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "result_idx_list": 75, "retain": 122, "retriev": [44, 47, 50, 65, 69, 70, 72, 110, 111, 112, 113], "retrievedresult": 65, "return": [1, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "rev": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "reveal": [8, 26, 27, 28, 39, 40, 94, 109], "review": [13, 16, 37, 94, 109], "reviv": 60, "revive_circuit": 60, "revive_target": 60, "rho": [13, 14, 15, 17, 18, 19, 20, 21, 37, 81, 102], "rho_": [17, 20, 22], "rho_m": [13, 18, 19, 20, 37], "rho_m1": [13, 17, 21, 37], "rho_m1_and_rho_m2": 17, "rho_m2": [13, 17, 21, 37], "rho_m_arrai": 17, "rho_m_cor": [16, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "rho_m_core_pi": 18, "rho_m_dict": 37, "rho_m_flatten": [16, 33], "rho_m_flatten_cor": 19, "rho_m_flatten_counts_list_vectorize_pyrust": 33, "rho_m_list": [13, 15, 17, 21, 37], "rho_method": [13, 18, 37], "rho_mk": 20, "rho_mk_cel": 16, "rho_mk_cell_pi": 20, "rho_mk_cell_py_precomput": 20, "rho_mki_kronecker_product_numpi": 17, "rho_mki_kronecker_product_numpy_2": 17, "rhomcoremethod": [13, 18, 37], "rhomkcellmethod": [18, 20], "rich": [13, 16, 37, 94, 109], "richard": [13, 16, 37, 94, 109], "right": [2, 45, 78, 83, 104, 105, 108], "rightarrow": 15, "rjust_len": [76, 78], "rocki": 108, "roo": [26, 27, 28, 29, 30, 35, 36, 39, 40, 94, 109], "root": 102, "rotat": [41, 45], "round": [61, 64], "routing_method": 9, "run": [11, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 64, 66, 69, 72, 95, 96, 98, 99, 100, 101, 102, 103, 107, 108, 113], "run_arg": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 72, 95, 96, 98, 99, 100, 101, 102, 103], "run_bi": [55, 56], "run_config": 8, "run_input": 8, "run_opt": 8, "runargstyp": [8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72], "runnabl": 61, "runner": 10, "runtim": [85, 91, 93], "runtime_parameter_bind_en": 8, "runtimejob": 8, "runtimewarn": 102, "rust": [12, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "rust_avail": 12, "rustup": 107, "rx": [22, 45], "rxmatrix": [76, 81], "ry": [11, 22, 45, 105], "rymatrix": [76, 81], "rz": [22, 45], "rz_0": 96, "rz_0_matrix": 96, "rz_0_op": 96, "rzgate": 96, "rzmatrix": [76, 81], "r\u00e9nyi": [24, 26, 27, 28, 38, 39, 40, 94, 109, 114, 115, 116, 117, 118, 120, 121], "s1": [14, 15, 37, 102], "s13": [14, 15, 37, 102], "s41567": [13, 14, 16, 37, 94, 109], "s42254": [13, 16, 37, 94, 109], "s_i": 33, "s_i_mea": 33, "s_j": 33, "s_j_mea": 33, "sai": [2, 4], "same": [10, 26, 27, 33, 34, 35, 36, 40, 56, 77, 83, 85, 92, 95, 96, 98, 99, 100, 101, 102, 103, 113, 116, 118], "sampl": 44, "sample01": [98, 99, 100, 101, 102], "sample02": [98, 99, 100, 101, 102], "sample03": [98, 99, 100, 101, 102], "sample_shot": 24, "sampling_execut": 44, "samplingexecut": 44, "samplingqurri": 11, "satur": [13, 16, 37, 94, 109], "save": [26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 59, 60, 61, 64, 66, 69, 70, 72, 78, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 116, 118], "save_loc": [3, 4, 5, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 53, 57, 59, 60, 61, 64, 66, 69, 70, 72, 78, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "scale": [13, 14, 15, 16, 37, 94, 104, 105, 109], "scenario": [14, 15, 37, 102, 110, 111, 112, 113], "schedul": 8, "schedule_lo": 8, "scheduleblock": 8, "scheduling_method": 9, "scheme": [6, 13, 16, 37, 94, 109], "school": [104, 105], "schrieffer": [104, 105], "scienc": [26, 27, 28, 39, 40, 94, 104, 105, 109], "sean": [26, 27, 28, 94, 109], "search": [11, 13, 15, 37, 105], "searchabl": [11, 105], "second": [11, 15, 24, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 58, 62, 77, 80, 94, 103, 104, 105, 109, 111, 112, 114, 118, 120, 122], "second_backend": [35, 99], "second_count": [29, 30, 35, 120], "second_passmanag": 35, "second_passmanager_pair": 35, "second_transpile_arg": [35, 99], "secondli": [110, 111, 112, 113], "section": [1, 109, 116, 118], "secur": [10, 57, 69], "see": [14, 15, 37, 85, 102, 108, 116, 118], "seed": [35, 36, 37, 39, 40, 80, 111, 112], "seed_for_single_circ": 80, "seed_simul": 8, "seed_transpil": 9, "seedtyp": 80, "segment": 90, "select": [13, 16, 17, 18, 19, 20, 26, 29, 33, 35, 36, 37, 39, 40, 94, 102, 108, 109, 111, 112, 115, 116, 120], "select_all_trace_rho_by_einsum_aij_bji_to_ab": 17, "select_prediction_einsum_aij_bji_to_ab": 17, "select_single_trace_rho_method": 17, "selected_bitstr": 26, "selected_classical_regist": [13, 14, 18, 19, 20, 21, 26, 29, 33, 35, 37, 39, 99, 102, 115, 116, 120], "selected_classical_registers_sort": [21, 33], "selected_qubit": [33, 37, 39, 97, 101, 102, 111, 112], "self": [8, 26, 27, 28, 55, 56, 61, 77, 94, 102, 109], "senerio": 62, "sens": 2, "sentenc": [1, 2], "sep": [6, 26, 27, 28, 94, 109], "separ": [6, 13, 16, 37, 94, 109], "seper": [10, 85], "seperatedexecutingoverlapresult": 10, "seq1": 77, "seq2": 77, "sequenc": [33, 77, 80], "seri": 26, "serial": [6, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 59, 61, 62, 64, 69, 71, 72, 78, 87, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112], "serial_nam": [76, 78], "serializ": 6, "servic": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 72, 78], "set": [4, 6, 8, 13, 14, 15, 16, 17, 22, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 60, 61, 69, 72, 90, 92, 94, 96, 102, 109, 110, 111, 112, 113, 116, 117, 118, 121], "set_cpu_onli": 17, "set_opt": [8, 92], "set_pbar_descript": 90, "setattr": 8, "setitem": 69, "setup": 90, "sever": [26, 27, 28, 39, 40, 92, 94, 104, 109], "sh": 107, "shadow": [11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 37], "shadow_norm_upperbound": [14, 15, 97], "shadowunveil": [11, 37, 97, 102, 112], "shadowunveilanalysi": 37, "shadowunveilanalyzearg": 37, "shadowunveilargu": [37, 102], "shadowunveilexperi": [37, 102], "shadowunveilmeasurearg": [37, 112], "shadowunveiloutputarg": 37, "shape": [14, 15, 97, 102], "share": [65, 66, 67, 102], "sheet": 48, "short": [2, 4, 8, 11, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72, 77, 81, 98, 99, 105], "short_nam": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72], "shorten": 85, "shorten_nam": 85, "shot": [8, 13, 18, 19, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 64, 66, 69, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "shot_branching_en": 8, "shot_branching_sampling_en": 8, "shot_counts_selected_clreg_checker_pyrust": 33, "shot_per_cas": 33, "should": [4, 11, 15, 27, 33, 34, 35, 37, 38, 44, 47, 48, 55, 61, 81, 90, 95, 96, 98, 99, 100, 101, 102, 103, 116, 118], "show": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 61, 64, 72, 90, 92], "shutdown": 10, "side": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 57, 59, 60, 95, 96], "side_product": [60, 62, 102], "side_product01": [95, 96, 98, 99, 100, 101, 102, 103], "side_product02": 102, "side_product_01": 97, "side_product_field": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48], "sigma": 45, "sign": [85, 90], "signatur": 8, "significantli": [14, 15], "signl": 25, "silicon": 108, "sim": [85, 92], "simialrity_threshold": 77, "similar": [77, 116, 118], "simpl": [11, 22, 26, 27, 28, 90, 94, 95, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112], "simpli": [11, 105, 107], "simplifi": [13, 14, 15, 16, 37, 94, 102, 109], "simul": [13, 16, 26, 27, 28, 37, 39, 40, 85, 93, 94, 104, 105, 108, 109, 115, 116, 117, 118, 120, 121], "sinc": [11, 37, 65, 85, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 110], "singl": [13, 14, 16, 17, 20, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 62, 80, 94, 96, 109, 115, 116, 120], "single_count": [20, 25, 26, 27, 33, 42], "single_counts_recount": 33, "single_counts_recount_pyrust": 33, "single_trace_rho_by_einsum_ij_ji": 17, "single_trace_rho_by_trace_of_matmul": 17, "single_unitary_dict": [37, 39, 81], "single_unitary_op_dict": 81, "single_unitary_op_list_dict": 81, "single_unitary_um": 37, "singlet": 83, "singletracerhomethod": [17, 37], "site": 92, "six": [35, 37, 39], "size": [10, 13, 15, 16, 26, 27, 28, 30, 33, 35, 37, 39, 40, 74, 94, 104, 105, 109], "size_": [110, 111, 112, 113], "size_10": [111, 112], "size_12": [111, 112], "size_2": [110, 111, 112], "size_4": [110, 111, 112], "size_6": [110, 111, 112], "size_8": [111, 112], "skip": [6, 35, 36, 37, 39, 40, 69, 72, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "skip_before_and_aft": [69, 72], "skip_build_writ": [72, 110, 111, 112, 113], "skip_exp": [69, 72], "skip_output_writ": [72, 110, 111, 112, 113], "skip_quant": [69, 72], "skip_writ": [35, 36, 37, 39, 40, 69, 72, 110, 111, 112], "skipkei": 6, "skynet": [1, 2], "sleep": [115, 117, 120, 121], "slice": 33, "slightli": 122, "slow": [115, 116, 117, 118, 120, 121], "slowest": 122, "smile": [85, 92], "smith": [32, 45, 94, 109], "snapdragon": 108, "snapshot": [14, 15, 37, 102], "so": [8, 11, 14, 15, 26, 27, 28, 35, 37, 39, 40, 62, 85, 90, 92, 94, 95, 96, 98, 100, 102, 103, 105, 108, 109, 110], "soanalysiscont": 45, "soanalysisinput": 45, "societi": [26, 27, 28, 29, 30, 32, 35, 36, 39, 40, 45, 83, 94, 104, 105, 109], "solo_wing_pixi": 85, "solut": 26, "solv": [26, 110, 111, 112, 113], "solve_p": 26, "some": [1, 10, 11, 35, 55, 59, 85, 89, 90, 97, 108, 110, 111, 112, 122], "some_tqdm": 90, "someth": [2, 4, 10, 11, 55], "somewher": 10, "song": [1, 2], "sonnet": 22, "sort": [3, 6, 18, 19, 20, 74], "sort_hashable_ahead": 3, "sort_kei": 6, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 107, 109, 116, 118], "space": [6, 35, 37, 39, 60, 77], "spawn": 89, "special": [59, 104, 105], "specif": [4, 27, 33, 35, 36, 37, 39, 40, 41, 44, 47, 55, 56, 59, 61, 69, 72, 96, 104, 105, 117, 118], "specifi": [4, 27, 30, 35, 36, 39, 40, 110, 111, 112, 113, 116, 117, 118, 121], "specific_analysis_arg": [35, 36, 37, 39, 40, 69, 72, 110, 111, 112], "specificanalsisarg": [7, 35, 36, 37, 39, 40, 69, 72], "spectroscopi": [114, 119], "spectrum": [83, 84], "sqrt": [14, 15, 61, 64, 83], "squantiti": [44, 47, 61], "squar": [13, 15, 17, 21, 25, 32, 37, 41, 42, 45, 90, 102], "ss": 87, "ssf": 107, "ssh": [104, 105], "stabil": 8, "stabilizer_max_snapshot_prob": 8, "stabl": 106, "stage": [104, 105], "standard": [26, 27, 29, 35, 36, 39, 40, 55, 90, 115, 116, 117, 118, 120], "star": [1, 2], "starmap": 89, "start": [33, 89, 109], "start_method": 89, "state": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 48, 61, 64, 82, 83, 84, 94, 98, 104, 105, 109, 114, 116, 118, 119, 122], "statement": [9, 12], "statesheet": [48, 61, 64, 85, 91, 92], "statevector": 8, "statevector_parallel_threshold": 8, "statevector_sample_measure_opt": 8, "statevector_simul": 92, "statevectorsimul": 92, "static": [57, 59, 60, 66], "statist": [26, 27, 28, 29, 30, 35, 36, 39, 40, 94, 109], "statu": [11, 114, 115, 116, 117, 118, 119, 120, 121, 122], "step": [33, 104, 105], "steven": [13, 16, 37, 94, 109], "still": [85, 92], "store": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 52, 54, 55, 56, 58, 61, 62, 72, 78, 95, 96, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "str": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 92, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121], "str1": 33, "str2": 33, "str_op": 45, "strategi": [66, 69, 72], "strengthen": [13, 16, 37, 94, 109], "string": [1, 4, 6, 32, 33, 41, 45, 77, 78, 79, 85, 102], "string_oper": [11, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "string_operator_cor": 32, "string_operator_ord": 32, "stringoper": [32, 45], "stringoperatoranalysi": 45, "stringoperatoranalyzearg": 45, "stringoperatorargu": 45, "stringoperatordirect": 45, "stringoperatorexperi": 45, "stringoperatorlib": 45, "stringoperatorlibtyp": 45, "stringoperatormeasurearg": 45, "stringoperatoroutputarg": 45, "stringoperatorunit": 45, "strongli": 108, "strop_cor": [31, 32, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "strtag1": 4, "structur": [2, 4, 11, 26, 27, 28, 39, 40, 55, 94, 102, 109], "style": 90, "su": [104, 105], "suanalysi": [97, 102], "suanalysiscont": [37, 97, 102], "suanalysisinput": [37, 97, 102], "subclass": [37, 48], "submiss": 104, "submit": 8, "subscrib": [1, 2], "subscript": 90, "substitut": 77, "subsystem": [24, 26, 27, 29, 30, 33, 34, 36, 38, 39, 40, 108, 114, 119], "subsystem_s": [27, 30, 33], "success": [13, 16, 37, 94, 109], "succinct": [13, 16, 37, 94, 109], "suffic": [13, 16, 37, 94, 109], "suffici": 108, "suffix": [4, 11, 105], "suggest": [22, 77, 108], "suisei": [1, 2], "sum": [32, 97, 110, 111, 112], "summar": 31, "summat": [13, 21, 37], "summon": [10, 64], "summoner_id": [35, 36, 37, 39, 40, 59, 61, 62, 64, 66, 69, 72, 95, 96, 98, 99, 100, 101, 102, 103, 110, 111, 112], "summoner_nam": [35, 59, 61, 62, 64, 66, 69, 72, 95, 96, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "summonner_check": [63, 64], "superior": [26, 27, 28, 39, 40, 94, 109], "supplementari": [14, 15, 37, 102], "support": [4, 10, 13, 16, 31, 37, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "suppos": [15, 37, 102], "sure": [35, 103, 109], "swap": [114, 119], "symmetri": [83, 84, 114, 119], "sync": 4, "synchron": 4, "synologi": 108, "system": [10, 13, 14, 16, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 59, 94, 104, 105, 106, 109, 115, 117, 120, 121, 122], "system_range_": 110, "system_range_1": 110, "system_range_2": 110, "system_range_3": 110, "system_s": 26, "syystem": 118, "t": [2, 4, 8, 13, 16, 37, 89, 90, 94, 103, 107, 108, 109, 110], "t_map": 89, "t_tgt": 89, "tag": [4, 10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 66, 67, 69, 72, 95, 96, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "taglist": [53, 65, 67], "taglist_nam": [4, 53], "taglistkey": [53, 67, 68], "taglisttakenotiterablewarn": 0, "taiwan": [104, 105], "take": [0, 4, 8, 25, 27, 35, 36, 37, 39, 40, 41, 42, 80, 110, 111, 112, 118], "take_dupl": 4, "taken": [14, 25, 27, 37, 64, 102], "taken_allsi": 27, "taking_tim": [14, 25, 26, 29, 35, 37, 39, 41, 42, 95, 96, 97, 99, 101, 102, 111, 112, 115, 116, 120], "taking_time_all_si": [26, 39, 101, 111, 116], "takingtim": [27, 36, 40, 117, 118, 121], "takingtimeallsi": [27, 40, 116, 118], "talalalala": 2, "tale": [59, 60, 62, 72, 97, 99, 101, 102], "tales_report": [58, 62], "tar": 69, "tarfil": [69, 70, 72], "target": [9, 13, 16, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 60, 61, 64, 85, 94, 109], "target_circuit": [37, 39, 40, 41, 42, 45], "target_circuit_instructions_num": [61, 64], "target_kei": [37, 39, 40, 41, 42, 45, 59, 95, 96, 98, 99, 100, 101, 102, 103], "target_qasm": 60, "tarloc": 78, "tarnam": 78, "task": [13, 16, 37, 74, 94, 109], "tasks_num": 74, "techniqu": [55, 94, 104, 105, 122], "technologi": [13, 16, 37, 94, 109], "temporarili": 8, "ten": [26, 27, 28, 39, 40, 94, 109], "tensor": 8, "tensor_network_num_sampling_qubit": 8, "term": [104, 105], "termin": 108, "termux": 108, "terra": 91, "test": [11, 24, 31, 34, 38, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "test_bit_slic": 33, "test_result_1_1_1": [115, 117, 120, 121], "test_result_1_1_2": [115, 117, 120, 121], "test_result_1_2_1": [116, 118], "test_result_1_2_2": [116, 118], "test_result_1_2_3": [116, 118], "test_result_1_2_4": [116, 118], "test_result_2_1": [114, 119], "test_result_2_2": [114, 119], "testpypi": 106, "text": [1, 5, 13, 14, 15, 27, 37, 40, 102, 118], "textbackslash": [94, 109], "textbackslashmathrm": [94, 109], "tgt": 97, "than": [14, 15, 26, 27, 28, 33, 39, 40, 85, 91, 92, 94, 109, 122], "thank": [104, 105], "thei": [61, 89, 95, 96, 103, 108, 113, 122], "them": [2, 4, 13, 16, 37, 90, 94, 104, 109, 110, 111, 112, 113, 122], "theorem": [14, 15, 37, 102], "theoret": [13, 16, 37, 94, 104, 105, 109], "theori": [11, 105], "therefor": 122, "thesi": [104, 105], "thi": [1, 2, 4, 6, 8, 10, 11, 14, 15, 17, 21, 22, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 59, 61, 62, 65, 69, 72, 74, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "thing": 103, "think": [8, 22, 115, 116, 117, 118, 120, 121], "third": 23, "those": 122, "thought": [22, 103], "thread": 122, "three": [35, 37, 39, 94, 115, 116, 120, 122], "threshold": 77, "through": [104, 105], "thu": [15, 37, 102, 122], "tiff": [26, 27, 28, 39, 40, 94, 109], "tilt": 1, "time": [2, 4, 13, 14, 16, 18, 19, 25, 26, 27, 29, 30, 35, 36, 37, 39, 40, 41, 42, 44, 48, 64, 75, 77, 80, 85, 87, 90, 92, 94, 97, 99, 101, 102, 104, 105, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "titl": [1, 13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "titu": [83, 84], "tlsv1": 107, "tmp_count": [115, 116, 117, 118, 120, 121], "tmp_partit": [115, 116, 117, 118, 120, 121], "tmp_shot": [115, 116, 117, 118, 120, 121], "to_matrix": [96, 97], "todai": [13, 16, 37, 94, 109], "toler": 33, "too": [9, 10, 61, 77, 108, 115, 116, 117, 118, 120, 121], "tool": [1, 2, 26, 27, 28, 39, 40, 73, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105], "toolbox": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 94, 109], "toolkit": [33, 80, 81, 110, 111, 112, 113], "topolog": [32, 45, 83, 84, 94, 104, 105, 109, 114, 119], "topologicalparamagnet": 83, "total": [110, 111, 112, 113, 115, 116], "total_fmt": 90, "tqdm": [13, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 61, 62, 72, 89, 90, 104, 107, 108, 114, 115, 116, 117, 118, 119, 120, 121], "tr": [13, 14, 15, 37, 102], "trace": [13, 15, 17, 21, 37, 102], "trace_expect_process": 16, "trace_method": [13, 15, 21, 37], "trace_of_matmul": [13, 17, 21, 37], "trace_rho_squar": 13, "trace_rho_square_cor": 21, "traceback": 113, "traceless": 15, "tracemethod": 21, "tracerhomethod": [13, 21, 37], "track": 90, "train": [1, 2], "transform": [77, 81], "transit": [32, 45, 94, 104, 105, 108, 109], "translat": [13, 16, 37, 94, 109], "translation_method": 9, "transpil": [3, 10, 11, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 60, 61, 64, 69, 70, 71, 72], "transpile_arg": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 72, 95, 96, 98, 99, 100, 101, 102, 103], "transpilearg": [9, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 61, 72], "transpiled_circuit_instructions_num": [61, 64], "transpli": 4, "transpos": [60, 66], "transposit": 77, "trap": [26, 27, 28, 39, 40, 94, 109], "trasnform": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 72], "travers": 62, "treat": 39, "tree": [2, 4], "trivial": [95, 96, 97, 98, 99, 100, 101, 102], "trivial_paramagnet": [83, 110, 111, 112, 113], "trivial_paramagnet_": [103, 110, 111, 112, 113], "trivial_paramagnet_10": [111, 112], "trivial_paramagnet_10_m": 103, "trivial_paramagnet_12": [111, 112], "trivial_paramagnet_12_m": 103, "trivial_paramagnet_2": [110, 111, 112], "trivial_paramagnet_2_m": 103, "trivial_paramagnet_4": [110, 111, 112], "trivial_paramagnet_4_m": 103, "trivial_paramagnet_6": [110, 111, 112], "trivial_paramagnet_6_m": 103, "trivial_paramagnet_8": [111, 112], "trivial_paramagnet_8_m": 103, "trivialparamagnet": [83, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "trivialpm_2": [95, 96, 97], "trivialpm_4": [95, 96, 97], "trivialpm_6": [95, 96, 97], "trivialpm_8": [95, 96, 97], "trotter": [104, 105], "true": [1, 3, 4, 6, 8, 9, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 56, 57, 60, 61, 64, 69, 72, 109, 110, 111, 112, 113], "try": [10, 85, 92, 103, 108], "tune": 108, "tupl": [1, 4, 6, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 72, 73, 74, 75, 77, 81, 85, 87, 97, 102, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121], "tuple_str_auto_transpli": 4, "tuple_str_pars": 4, "tupletag1": 4, "tupletupl": 17, "tupliz": 4, "turn": 4, "tutori": 92, "tw": [104, 105], "twice": [115, 116, 117, 118, 120, 121], "twist": 46, "twisted_oper": 11, "twistedoper": 46, "two": [10, 13, 16, 26, 33, 34, 35, 36, 37, 77, 85, 94, 109], "two_bodi": 82, "twobodi": 82, "txt": [1, 5, 60, 61], "tyeddict": 116, "type": [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17, 18, 20, 21, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 87, 89, 90, 91, 97, 108, 111, 112, 115, 116, 120], "typeddict": [11, 115, 116, 117, 118, 120], "typeerror": [4, 6, 35, 36, 37, 39, 40, 59, 60, 72, 78, 80], "typenam": 55, "typevar": 9, "u": [11, 14, 15, 37, 102, 104, 105], "u_": 20, "u_m": 22, "u_m_gat": 22, "u_m_matrix": 22, "ubuntu": [104, 108], "ultim": [44, 47, 103], "ultimate_answ": [44, 47, 103], "ultimate_quest": [44, 47, 103], "unavail": 23, "uncompress": 69, "unconfiguredwarn": 10, "under": [15, 33], "understand": 55, "unifi": 85, "union": [1, 3, 4, 5, 6, 8, 9, 13, 18, 19, 20, 25, 26, 27, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 53, 55, 56, 57, 59, 61, 66, 67, 69, 72, 73, 78, 80, 81, 85, 110, 111, 112, 113, 115, 116, 117, 118, 121], "uniqu": [11, 95, 96, 98, 99, 100, 101, 102, 103, 105], "unit": [45, 103], "unitari": [10, 13, 18, 19, 20, 22, 33, 35, 36, 37, 39, 40, 41, 80, 81, 102, 111, 112], "unitary_full_cover_check": 35, "unitary_loc": [35, 36, 37, 39, 40, 81, 97, 101, 102, 111, 112], "unitary_loc_1": 35, "unitary_loc_2": 35, "unitary_loc_not_cover_measur": [35, 37, 39, 111, 112], "unitary_located_map": 35, "unitary_located_mapping_1": [35, 99], "unitary_located_mapping_2": [35, 99], "unitary_op_dict": 81, "unitary_op_list": 81, "unitary_oper": [41, 96], "unitary_set": 16, "unitary_simul": 92, "unitary_sublist": 40, "unitary_synthesis_method": 9, "unitary_synthesis_plugin_config": 9, "unitaryop": [99, 101], "unitarysimul": 92, "univers": [26, 27, 28, 39, 40, 44, 47, 94, 103, 104, 105, 109], "universal2": 108, "unknown": [10, 85, 92, 108], "unnecessari": 8, "unpreced": [13, 16, 37, 94, 109], "unproven": [10, 88], "unproven_featur": 88, "unrecogn": 77, "unsort": 3, "unus": [62, 64], "unused_args_num": [95, 96, 97, 98, 99, 100, 101, 102, 103], "unveil": 97, "unveil_magnetization_squar": 97, "unveil_magnetization_square_01": 97, "up": [26, 27, 28, 39, 40, 94, 109], "updat": [26, 27, 29, 30, 35, 59, 69, 85, 92, 115, 116, 117, 118, 120, 121, 122], "update_save_loc": 69, "upgrad": 10, "upper": [13, 14, 15, 37, 97], "url": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "us": [3, 6, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 59, 60, 61, 62, 64, 66, 69, 71, 72, 77, 78, 80, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 122], "usag": [61, 64, 74, 90, 109, 110, 111, 112, 113], "use_cutensornet_autotun": 8, "use_measure_esp": 8, "user": [85, 108, 114, 119, 122], "usual": [81, 108], "utf": [3, 4, 5, 6, 70], "util": [11, 31, 36, 63, 68, 73, 74, 75, 77, 78, 79, 80, 81, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "uuid": [8, 95, 96, 98, 99, 100, 101, 102, 103], "uuid4": 8, "uv": 102, "v": [3, 4, 31, 95, 96, 102, 103, 110, 111, 112, 115, 116, 117, 118, 120, 121], "v1": [27, 30, 85, 122], "v11": 60, "v2": [31, 85], "v4": [65, 66, 67], "v5": [53, 59, 60, 66, 67, 70], "v5_to_v7_field_transpos": [59, 60, 63, 66, 68], "v7": [53, 59, 60, 66, 67, 70], "v7_to_v11_field_transpos": [60, 63], "v7_to_v9_field_transpos": [59, 63], "v9": 59, "valid": [33, 61, 64], "validation_threshold": 8, "valu": [1, 3, 4, 6, 8, 13, 14, 15, 16, 17, 18, 20, 21, 26, 29, 32, 33, 35, 37, 39, 57, 59, 60, 61, 66, 69, 71, 94, 97, 102, 103, 109, 110, 111, 112, 120], "value_pars": 3, "valueerror": [0, 4, 15, 24, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 44, 55, 56, 60, 61, 64, 72, 73, 79, 80, 83, 85, 92, 103, 114, 119], "valus": 4, "variabl": [116, 118], "varianc": [13, 16, 37, 94, 109], "varieti": [13, 16, 37, 94, 109], "vector": [33, 81], "venv": 92, "veri": [1, 13, 14, 16, 37, 77, 94, 109], "vermersch": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 94, 109], "version": [1, 10, 14, 15, 26, 27, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 53, 61, 65, 67, 72, 79, 85, 91, 92, 104, 106, 107, 122], "version_check": 85, "very_easy_chunk_distribut": [74, 76], "very_easy_chunk_s": [74, 76], "via": [4, 26, 27, 28, 39, 40, 86, 92, 94, 109, 115, 116, 117, 118, 120, 121], "virtual": [1, 2, 104, 105], "visualizationerror": 33, "volum": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "von": [83, 84], "vovrosh": [26, 27, 28, 94, 109], "vtuber": [1, 2, 4], "w": [6, 70, 83, 84], "wa": [1, 2, 11, 26, 27, 28, 39, 40, 94, 102, 105, 108, 109], "wai": [4, 26, 27, 28, 39, 40, 85, 94, 109, 110, 111, 112, 113], "wang": [104, 105], "want": [2, 3, 4, 35, 36, 37, 39, 40, 72, 75, 77, 79, 80, 96, 108, 110, 111, 112, 113, 122], "warn": [0, 1, 2, 10, 23, 24, 35, 37, 39, 57, 69, 77, 85, 88, 91, 92], "wast": 122, "wave": [11, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 59, 72, 94, 104, 110, 111, 112, 113], "wave1": [34, 35, 36], "wave2": [34, 35, 36], "wave_container_mak": [51, 55], "wave_kei": 59, "wave_key_to_target_kei": [59, 63], "wave_nam": [110, 111, 112, 113], "wavecontain": [51, 55, 56, 72, 95, 96, 98, 99, 100, 101, 102, 103, 110, 111, 112], "wavefuctionoverlapresult": [29, 35, 120], "wavefunct": [24, 28, 29, 30], "wavefunction_overlap": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "wavefunction_overlap_2": 28, "wavefunction_overlap_v1": [28, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "wavefunctionoverlap": [11, 98, 99], "wavefunctionoverlapbas": 11, "wavenam": [55, 56, 72], "waves_dynam": 51, "waves_execut": [47, 103, 113], "waves_stat": [51, 55], "wavesexecut": [47, 94, 109], "wavesexecuteranalysi": 47, "wavesexecuteranalyzearg": 47, "wavesexecuterargu": [47, 103], "wavesexecuterexperi": [47, 103], "wavesexecutermeasurearg": [47, 113], "wavesexecuteroutputarg": 47, "wavesqurri": [11, 113], "wavesqurryanalysi": 103, "we": [2, 4, 11, 13, 14, 15, 16, 24, 26, 27, 28, 37, 38, 39, 40, 55, 77, 81, 88, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "weanalysiscont": [47, 103], "weanalysisinput": [47, 103], "web": [11, 77, 90, 105], "well": 8, "what": [8, 22, 26, 27, 103, 116, 118], "whatev": [110, 111, 112, 113], "wheel": 108, "when": [0, 1, 2, 3, 4, 6, 8, 10, 27, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 55, 56, 57, 59, 60, 61, 62, 67, 69, 72, 78, 83, 87, 88, 92, 103, 104, 105, 116, 117, 118, 120, 121, 122], "where": [11, 14, 15, 20, 37, 47, 50, 59, 61, 64, 72, 77, 78, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 110, 111, 112, 113], "whether": [3, 4, 6, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 60, 61, 62, 64, 69, 70, 71, 72, 78, 85, 92, 111, 112, 122], "which": [1, 2, 3, 4, 6, 14, 15, 22, 26, 27, 28, 29, 33, 35, 37, 38, 39, 40, 45, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 72, 77, 78, 83, 85, 86, 88, 90, 92, 94, 95, 96, 97, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120], "which_circuit": 35, "while": 103, "who": [1, 2, 85, 122], "whole": [26, 33], "why": [1, 2, 4, 106], "win32": 108, "window": [104, 108], "windows_arm64": 108, "without": [69, 90], "without_seri": [69, 78], "won": [89, 108], "word": [11, 105], "work": [10, 25, 27, 30, 31, 35, 67, 77, 85, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "workabl": [13, 16, 37, 94, 109], "workdlow": 103, "worker": [27, 30, 36, 40, 89, 116, 117, 118, 121], "workers_distribut": 89, "workers_num": [27, 30, 36, 40, 89, 116, 117, 118, 121], "workflow": [13, 18, 37, 104, 105, 122], "world": [13, 16, 37, 94, 109], "worst": [14, 15, 37, 97, 102], "worst_accuracy_predict_epsilon_calc": [15, 97], "worth": 8, "would": 8, "wrap": 77, "wrapper": [1, 25, 37, 50, 61, 70, 72, 85, 89, 93], "write": [1, 11, 35, 36, 37, 39, 40, 53, 59, 61, 62, 69, 70, 71, 72, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "writer": 70, "written": [3, 48, 108], "wrong": [77, 103], "wsl": 108, "wsl2": 108, "www": [26, 27, 28, 39, 40, 94, 109], "x": [2, 15, 41, 45, 55, 81, 83, 85, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 110, 111, 112, 113], "x86_32": 108, "x86_64": [102, 108], "xg": [94, 109], "xproc": [11, 105], "xz": 69, "y": [11, 41, 45, 81, 96, 105, 107], "ye": [12, 31, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "year": [13, 16, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 45, 83, 94, 104, 105, 109], "yet": [35, 43, 46, 61, 90, 92], "ying": [104, 105], "yoi": [116, 118], "you": [1, 2, 8, 10, 26, 27, 29, 30, 35, 36, 37, 39, 40, 77, 80, 85, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122], "your": [1, 2, 10, 92, 104, 105, 108], "your_need_earbuds_then_call_this_funct": 2, "youtub": [1, 2], "yu": [104, 105], "yuan": [13, 16, 37, 94, 109], "yyyi": 87, "z": [25, 41, 42, 45, 81, 94, 96, 107], "z_dir_magnet_squar": 25, "z_dir_magnetic_square_cor": 25, "z_gate_matrix": 97, "zdirmagnetsquar": [42, 95], "zdirmagnetsquareanalysi": 42, "zdirmagnetsquareanalyzearg": 42, "zdirmagnetsquareargu": [42, 95], "zdirmagnetsquareexperi": [42, 95], "zdirmagnetsquaremeasurearg": 42, "zdirmagnetsquareoutputarg": 42, "zdirmsanalysi": 95, "zdirmsanalysiscont": [42, 95], "zdirmsanalysisinput": [42, 95], "zero_threshold": 8, "zgate": 97, "zh": [104, 105], "zoller": [13, 16, 26, 27, 28, 29, 30, 35, 36, 37, 39, 40, 94, 109], "zy": 45, "\u2139": 108, "\u68ee": [2, 4]}, "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">exception</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hoshi</span></code>", "CapSule?", "<code class=\"docutils literal notranslate\"><span class=\"pre\">jsonablize</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">mori</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">quick</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">qurrium</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">run</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">transpile</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">exceptions</span></code>", "API", "<code class=\"docutils literal notranslate\"><span class=\"pre\">availability</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">classical_shadow</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">container</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">expectation_process</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">classical_shadow</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">matrix_calcution</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rho_m_core</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rho_m_flatten</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rho_mk_cell</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">trace_expect_process</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">unitary_set</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">exceptions</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hadamard</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">magnet_square</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">entangled_entropy</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">entangled_entropy_v1</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">randomized_measure</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">wavefunction_overlap</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">wavefunction_overlap_v1</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">status</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">string_operator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hadamard_test</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">randomized_measure</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">randomized_measure_v1</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">classical_shadow</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hadamard_test</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">randomized_measure</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">randomized_measure_v1</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">magnet_square</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">magnet_square_z</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">position_distribution</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">samplingqurry</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">string_operator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">twisted_operator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">wavesqurry</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">analysis</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">experiments</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">experiments_wrapper</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">container</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">multimanagers</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">multiquantity</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">passmanagers</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">waves_dynamic</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">waves_static</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">afterwards</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">analyses</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">arguments</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">beforewards</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">experiment</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">export</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">experiment</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">afterwards</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">arguments</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">beforewards</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">multimanager</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">multimanager</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">process</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">qurrium</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">build</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">chunk</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">construct</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">inputfixer</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">iocontrol</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">qasm</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">random_unitary</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">randomized</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">n_body</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">simple</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">backend</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">command</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">except_decorator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">parallelmanager</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">progressbar</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">qiskit_version</span></code>", "Appendix 01 - Backend Wrapper", "Other Features", "Basic Usage", "3.1 Magnetization Square on Z Direction", "3.2 Magnetization Square for Any Directions", "3.3 Magnetization Square by Classical Shadow", "2.1 Wave Function Overlap by Hadamard Test", "2.2 Wave Function Overlap by Randomized Measurement", "1.1 Entanglement Entropy by Hadamard Test", "1.2 Entanglement Entropy by Randomized Measurement", "1.3 Entanglement Entropy by Classical Shadow", "0.1 WavesExecuter", "Qurrium", "About", "Installation and About", "Installation", "Platform Support", "Multi-Output", "1.1 Entanglement Entropy by Hadamard Test", "1.2 Entanglement Entropy by Randomized Measurement", "1.3 Entanglement Entropy by Classical Shadow", "0.1 WavesExecuter", "1.1 Hadamard Test", "1.2 Randomized Measurement", "1.3 Randomized Measurement with Error Mitigation", "1.4 Randomized Measurement V1", "1.5 Randomized Measurement V1 with Error Mitigation", "2.1 Hadamaed Test", "2.2 Randomized Measurement", "2.3 Randomized Measurement V1", "Post-Processing"], "titleterms": {"0": [92, 103, 113], "01": 92, "02": 92, "03": 92, "1": [92, 94, 95, 98, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122], "2": [92, 94, 96, 98, 99, 101, 109, 111, 115, 119, 120, 121, 122], "3": [92, 94, 95, 96, 97, 102, 109, 112, 116, 121, 122], "4": [117, 122], "46": 92, "5": 118, "By": 107, "The": 122, "With": [116, 118], "a01": 92, "about": [105, 106], "acceler": 122, "access": [92, 93, 122], "acknowledg": [104, 105], "add": [95, 96, 98, 99, 100, 101, 102, 103], "aer": 92, "after": [95, 96, 97, 98, 99, 100, 101, 102, 103], "afterward": [57, 65], "all": [92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 116, 118], "also": 92, "analys": 58, "analysi": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 110, 111, 112], "ani": 96, "api": 11, "appendix": 92, "architectur": 108, "argument": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 59, 66, 110, 111, 112], "avail": [12, 108], "availabl": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "b": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "backend": [31, 85, 92, 93, 115, 116, 117, 118, 120, 121], "backend_manag": 85, "bar": [114, 115, 116, 117, 118, 119, 120, 121], "base_run": 8, "basic": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "basica": 92, "basicprovid": 92, "beforeward": [60, 67], "bit_slic": 33, "build": 73, "c": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "call": [95, 96, 98, 99, 100, 101, 102, 103], "capsul": [2, 11], "cat": 83, "chunk": 74, "circuit": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "citat": [104, 105], "classic": [94, 97, 102, 109, 112, 122], "classical_shadow": [13, 16, 37], "come": 104, "command": 86, "connect": 104, "consid": 96, "construct": 75, "contain": [14, 26, 27, 51, 95, 96, 98, 99, 100, 101, 102, 103], "count": [103, 113], "counts_process": 33, "cython": 122, "d": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "data": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "datetim": 87, "declar": 11, "demo": 31, "depend": 108, "direct": [95, 96], "directli": [95, 96, 98, 99, 100, 101, 102, 103], "dummi": [33, 114, 115, 116, 117, 118, 119, 120, 121], "e": [96, 103, 110, 111, 112, 113], "easi": 104, "echo_cel": 30, "echo_cell_2": 29, "echo_cor": 30, "echo_core_2": 29, "entangl": [94, 100, 101, 102, 109, 110, 111, 112, 114, 115, 116, 117, 118, 122], "entangled_entropi": [24, 26, 27], "entangled_entropy_2": 26, "entangled_entropy_v1": 27, "entropi": [94, 100, 101, 102, 109, 110, 111, 112, 114, 115, 116, 117, 118, 122], "entropy_cor": 27, "entropy_core_2": 26, "env_check": 85, "environ": 104, "epsilon": 97, "error": [94, 109, 116, 118], "error_mitig": 26, "exampl": [114, 115, 116, 117, 118, 119, 120, 121], "except": [0, 10, 11, 23], "except_decor": 88, "execut": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "exist": [116, 118], "expectation_process": 15, "experi": [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 61, 63, 97, 110, 111, 112, 113], "experiments_wrapp": 50, "export": [62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "extra": [94, 109], "f": [110, 111, 112], "fackbackend": 92, "featur": [93, 104], "find": 97, "from": 92, "function": [11, 31, 98, 99, 122], "futur": 122, "get": [92, 110], "git": 107, "gitsync": 4, "gpu": 92, "hadama": 119, "hadamard": [24, 98, 100, 110, 114], "hadamard_entangled_entropi": 114, "hadamard_overlap_echo": 119, "hadamard_test": [34, 38], "hint": 62, "hoshi": 1, "i": [95, 96, 97, 98, 99, 100, 101, 102, 103], "ibm": [8, 92], "ii": [95, 96, 97, 98, 99, 100, 101, 102, 103], "iii": 97, "import": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "import_fak": 85, "import_simul": 85, "info": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "input": [95, 96, 98, 99, 100, 101, 102, 103], "inputfix": 77, "instal": [104, 106, 107], "instanc": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "integr": [114, 115, 116, 117, 118, 119, 120, 121], "intracel": 83, "iocontrol": 78, "jsonabl": 3, "later": [95, 96, 98, 99, 100, 101, 102, 103], "made": 104, "magnet": [94, 95, 96, 97, 109, 122], "magnet_squar": [25, 41], "magnet_square_z": 42, "magsq_cor": [25, 32], "matrix_calcut": 17, "maualli": 107, "measur": [94, 99, 101, 104, 109, 111, 115, 116, 117, 118, 120, 121], "method": 92, "mitig": [94, 109, 116, 118], "more": [96, 104], "mori": 4, "multi": 109, "multianalysi": [110, 111, 112], "multimanag": [52, 68, 69, 110, 111, 112, 113], "multipl": [110, 111, 112, 113], "multiquant": 53, "n_bodi": 82, "name": 105, "nightli": 107, "note": [22, 84], "number": 97, "onc": [110, 111, 112, 113], "oper": [94, 97, 108, 109], "other": [33, 93], "output": 109, "overlap": [94, 98, 99, 109, 119, 120, 121, 122], "own": [114, 115, 116, 117, 118, 119, 120, 121], "parallelmanag": 89, "paramagnet": 83, "passmanag": 54, "platform": 108, "position_distribut": 43, "post": [11, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "prepar": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "process": [11, 70, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "processor": 108, "progress": [114, 115, 116, 117, 118, 119, 120, 121], "progressbar": 90, "proper": 97, "purity_cel": 27, "purity_cell_2": 26, "purity_echo_cor": 24, "pypi": 107, "python": [108, 115, 116, 117, 118, 120, 121], "qasm": 79, "qiskit": 92, "qiskit_vers": 91, "quantum": [95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113], "quick": 5, "qurrech": 11, "qurrent": 11, "qurri": [11, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 105], "qurrium": [7, 11, 72, 104, 105], "random": [33, 81, 94, 99, 101, 104, 109, 111, 115, 116, 117, 118, 120, 121], "random_unitari": 80, "randomized_entangled_entropi": 115, "randomized_entangled_entropy_mitig": 116, "randomized_entangled_entropy_mitigated_v1": 118, "randomized_entangled_entropy_v1": 117, "randomized_measur": [28, 35, 39], "randomized_measure_v1": [36, 40], "randomized_overlap_echo": 120, "randomized_overlap_echo_v1": 121, "read": [110, 111, 112, 113], "recip": 11, "refer": [94, 109], "releas": 107, "repr_modifi": 1, "result": [110, 111, 112], "rho_m_cor": 18, "rho_m_flatten": 19, "rho_mk_cel": 20, "run": [8, 97, 110, 111, 112], "runtim": 92, "rust": 122, "samplingqurri": 44, "see": 92, "shadow": [94, 97, 102, 109, 112, 122], "simpl": [83, 114, 115, 116, 117, 118, 119, 120, 121], "simul": [8, 92], "snapshot": 97, "soon": 104, "specif": [110, 111, 112], "squar": [94, 95, 96, 97, 109, 122], "stabl": 107, "stai": 104, "statu": 31, "string": [94, 109], "string_oper": [32, 45], "support": 108, "system": [108, 116, 118], "taglist": 4, "take": [103, 113], "templat": [11, 84], "test": [33, 98, 100, 107, 110, 114, 119], "testpypi": 107, "them": [95, 96, 97, 98, 99, 100, 101, 102, 103], "tip": 11, "tool": [11, 94, 109], "trace_expect_process": 21, "transpil": 9, "twisted_oper": 46, "unitary_set": 22, "upperbound": 97, "us": [115, 116, 117, 118, 120, 121], "usag": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106], "util": [6, 33, 35, 37, 39, 40, 41, 42, 45, 64, 71, 76, 85], "utilti": 11, "v1": [117, 118, 121], "version": [95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "wave": [95, 96, 98, 99, 100, 101, 102, 103], "wavefuct": [94, 109, 122], "wavefunct": [119, 120, 121], "wavefunction_overlap": [24, 29, 30], "wavefunction_overlap_2": 29, "wavefunction_overlap_v1": 30, "waves_dynam": 55, "waves_stat": 56, "wavesexecut": [103, 113], "wavesqurri": 47, "why": 105, "wit": [114, 116, 118], "workflow": [94, 109], "wrapper": 92, "your": [114, 115, 116, 117, 118, 119, 120, 121], "z": 95}})